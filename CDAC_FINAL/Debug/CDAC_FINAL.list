
CDAC_FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006134  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080062c4  080062c4  000072c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006360  08006360  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006360  08006360  00007360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006368  08006368  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006368  08006368  00007368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800636c  0800636c  0000736c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006370  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000806c  2**0
                  CONTENTS
 10 .bss          00000398  2000006c  2000006c  0000806c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000404  20000404  0000806c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010fdd  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002473  00000000  00000000  00019079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f30  00000000  00000000  0001b4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bfe  00000000  00000000  0001c420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000214b1  00000000  00000000  0001d01e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000129ed  00000000  00000000  0003e4cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdd89  00000000  00000000  00050ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011ec45  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004694  00000000  00000000  0011ec88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  0012331c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080062ac 	.word	0x080062ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080062ac 	.word	0x080062ac

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800089c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80008a0:	f000 b96a 	b.w	8000b78 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	460c      	mov	r4, r1
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d14e      	bne.n	8000966 <__udivmoddi4+0xaa>
 80008c8:	4694      	mov	ip, r2
 80008ca:	458c      	cmp	ip, r1
 80008cc:	4686      	mov	lr, r0
 80008ce:	fab2 f282 	clz	r2, r2
 80008d2:	d962      	bls.n	800099a <__udivmoddi4+0xde>
 80008d4:	b14a      	cbz	r2, 80008ea <__udivmoddi4+0x2e>
 80008d6:	f1c2 0320 	rsb	r3, r2, #32
 80008da:	4091      	lsls	r1, r2
 80008dc:	fa20 f303 	lsr.w	r3, r0, r3
 80008e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008e4:	4319      	orrs	r1, r3
 80008e6:	fa00 fe02 	lsl.w	lr, r0, r2
 80008ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ee:	fa1f f68c 	uxth.w	r6, ip
 80008f2:	fbb1 f4f7 	udiv	r4, r1, r7
 80008f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008fa:	fb07 1114 	mls	r1, r7, r4, r1
 80008fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000902:	fb04 f106 	mul.w	r1, r4, r6
 8000906:	4299      	cmp	r1, r3
 8000908:	d90a      	bls.n	8000920 <__udivmoddi4+0x64>
 800090a:	eb1c 0303 	adds.w	r3, ip, r3
 800090e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000912:	f080 8112 	bcs.w	8000b3a <__udivmoddi4+0x27e>
 8000916:	4299      	cmp	r1, r3
 8000918:	f240 810f 	bls.w	8000b3a <__udivmoddi4+0x27e>
 800091c:	3c02      	subs	r4, #2
 800091e:	4463      	add	r3, ip
 8000920:	1a59      	subs	r1, r3, r1
 8000922:	fa1f f38e 	uxth.w	r3, lr
 8000926:	fbb1 f0f7 	udiv	r0, r1, r7
 800092a:	fb07 1110 	mls	r1, r7, r0, r1
 800092e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000932:	fb00 f606 	mul.w	r6, r0, r6
 8000936:	429e      	cmp	r6, r3
 8000938:	d90a      	bls.n	8000950 <__udivmoddi4+0x94>
 800093a:	eb1c 0303 	adds.w	r3, ip, r3
 800093e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000942:	f080 80fc 	bcs.w	8000b3e <__udivmoddi4+0x282>
 8000946:	429e      	cmp	r6, r3
 8000948:	f240 80f9 	bls.w	8000b3e <__udivmoddi4+0x282>
 800094c:	4463      	add	r3, ip
 800094e:	3802      	subs	r0, #2
 8000950:	1b9b      	subs	r3, r3, r6
 8000952:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000956:	2100      	movs	r1, #0
 8000958:	b11d      	cbz	r5, 8000962 <__udivmoddi4+0xa6>
 800095a:	40d3      	lsrs	r3, r2
 800095c:	2200      	movs	r2, #0
 800095e:	e9c5 3200 	strd	r3, r2, [r5]
 8000962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000966:	428b      	cmp	r3, r1
 8000968:	d905      	bls.n	8000976 <__udivmoddi4+0xba>
 800096a:	b10d      	cbz	r5, 8000970 <__udivmoddi4+0xb4>
 800096c:	e9c5 0100 	strd	r0, r1, [r5]
 8000970:	2100      	movs	r1, #0
 8000972:	4608      	mov	r0, r1
 8000974:	e7f5      	b.n	8000962 <__udivmoddi4+0xa6>
 8000976:	fab3 f183 	clz	r1, r3
 800097a:	2900      	cmp	r1, #0
 800097c:	d146      	bne.n	8000a0c <__udivmoddi4+0x150>
 800097e:	42a3      	cmp	r3, r4
 8000980:	d302      	bcc.n	8000988 <__udivmoddi4+0xcc>
 8000982:	4290      	cmp	r0, r2
 8000984:	f0c0 80f0 	bcc.w	8000b68 <__udivmoddi4+0x2ac>
 8000988:	1a86      	subs	r6, r0, r2
 800098a:	eb64 0303 	sbc.w	r3, r4, r3
 800098e:	2001      	movs	r0, #1
 8000990:	2d00      	cmp	r5, #0
 8000992:	d0e6      	beq.n	8000962 <__udivmoddi4+0xa6>
 8000994:	e9c5 6300 	strd	r6, r3, [r5]
 8000998:	e7e3      	b.n	8000962 <__udivmoddi4+0xa6>
 800099a:	2a00      	cmp	r2, #0
 800099c:	f040 8090 	bne.w	8000ac0 <__udivmoddi4+0x204>
 80009a0:	eba1 040c 	sub.w	r4, r1, ip
 80009a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009a8:	fa1f f78c 	uxth.w	r7, ip
 80009ac:	2101      	movs	r1, #1
 80009ae:	fbb4 f6f8 	udiv	r6, r4, r8
 80009b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009b6:	fb08 4416 	mls	r4, r8, r6, r4
 80009ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009be:	fb07 f006 	mul.w	r0, r7, r6
 80009c2:	4298      	cmp	r0, r3
 80009c4:	d908      	bls.n	80009d8 <__udivmoddi4+0x11c>
 80009c6:	eb1c 0303 	adds.w	r3, ip, r3
 80009ca:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80009ce:	d202      	bcs.n	80009d6 <__udivmoddi4+0x11a>
 80009d0:	4298      	cmp	r0, r3
 80009d2:	f200 80cd 	bhi.w	8000b70 <__udivmoddi4+0x2b4>
 80009d6:	4626      	mov	r6, r4
 80009d8:	1a1c      	subs	r4, r3, r0
 80009da:	fa1f f38e 	uxth.w	r3, lr
 80009de:	fbb4 f0f8 	udiv	r0, r4, r8
 80009e2:	fb08 4410 	mls	r4, r8, r0, r4
 80009e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ea:	fb00 f707 	mul.w	r7, r0, r7
 80009ee:	429f      	cmp	r7, r3
 80009f0:	d908      	bls.n	8000a04 <__udivmoddi4+0x148>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80009fa:	d202      	bcs.n	8000a02 <__udivmoddi4+0x146>
 80009fc:	429f      	cmp	r7, r3
 80009fe:	f200 80b0 	bhi.w	8000b62 <__udivmoddi4+0x2a6>
 8000a02:	4620      	mov	r0, r4
 8000a04:	1bdb      	subs	r3, r3, r7
 8000a06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a0a:	e7a5      	b.n	8000958 <__udivmoddi4+0x9c>
 8000a0c:	f1c1 0620 	rsb	r6, r1, #32
 8000a10:	408b      	lsls	r3, r1
 8000a12:	fa22 f706 	lsr.w	r7, r2, r6
 8000a16:	431f      	orrs	r7, r3
 8000a18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a20:	ea43 030c 	orr.w	r3, r3, ip
 8000a24:	40f4      	lsrs	r4, r6
 8000a26:	fa00 f801 	lsl.w	r8, r0, r1
 8000a2a:	0c38      	lsrs	r0, r7, #16
 8000a2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a30:	fbb4 fef0 	udiv	lr, r4, r0
 8000a34:	fa1f fc87 	uxth.w	ip, r7
 8000a38:	fb00 441e 	mls	r4, r0, lr, r4
 8000a3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a40:	fb0e f90c 	mul.w	r9, lr, ip
 8000a44:	45a1      	cmp	r9, r4
 8000a46:	fa02 f201 	lsl.w	r2, r2, r1
 8000a4a:	d90a      	bls.n	8000a62 <__udivmoddi4+0x1a6>
 8000a4c:	193c      	adds	r4, r7, r4
 8000a4e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000a52:	f080 8084 	bcs.w	8000b5e <__udivmoddi4+0x2a2>
 8000a56:	45a1      	cmp	r9, r4
 8000a58:	f240 8081 	bls.w	8000b5e <__udivmoddi4+0x2a2>
 8000a5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a60:	443c      	add	r4, r7
 8000a62:	eba4 0409 	sub.w	r4, r4, r9
 8000a66:	fa1f f983 	uxth.w	r9, r3
 8000a6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a7a:	45a4      	cmp	ip, r4
 8000a7c:	d907      	bls.n	8000a8e <__udivmoddi4+0x1d2>
 8000a7e:	193c      	adds	r4, r7, r4
 8000a80:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000a84:	d267      	bcs.n	8000b56 <__udivmoddi4+0x29a>
 8000a86:	45a4      	cmp	ip, r4
 8000a88:	d965      	bls.n	8000b56 <__udivmoddi4+0x29a>
 8000a8a:	3b02      	subs	r3, #2
 8000a8c:	443c      	add	r4, r7
 8000a8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a92:	fba0 9302 	umull	r9, r3, r0, r2
 8000a96:	eba4 040c 	sub.w	r4, r4, ip
 8000a9a:	429c      	cmp	r4, r3
 8000a9c:	46ce      	mov	lr, r9
 8000a9e:	469c      	mov	ip, r3
 8000aa0:	d351      	bcc.n	8000b46 <__udivmoddi4+0x28a>
 8000aa2:	d04e      	beq.n	8000b42 <__udivmoddi4+0x286>
 8000aa4:	b155      	cbz	r5, 8000abc <__udivmoddi4+0x200>
 8000aa6:	ebb8 030e 	subs.w	r3, r8, lr
 8000aaa:	eb64 040c 	sbc.w	r4, r4, ip
 8000aae:	fa04 f606 	lsl.w	r6, r4, r6
 8000ab2:	40cb      	lsrs	r3, r1
 8000ab4:	431e      	orrs	r6, r3
 8000ab6:	40cc      	lsrs	r4, r1
 8000ab8:	e9c5 6400 	strd	r6, r4, [r5]
 8000abc:	2100      	movs	r1, #0
 8000abe:	e750      	b.n	8000962 <__udivmoddi4+0xa6>
 8000ac0:	f1c2 0320 	rsb	r3, r2, #32
 8000ac4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ac8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000acc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ad0:	4094      	lsls	r4, r2
 8000ad2:	430c      	orrs	r4, r1
 8000ad4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000adc:	fa1f f78c 	uxth.w	r7, ip
 8000ae0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ae4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ae8:	0c23      	lsrs	r3, r4, #16
 8000aea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aee:	fb00 f107 	mul.w	r1, r0, r7
 8000af2:	4299      	cmp	r1, r3
 8000af4:	d908      	bls.n	8000b08 <__udivmoddi4+0x24c>
 8000af6:	eb1c 0303 	adds.w	r3, ip, r3
 8000afa:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000afe:	d22c      	bcs.n	8000b5a <__udivmoddi4+0x29e>
 8000b00:	4299      	cmp	r1, r3
 8000b02:	d92a      	bls.n	8000b5a <__udivmoddi4+0x29e>
 8000b04:	3802      	subs	r0, #2
 8000b06:	4463      	add	r3, ip
 8000b08:	1a5b      	subs	r3, r3, r1
 8000b0a:	b2a4      	uxth	r4, r4
 8000b0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b10:	fb08 3311 	mls	r3, r8, r1, r3
 8000b14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b18:	fb01 f307 	mul.w	r3, r1, r7
 8000b1c:	42a3      	cmp	r3, r4
 8000b1e:	d908      	bls.n	8000b32 <__udivmoddi4+0x276>
 8000b20:	eb1c 0404 	adds.w	r4, ip, r4
 8000b24:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000b28:	d213      	bcs.n	8000b52 <__udivmoddi4+0x296>
 8000b2a:	42a3      	cmp	r3, r4
 8000b2c:	d911      	bls.n	8000b52 <__udivmoddi4+0x296>
 8000b2e:	3902      	subs	r1, #2
 8000b30:	4464      	add	r4, ip
 8000b32:	1ae4      	subs	r4, r4, r3
 8000b34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b38:	e739      	b.n	80009ae <__udivmoddi4+0xf2>
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	e6f0      	b.n	8000920 <__udivmoddi4+0x64>
 8000b3e:	4608      	mov	r0, r1
 8000b40:	e706      	b.n	8000950 <__udivmoddi4+0x94>
 8000b42:	45c8      	cmp	r8, r9
 8000b44:	d2ae      	bcs.n	8000aa4 <__udivmoddi4+0x1e8>
 8000b46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b4e:	3801      	subs	r0, #1
 8000b50:	e7a8      	b.n	8000aa4 <__udivmoddi4+0x1e8>
 8000b52:	4631      	mov	r1, r6
 8000b54:	e7ed      	b.n	8000b32 <__udivmoddi4+0x276>
 8000b56:	4603      	mov	r3, r0
 8000b58:	e799      	b.n	8000a8e <__udivmoddi4+0x1d2>
 8000b5a:	4630      	mov	r0, r6
 8000b5c:	e7d4      	b.n	8000b08 <__udivmoddi4+0x24c>
 8000b5e:	46d6      	mov	lr, sl
 8000b60:	e77f      	b.n	8000a62 <__udivmoddi4+0x1a6>
 8000b62:	4463      	add	r3, ip
 8000b64:	3802      	subs	r0, #2
 8000b66:	e74d      	b.n	8000a04 <__udivmoddi4+0x148>
 8000b68:	4606      	mov	r6, r0
 8000b6a:	4623      	mov	r3, r4
 8000b6c:	4608      	mov	r0, r1
 8000b6e:	e70f      	b.n	8000990 <__udivmoddi4+0xd4>
 8000b70:	3e02      	subs	r6, #2
 8000b72:	4463      	add	r3, ip
 8000b74:	e730      	b.n	80009d8 <__udivmoddi4+0x11c>
 8000b76:	bf00      	nop

08000b78 <__aeabi_idiv0>:
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <GSM_Send_AT_Command>:

#include "main.h"
#include "GSM.h"
#include <string.h>
extern UART_HandleTypeDef huart2;
void GSM_Send_AT_Command(char *cmd, uint16_t delay) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	807b      	strh	r3, [r7, #2]
    HAL_UART_Transmit(&huart2, (uint8_t *)cmd, strlen(cmd), 1000);
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff fb21 	bl	80001d0 <strlen>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b96:	6879      	ldr	r1, [r7, #4]
 8000b98:	4805      	ldr	r0, [pc, #20]	@ (8000bb0 <GSM_Send_AT_Command+0x34>)
 8000b9a:	f004 fa7d 	bl	8005098 <HAL_UART_Transmit>
    HAL_Delay(delay);
 8000b9e:	887b      	ldrh	r3, [r7, #2]
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f001 f857 	bl	8001c54 <HAL_Delay>
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	200001c8 	.word	0x200001c8

08000bb4 <GSM_Send_SMS>:

void GSM_Send_SMS(char *phone_number, char *message) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b090      	sub	sp, #64	@ 0x40
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
    GSM_Send_AT_Command("AT\r\n", 1000);  // Check GSM response
 8000bbe:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000bc2:	4814      	ldr	r0, [pc, #80]	@ (8000c14 <GSM_Send_SMS+0x60>)
 8000bc4:	f7ff ffda 	bl	8000b7c <GSM_Send_AT_Command>
    GSM_Send_AT_Command("AT+CMGF=1\r\n", 1000);  // Set SMS mode to text
 8000bc8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000bcc:	4812      	ldr	r0, [pc, #72]	@ (8000c18 <GSM_Send_SMS+0x64>)
 8000bce:	f7ff ffd5 	bl	8000b7c <GSM_Send_AT_Command>
    HAL_Delay(1000);
 8000bd2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bd6:	f001 f83d 	bl	8001c54 <HAL_Delay>

    char sms_command[50];
    sprintf(sms_command, "AT+CMGS=\"%s\"\r\n", phone_number);
 8000bda:	f107 030c 	add.w	r3, r7, #12
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	490e      	ldr	r1, [pc, #56]	@ (8000c1c <GSM_Send_SMS+0x68>)
 8000be2:	4618      	mov	r0, r3
 8000be4:	f004 feaa 	bl	800593c <siprintf>
    GSM_Send_AT_Command(sms_command, 1000);
 8000be8:	f107 030c 	add.w	r3, r7, #12
 8000bec:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ffc3 	bl	8000b7c <GSM_Send_AT_Command>

    GSM_Send_AT_Command(message, 1000);
 8000bf6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000bfa:	6838      	ldr	r0, [r7, #0]
 8000bfc:	f7ff ffbe 	bl	8000b7c <GSM_Send_AT_Command>
    GSM_Send_AT_Command("\x1A", 1000); // End message with Ctrl+Z (ASCII 26)
 8000c00:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000c04:	4806      	ldr	r0, [pc, #24]	@ (8000c20 <GSM_Send_SMS+0x6c>)
 8000c06:	f7ff ffb9 	bl	8000b7c <GSM_Send_AT_Command>
}
 8000c0a:	bf00      	nop
 8000c0c:	3740      	adds	r7, #64	@ 0x40
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	080062c4 	.word	0x080062c4
 8000c18:	080062cc 	.word	0x080062cc
 8000c1c:	080062d8 	.word	0x080062d8
 8000c20:	080062e8 	.word	0x080062e8

08000c24 <Magneto_init>:
extern uint8_t config_A[2] = {0x00, 0x70}; // Config Register A: 15Hz, Normal Mode, 8 samples
extern uint8_t config_B[2] = {0x01, 0x20}; // Config Register B: Gain = 1090 LSb/Gauss
extern int8_t mag_x, mag_y, mag_z;
extern char uart_buffer[100]; // Buffer to store formatted string

void Magneto_init(void){
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af02      	add	r7, sp, #8
	 HAL_StatusTypeDef ret;
	   ret = HAL_I2C_IsDeviceReady(&hi2c1, (0x1E<<1), 3, HAL_MAX_DELAY);
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c2e:	2203      	movs	r2, #3
 8000c30:	213c      	movs	r1, #60	@ 0x3c
 8000c32:	4823      	ldr	r0, [pc, #140]	@ (8000cc0 <Magneto_init+0x9c>)
 8000c34:	f001 ff86 	bl	8002b44 <HAL_I2C_IsDeviceReady>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	71fb      	strb	r3, [r7, #7]
	   if(ret == HAL_OK)
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d106      	bne.n	8000c50 <Magneto_init+0x2c>
	 	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000c42:	2201      	movs	r2, #1
 8000c44:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c48:	481e      	ldr	r0, [pc, #120]	@ (8000cc4 <Magneto_init+0xa0>)
 8000c4a:	f001 faed 	bl	8002228 <HAL_GPIO_WritePin>
 8000c4e:	e005      	b.n	8000c5c <Magneto_init+0x38>
	   else
	 	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000c50:	2201      	movs	r2, #1
 8000c52:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c56:	481b      	ldr	r0, [pc, #108]	@ (8000cc4 <Magneto_init+0xa0>)
 8000c58:	f001 fae6 	bl	8002228 <HAL_GPIO_WritePin>

	   HAL_I2C_Master_Transmit(&hi2c1, (0x1E << 1), mode_reg, 2, HAL_MAX_DELAY);
 8000c5c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c60:	9300      	str	r3, [sp, #0]
 8000c62:	2302      	movs	r3, #2
 8000c64:	4a18      	ldr	r2, [pc, #96]	@ (8000cc8 <Magneto_init+0xa4>)
 8000c66:	213c      	movs	r1, #60	@ 0x3c
 8000c68:	4815      	ldr	r0, [pc, #84]	@ (8000cc0 <Magneto_init+0x9c>)
 8000c6a:	f001 fc3b 	bl	80024e4 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Transmit(&hi2c1, (0x1E << 1), config_A, 2, HAL_MAX_DELAY);
 8000c6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	2302      	movs	r3, #2
 8000c76:	4a15      	ldr	r2, [pc, #84]	@ (8000ccc <Magneto_init+0xa8>)
 8000c78:	213c      	movs	r1, #60	@ 0x3c
 8000c7a:	4811      	ldr	r0, [pc, #68]	@ (8000cc0 <Magneto_init+0x9c>)
 8000c7c:	f001 fc32 	bl	80024e4 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Transmit(&hi2c1, (0x1E << 1), config_B, 2, HAL_MAX_DELAY);
 8000c80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c84:	9300      	str	r3, [sp, #0]
 8000c86:	2302      	movs	r3, #2
 8000c88:	4a11      	ldr	r2, [pc, #68]	@ (8000cd0 <Magneto_init+0xac>)
 8000c8a:	213c      	movs	r1, #60	@ 0x3c
 8000c8c:	480c      	ldr	r0, [pc, #48]	@ (8000cc0 <Magneto_init+0x9c>)
 8000c8e:	f001 fc29 	bl	80024e4 <HAL_I2C_Master_Transmit>

	   HAL_I2C_Master_Transmit(&hi2c1, (0x1E << 1), &reg_addr, 1, HAL_MAX_DELAY);
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	2301      	movs	r3, #1
 8000c9a:	4a0e      	ldr	r2, [pc, #56]	@ (8000cd4 <Magneto_init+0xb0>)
 8000c9c:	213c      	movs	r1, #60	@ 0x3c
 8000c9e:	4808      	ldr	r0, [pc, #32]	@ (8000cc0 <Magneto_init+0x9c>)
 8000ca0:	f001 fc20 	bl	80024e4 <HAL_I2C_Master_Transmit>
	   HAL_I2C_Master_Receive(&hi2c1, (0x1E << 1), &mode_value, 1, HAL_MAX_DELAY);
 8000ca4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ca8:	9300      	str	r3, [sp, #0]
 8000caa:	2301      	movs	r3, #1
 8000cac:	4a0a      	ldr	r2, [pc, #40]	@ (8000cd8 <Magneto_init+0xb4>)
 8000cae:	213c      	movs	r1, #60	@ 0x3c
 8000cb0:	4803      	ldr	r0, [pc, #12]	@ (8000cc0 <Magneto_init+0x9c>)
 8000cb2:	f001 fd15 	bl	80026e0 <HAL_I2C_Master_Receive>
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	2000009c 	.word	0x2000009c
 8000cc4:	40020c00 	.word	0x40020c00
 8000cc8:	20000004 	.word	0x20000004
 8000ccc:	20000008 	.word	0x20000008
 8000cd0:	2000000c 	.word	0x2000000c
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	20000088 	.word	0x20000088

08000cdc <HMC5883L_ReadData>:

void HMC5883L_ReadData(int16_t *mag_x, int16_t *mag_y, int16_t *mag_z) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af02      	add	r7, sp, #8
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
    uint8_t data_reg = 0x03;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	75fb      	strb	r3, [r7, #23]
    uint8_t raw_data[6];

    HAL_I2C_Master_Transmit(&hi2c1, (0x1E << 1), &data_reg, 1, HAL_MAX_DELAY);
 8000cec:	f107 0217 	add.w	r2, r7, #23
 8000cf0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cf4:	9300      	str	r3, [sp, #0]
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	213c      	movs	r1, #60	@ 0x3c
 8000cfa:	481e      	ldr	r0, [pc, #120]	@ (8000d74 <HMC5883L_ReadData+0x98>)
 8000cfc:	f001 fbf2 	bl	80024e4 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(&hi2c1, (0x1E << 1), raw_data, 6, HAL_MAX_DELAY);
 8000d00:	f107 0210 	add.w	r2, r7, #16
 8000d04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d08:	9300      	str	r3, [sp, #0]
 8000d0a:	2306      	movs	r3, #6
 8000d0c:	213c      	movs	r1, #60	@ 0x3c
 8000d0e:	4819      	ldr	r0, [pc, #100]	@ (8000d74 <HMC5883L_ReadData+0x98>)
 8000d10:	f001 fce6 	bl	80026e0 <HAL_I2C_Master_Receive>

    *mag_x = (int16_t)(raw_data[0] << 8 | raw_data[1]);
 8000d14:	7c3b      	ldrb	r3, [r7, #16]
 8000d16:	021b      	lsls	r3, r3, #8
 8000d18:	b21a      	sxth	r2, r3
 8000d1a:	7c7b      	ldrb	r3, [r7, #17]
 8000d1c:	b21b      	sxth	r3, r3
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	b21a      	sxth	r2, r3
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	801a      	strh	r2, [r3, #0]
    *mag_z = (int16_t)(raw_data[2] << 8 | raw_data[3]);
 8000d26:	7cbb      	ldrb	r3, [r7, #18]
 8000d28:	021b      	lsls	r3, r3, #8
 8000d2a:	b21a      	sxth	r2, r3
 8000d2c:	7cfb      	ldrb	r3, [r7, #19]
 8000d2e:	b21b      	sxth	r3, r3
 8000d30:	4313      	orrs	r3, r2
 8000d32:	b21a      	sxth	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	801a      	strh	r2, [r3, #0]
    *mag_y = (int16_t)(raw_data[4] << 8 | raw_data[5]);
 8000d38:	7d3b      	ldrb	r3, [r7, #20]
 8000d3a:	021b      	lsls	r3, r3, #8
 8000d3c:	b21a      	sxth	r2, r3
 8000d3e:	7d7b      	ldrb	r3, [r7, #21]
 8000d40:	b21b      	sxth	r3, r3
 8000d42:	4313      	orrs	r3, r2
 8000d44:	b21a      	sxth	r2, r3
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	801a      	strh	r2, [r3, #0]
    // Format the output string
       sprintf(uart_buffer, "X: %d, Y: %d, Z: %d\r\n", *mag_x, *mag_y, *mag_z);
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d50:	461a      	mov	r2, r3
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	460b      	mov	r3, r1
 8000d64:	4904      	ldr	r1, [pc, #16]	@ (8000d78 <HMC5883L_ReadData+0x9c>)
 8000d66:	4805      	ldr	r0, [pc, #20]	@ (8000d7c <HMC5883L_ReadData+0xa0>)
 8000d68:	f004 fde8 	bl	800593c <siprintf>


}
 8000d6c:	bf00      	nop
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	2000009c 	.word	0x2000009c
 8000d78:	080062ec 	.word	0x080062ec
 8000d7c:	200002a8 	.word	0x200002a8

08000d80 <set_motor_direction>:
#define MOTOR2   2
#define FORWARD  1   // IN1 =1; IN2 = 0;
#define BACKWARD  0

void set_motor_direction(uint8_t motor, uint8_t direction)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	460a      	mov	r2, r1
 8000d8a:	71fb      	strb	r3, [r7, #7]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	71bb      	strb	r3, [r7, #6]

	  if(motor != MOTOR1 && motor != MOTOR2){
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d002      	beq.n	8000d9c <set_motor_direction+0x1c>
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	2b02      	cmp	r3, #2
 8000d9a:	d144      	bne.n	8000e26 <set_motor_direction+0xa6>
		  // invalid motor not a define
		  return;
	  }

	  if(direction != FORWARD && direction != BACKWARD){
 8000d9c:	79bb      	ldrb	r3, [r7, #6]
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d002      	beq.n	8000da8 <set_motor_direction+0x28>
 8000da2:	79bb      	ldrb	r3, [r7, #6]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d140      	bne.n	8000e2a <set_motor_direction+0xaa>
	 		  // invalid direction not a define in my code
	 		  return;
	 	  }
	  // normally define which motor are run
	  uint8_t motor_pin1,motor_pin2;
	  if(motor==MOTOR1){
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d104      	bne.n	8000db8 <set_motor_direction+0x38>
		  motor_pin1 = IN1_PIN;
 8000dae:	2301      	movs	r3, #1
 8000db0:	73fb      	strb	r3, [r7, #15]
		  motor_pin2 = IN2_PIN;
 8000db2:	2302      	movs	r3, #2
 8000db4:	73bb      	strb	r3, [r7, #14]
 8000db6:	e003      	b.n	8000dc0 <set_motor_direction+0x40>
	  }
	  else{
		  motor_pin1 = IN3_PIN;
 8000db8:	2304      	movs	r3, #4
 8000dba:	73fb      	strb	r3, [r7, #15]
		  motor_pin2 = IN4_PIN;
 8000dbc:	2308      	movs	r3, #8
 8000dbe:	73bb      	strb	r3, [r7, #14]
	  }

  	  if(direction == FORWARD)
 8000dc0:	79bb      	ldrb	r3, [r7, #6]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d10e      	bne.n	8000de4 <set_motor_direction+0x64>
  	  {
  		  HAL_GPIO_WritePin(GPIOC, motor_pin1,SET);
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	2201      	movs	r2, #1
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4819      	ldr	r0, [pc, #100]	@ (8000e34 <set_motor_direction+0xb4>)
 8000dd0:	f001 fa2a 	bl	8002228 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOC, motor_pin2, RESET);
 8000dd4:	7bbb      	ldrb	r3, [r7, #14]
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	2200      	movs	r2, #0
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4815      	ldr	r0, [pc, #84]	@ (8000e34 <set_motor_direction+0xb4>)
 8000dde:	f001 fa23 	bl	8002228 <HAL_GPIO_WritePin>
 8000de2:	e023      	b.n	8000e2c <set_motor_direction+0xac>

  	  }
  	  else if(direction == BACKWARD){
 8000de4:	79bb      	ldrb	r3, [r7, #6]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d10e      	bne.n	8000e08 <set_motor_direction+0x88>

  		  HAL_GPIO_WritePin(GPIOC, motor_pin1, RESET);
 8000dea:	7bfb      	ldrb	r3, [r7, #15]
 8000dec:	b29b      	uxth	r3, r3
 8000dee:	2200      	movs	r2, #0
 8000df0:	4619      	mov	r1, r3
 8000df2:	4810      	ldr	r0, [pc, #64]	@ (8000e34 <set_motor_direction+0xb4>)
 8000df4:	f001 fa18 	bl	8002228 <HAL_GPIO_WritePin>
  		  HAL_GPIO_WritePin(GPIOC, motor_pin2, SET);
 8000df8:	7bbb      	ldrb	r3, [r7, #14]
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	4619      	mov	r1, r3
 8000e00:	480c      	ldr	r0, [pc, #48]	@ (8000e34 <set_motor_direction+0xb4>)
 8000e02:	f001 fa11 	bl	8002228 <HAL_GPIO_WritePin>
 8000e06:	e011      	b.n	8000e2c <set_motor_direction+0xac>

  	  }
  	  else{ // stop
  		HAL_GPIO_WritePin(GPIOC, motor_pin1, RESET);
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4808      	ldr	r0, [pc, #32]	@ (8000e34 <set_motor_direction+0xb4>)
 8000e12:	f001 fa09 	bl	8002228 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(GPIOC, motor_pin2, RESET);
 8000e16:	7bbb      	ldrb	r3, [r7, #14]
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4805      	ldr	r0, [pc, #20]	@ (8000e34 <set_motor_direction+0xb4>)
 8000e20:	f001 fa02 	bl	8002228 <HAL_GPIO_WritePin>
 8000e24:	e002      	b.n	8000e2c <set_motor_direction+0xac>
		  return;
 8000e26:	bf00      	nop
 8000e28:	e000      	b.n	8000e2c <set_motor_direction+0xac>
	 		  return;
 8000e2a:	bf00      	nop
  	  }

 }
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40020800 	.word	0x40020800

08000e38 <set_motor_speed>:

void set_motor_speed(uint8_t motor, uint8_t speed)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	460a      	mov	r2, r1
 8000e42:	71fb      	strb	r3, [r7, #7]
 8000e44:	4613      	mov	r3, r2
 8000e46:	71bb      	strb	r3, [r7, #6]
	if(motor != MOTOR1 && motor != MOTOR2){
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d002      	beq.n	8000e54 <set_motor_speed+0x1c>
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	d112      	bne.n	8000e7a <set_motor_speed+0x42>
			  // invalid motor not a define
			  return;
		  }

   	uint32_t clock = (speed*1000)/100; // it is timer clock and change to percentage
 8000e54:	79ba      	ldrb	r2, [r7, #6]
 8000e56:	4613      	mov	r3, r2
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	4413      	add	r3, r2
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	60fb      	str	r3, [r7, #12]
   	if(motor == MOTOR1)
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d104      	bne.n	8000e70 <set_motor_speed+0x38>
   	  {
           __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_4,clock);  // first we use channel1 but pa6 and pa5 pin are use in another place
 8000e66:	4b08      	ldr	r3, [pc, #32]	@ (8000e88 <set_motor_speed+0x50>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	68fa      	ldr	r2, [r7, #12]
 8000e6c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e6e:	e005      	b.n	8000e7c <set_motor_speed+0x44>
   	  }
   	else   // MOTOR2
   	{
   		  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,clock);
 8000e70:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <set_motor_speed+0x54>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	68fa      	ldr	r2, [r7, #12]
 8000e76:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e78:	e000      	b.n	8000e7c <set_motor_speed+0x44>
			  return;
 8000e7a:	bf00      	nop
   	  }

}
 8000e7c:	3714      	adds	r7, #20
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	200000f0 	.word	0x200000f0
 8000e8c:	20000138 	.word	0x20000138

08000e90 <Ultrasonic_distance>:
extern uint32_t InputCaptureValue_1 = 0;
extern uint32_t InputCaptureValue_2 = 0;
extern uint32_t InputCaptureDifference = 0;

void Ultrasonic_distance(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
	//Send Trigger Signal to ultrasonic trigger pin
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, GPIO_PIN_SET);
 8000e94:	2201      	movs	r2, #1
 8000e96:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e9a:	480b      	ldr	r0, [pc, #44]	@ (8000ec8 <Ultrasonic_distance+0x38>)
 8000e9c:	f001 f9c4 	bl	8002228 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000ea0:	200a      	movs	r0, #10
 8000ea2:	f000 fed7 	bl	8001c54 <HAL_Delay>
	HAL_GPIO_WritePin(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000eac:	4806      	ldr	r0, [pc, #24]	@ (8000ec8 <Ultrasonic_distance+0x38>)
 8000eae:	f001 f9bb 	bl	8002228 <HAL_GPIO_WritePin>
	//Enable Timer counter
	__HAL_TIM_ENABLE_IT(ULTRASONIC_ECHO_PIN_IC, TIM_IT_CC1);
 8000eb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <Ultrasonic_distance+0x3c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	68da      	ldr	r2, [r3, #12]
 8000eb8:	4b04      	ldr	r3, [pc, #16]	@ (8000ecc <Ultrasonic_distance+0x3c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f042 0202 	orr.w	r2, r2, #2
 8000ec0:	60da      	str	r2, [r3, #12]
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40020c00 	.word	0x40020c00
 8000ecc:	20000180 	.word	0x20000180

08000ed0 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	//Capture Rising Edge
	if(isRisingCaptured == 0)
 8000ed8:	4b41      	ldr	r3, [pc, #260]	@ (8000fe0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d11a      	bne.n	8000f16 <HAL_TIM_IC_CaptureCallback+0x46>
	{
		InputCaptureValue_1 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4840      	ldr	r0, [pc, #256]	@ (8000fe4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000ee4:	f003 fb8e 	bl	8004604 <HAL_TIM_ReadCapturedValue>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	4a3f      	ldr	r2, [pc, #252]	@ (8000fe8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000eec:	6013      	str	r3, [r2, #0]
		isRisingCaptured = 1;
 8000eee:	4b3c      	ldr	r3, [pc, #240]	@ (8000fe0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000ef4:	4b3b      	ldr	r3, [pc, #236]	@ (8000fe4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	6a1a      	ldr	r2, [r3, #32]
 8000efa:	4b3a      	ldr	r3, [pc, #232]	@ (8000fe4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f022 020a 	bic.w	r2, r2, #10
 8000f02:	621a      	str	r2, [r3, #32]
 8000f04:	4b37      	ldr	r3, [pc, #220]	@ (8000fe4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	6a1a      	ldr	r2, [r3, #32]
 8000f0a:	4b36      	ldr	r3, [pc, #216]	@ (8000fe4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f042 0202 	orr.w	r2, r2, #2
 8000f12:	621a      	str	r2, [r3, #32]
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
		__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);

	}

}
 8000f14:	e05c      	b.n	8000fd0 <HAL_TIM_IC_CaptureCallback+0x100>
	else if(isRisingCaptured == 1)
 8000f16:	4b32      	ldr	r3, [pc, #200]	@ (8000fe0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d158      	bne.n	8000fd0 <HAL_TIM_IC_CaptureCallback+0x100>
		InputCaptureValue_2 = HAL_TIM_ReadCapturedValue(&htim4, TIM_CHANNEL_1);
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4830      	ldr	r0, [pc, #192]	@ (8000fe4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000f22:	f003 fb6f 	bl	8004604 <HAL_TIM_ReadCapturedValue>
 8000f26:	4603      	mov	r3, r0
 8000f28:	4a30      	ldr	r2, [pc, #192]	@ (8000fec <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000f2a:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000f2c:	4b2d      	ldr	r3, [pc, #180]	@ (8000fe4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2200      	movs	r2, #0
 8000f32:	625a      	str	r2, [r3, #36]	@ 0x24
		if(InputCaptureValue_2 > InputCaptureValue_1)
 8000f34:	4b2d      	ldr	r3, [pc, #180]	@ (8000fec <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b2b      	ldr	r3, [pc, #172]	@ (8000fe8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d907      	bls.n	8000f50 <HAL_TIM_IC_CaptureCallback+0x80>
			InputCaptureDifference = InputCaptureValue_2 - InputCaptureValue_1;
 8000f40:	4b2a      	ldr	r3, [pc, #168]	@ (8000fec <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b28      	ldr	r3, [pc, #160]	@ (8000fe8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	4a29      	ldr	r2, [pc, #164]	@ (8000ff0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000f4c:	6013      	str	r3, [r2, #0]
 8000f4e:	e00f      	b.n	8000f70 <HAL_TIM_IC_CaptureCallback+0xa0>
		else if(InputCaptureValue_1 > InputCaptureValue_2)
 8000f50:	4b25      	ldr	r3, [pc, #148]	@ (8000fe8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	4b25      	ldr	r3, [pc, #148]	@ (8000fec <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d909      	bls.n	8000f70 <HAL_TIM_IC_CaptureCallback+0xa0>
			InputCaptureDifference = (0xFFFF - InputCaptureValue_1) + InputCaptureValue_2;
 8000f5c:	4b23      	ldr	r3, [pc, #140]	@ (8000fec <HAL_TIM_IC_CaptureCallback+0x11c>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b21      	ldr	r3, [pc, #132]	@ (8000fe8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000f6a:	33ff      	adds	r3, #255	@ 0xff
 8000f6c:	4a20      	ldr	r2, [pc, #128]	@ (8000ff0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000f6e:	6013      	str	r3, [r2, #0]
		distance = InputCaptureDifference * 0.0173;
 8000f70:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fbef 	bl	8000758 <__aeabi_ui2d>
 8000f7a:	a317      	add	r3, pc, #92	@ (adr r3, 8000fd8 <HAL_TIM_IC_CaptureCallback+0x108>)
 8000f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f80:	f7ff f97e 	bl	8000280 <__aeabi_dmul>
 8000f84:	4602      	mov	r2, r0
 8000f86:	460b      	mov	r3, r1
 8000f88:	4610      	mov	r0, r2
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f7ff fc5e 	bl	800084c <__aeabi_d2uiz>
 8000f90:	4603      	mov	r3, r0
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	4b17      	ldr	r3, [pc, #92]	@ (8000ff4 <HAL_TIM_IC_CaptureCallback+0x124>)
 8000f96:	801a      	strh	r2, [r3, #0]
		isReadingFinished = 1;
 8000f98:	4b17      	ldr	r3, [pc, #92]	@ (8000ff8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	701a      	strb	r2, [r3, #0]
		isRisingCaptured = 0;
 8000f9e:	4b10      	ldr	r3, [pc, #64]	@ (8000fe0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim4, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	6a1a      	ldr	r2, [r3, #32]
 8000faa:	4b0e      	ldr	r3, [pc, #56]	@ (8000fe4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f022 020a 	bic.w	r2, r2, #10
 8000fb2:	621a      	str	r2, [r3, #32]
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	6a12      	ldr	r2, [r2, #32]
 8000fbe:	621a      	str	r2, [r3, #32]
		__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8000fc0:	4b08      	ldr	r3, [pc, #32]	@ (8000fe4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	68da      	ldr	r2, [r3, #12]
 8000fc6:	4b07      	ldr	r3, [pc, #28]	@ (8000fe4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f022 0202 	bic.w	r2, r2, #2
 8000fce:	60da      	str	r2, [r3, #12]
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	58e21965 	.word	0x58e21965
 8000fdc:	3f91b717 	.word	0x3f91b717
 8000fe0:	2000008d 	.word	0x2000008d
 8000fe4:	20000180 	.word	0x20000180
 8000fe8:	20000090 	.word	0x20000090
 8000fec:	20000094 	.word	0x20000094
 8000ff0:	20000098 	.word	0x20000098
 8000ff4:	2000008a 	.word	0x2000008a
 8000ff8:	2000008c 	.word	0x2000008c

08000ffc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001000:	f000 fdb6 	bl	8001b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001004:	f000 f892 	bl	800112c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001008:	f000 faac 	bl	8001564 <MX_GPIO_Init>
  MX_I2C1_Init();
 800100c:	f000 f8f8 	bl	8001200 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001010:	f000 fa54 	bl	80014bc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001014:	f000 fa7c 	bl	8001510 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 8001018:	f000 f9fc 	bl	8001414 <MX_TIM4_Init>
  MX_TIM1_Init();
 800101c:	f000 f91e 	bl	800125c <MX_TIM1_Init>
  MX_TIM3_Init();
 8001020:	f000 f99e 	bl	8001360 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  Magneto_init();
 8001024:	f7ff fdfe 	bl	8000c24 <Magneto_init>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8001028:	2100      	movs	r1, #0
 800102a:	4834      	ldr	r0, [pc, #208]	@ (80010fc <main+0x100>)
 800102c:	f002 ff74 	bl	8003f18 <HAL_TIM_IC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 ANS = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);
 8001030:	2102      	movs	r1, #2
 8001032:	4833      	ldr	r0, [pc, #204]	@ (8001100 <main+0x104>)
 8001034:	f001 f8e0 	bl	80021f8 <HAL_GPIO_ReadPin>
 8001038:	4603      	mov	r3, r0
 800103a:	461a      	mov	r2, r3
 800103c:	4b31      	ldr	r3, [pc, #196]	@ (8001104 <main+0x108>)
 800103e:	601a      	str	r2, [r3, #0]
	 if (ANS){
 8001040:	4b30      	ldr	r3, [pc, #192]	@ (8001104 <main+0x108>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d03c      	beq.n	80010c2 <main+0xc6>
		 set_motor_direction(MOTOR1, FORWARD);
 8001048:	2101      	movs	r1, #1
 800104a:	2001      	movs	r0, #1
 800104c:	f7ff fe98 	bl	8000d80 <set_motor_direction>
		 set_motor_speed(MOTOR1, 100);
 8001050:	2164      	movs	r1, #100	@ 0x64
 8001052:	2001      	movs	r0, #1
 8001054:	f7ff fef0 	bl	8000e38 <set_motor_speed>
		  HAL_Delay(1000);
 8001058:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800105c:	f000 fdfa 	bl	8001c54 <HAL_Delay>

		 	  	// motor 2 in  forward
		set_motor_direction(MOTOR2, FORWARD);
 8001060:	2101      	movs	r1, #1
 8001062:	2002      	movs	r0, #2
 8001064:	f7ff fe8c 	bl	8000d80 <set_motor_direction>
		set_motor_speed(MOTOR2, 100);
 8001068:	2164      	movs	r1, #100	@ 0x64
 800106a:	2002      	movs	r0, #2
 800106c:	f7ff fee4 	bl	8000e38 <set_motor_speed>
		HAL_Delay(1000);
 8001070:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001074:	f000 fdee 	bl	8001c54 <HAL_Delay>

		 Ultrasonic_distance();
 8001078:	f7ff ff0a 	bl	8000e90 <Ultrasonic_distance>
		 HMC5883L_ReadData(&mag_x, &mag_y, &mag_z);
 800107c:	4a22      	ldr	r2, [pc, #136]	@ (8001108 <main+0x10c>)
 800107e:	4923      	ldr	r1, [pc, #140]	@ (800110c <main+0x110>)
 8001080:	4823      	ldr	r0, [pc, #140]	@ (8001110 <main+0x114>)
 8001082:	f7ff fe2b 	bl	8000cdc <HMC5883L_ReadData>
		 HAL_UART_Receive(&huart3, uart_rx_buffer, sizeof(uart_rx_buffer), HAL_MAX_DELAY);
 8001086:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800108a:	2214      	movs	r2, #20
 800108c:	4921      	ldr	r1, [pc, #132]	@ (8001114 <main+0x118>)
 800108e:	4822      	ldr	r0, [pc, #136]	@ (8001118 <main+0x11c>)
 8001090:	f004 f88d 	bl	80051ae <HAL_UART_Receive>
		 HAL_Delay(3000);
 8001094:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001098:	f000 fddc 	bl	8001c54 <HAL_Delay>
		 strcpy(result, uart_rx_buffer);
 800109c:	491d      	ldr	r1, [pc, #116]	@ (8001114 <main+0x118>)
 800109e:	481f      	ldr	r0, [pc, #124]	@ (800111c <main+0x120>)
 80010a0:	f004 fcb0 	bl	8005a04 <strcpy>
	     strcat(result, uart_buffer);
 80010a4:	491e      	ldr	r1, [pc, #120]	@ (8001120 <main+0x124>)
 80010a6:	481d      	ldr	r0, [pc, #116]	@ (800111c <main+0x120>)
 80010a8:	f004 fc70 	bl	800598c <strcat>
		 strcat(result, distance);
 80010ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001124 <main+0x128>)
 80010ae:	881b      	ldrh	r3, [r3, #0]
 80010b0:	4619      	mov	r1, r3
 80010b2:	481a      	ldr	r0, [pc, #104]	@ (800111c <main+0x120>)
 80010b4:	f004 fc6a 	bl	800598c <strcat>
		 GSM_Send_SMS("+919130786366", result);
 80010b8:	4918      	ldr	r1, [pc, #96]	@ (800111c <main+0x120>)
 80010ba:	481b      	ldr	r0, [pc, #108]	@ (8001128 <main+0x12c>)
 80010bc:	f7ff fd7a 	bl	8000bb4 <GSM_Send_SMS>
 80010c0:	e7b6      	b.n	8001030 <main+0x34>
	 }
	 else if (ANS == 0){
 80010c2:	4b10      	ldr	r3, [pc, #64]	@ (8001104 <main+0x108>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d1b2      	bne.n	8001030 <main+0x34>
		  	set_motor_direction(MOTOR1, BACKWARD);
 80010ca:	2100      	movs	r1, #0
 80010cc:	2001      	movs	r0, #1
 80010ce:	f7ff fe57 	bl	8000d80 <set_motor_direction>
		  	set_motor_speed(MOTOR1, 100);
 80010d2:	2164      	movs	r1, #100	@ 0x64
 80010d4:	2001      	movs	r0, #1
 80010d6:	f7ff feaf 	bl	8000e38 <set_motor_speed>
		    HAL_Delay(1000);
 80010da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010de:	f000 fdb9 	bl	8001c54 <HAL_Delay>

		  	// motor 2 in  forward
		  	set_motor_direction(MOTOR2, BACKWARD);
 80010e2:	2100      	movs	r1, #0
 80010e4:	2002      	movs	r0, #2
 80010e6:	f7ff fe4b 	bl	8000d80 <set_motor_direction>
		  	set_motor_speed(MOTOR2, 100);
 80010ea:	2164      	movs	r1, #100	@ 0x64
 80010ec:	2002      	movs	r0, #2
 80010ee:	f7ff fea3 	bl	8000e38 <set_motor_speed>
		  	 HAL_Delay(1000);
 80010f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010f6:	f000 fdad 	bl	8001c54 <HAL_Delay>
	 ANS = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);
 80010fa:	e799      	b.n	8001030 <main+0x34>
 80010fc:	20000180 	.word	0x20000180
 8001100:	40020c00 	.word	0x40020c00
 8001104:	20000258 	.word	0x20000258
 8001108:	200002a4 	.word	0x200002a4
 800110c:	200002a3 	.word	0x200002a3
 8001110:	200002a2 	.word	0x200002a2
 8001114:	2000025c 	.word	0x2000025c
 8001118:	20000210 	.word	0x20000210
 800111c:	20000270 	.word	0x20000270
 8001120:	200002a8 	.word	0x200002a8
 8001124:	2000008a 	.word	0x2000008a
 8001128:	08006304 	.word	0x08006304

0800112c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b094      	sub	sp, #80	@ 0x50
 8001130:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001132:	f107 0320 	add.w	r3, r7, #32
 8001136:	2230      	movs	r2, #48	@ 0x30
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f004 fc1e 	bl	800597c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001140:	f107 030c 	add.w	r3, r7, #12
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001150:	2300      	movs	r3, #0
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	4b28      	ldr	r3, [pc, #160]	@ (80011f8 <SystemClock_Config+0xcc>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001158:	4a27      	ldr	r2, [pc, #156]	@ (80011f8 <SystemClock_Config+0xcc>)
 800115a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800115e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001160:	4b25      	ldr	r3, [pc, #148]	@ (80011f8 <SystemClock_Config+0xcc>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001164:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800116c:	2300      	movs	r3, #0
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	4b22      	ldr	r3, [pc, #136]	@ (80011fc <SystemClock_Config+0xd0>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a21      	ldr	r2, [pc, #132]	@ (80011fc <SystemClock_Config+0xd0>)
 8001176:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800117a:	6013      	str	r3, [r2, #0]
 800117c:	4b1f      	ldr	r3, [pc, #124]	@ (80011fc <SystemClock_Config+0xd0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001188:	2302      	movs	r3, #2
 800118a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800118c:	2301      	movs	r3, #1
 800118e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001190:	2310      	movs	r3, #16
 8001192:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001194:	2302      	movs	r3, #2
 8001196:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001198:	2300      	movs	r3, #0
 800119a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800119c:	2308      	movs	r3, #8
 800119e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80011a0:	2332      	movs	r3, #50	@ 0x32
 80011a2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011a4:	2304      	movs	r3, #4
 80011a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011a8:	2307      	movs	r3, #7
 80011aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ac:	f107 0320 	add.w	r3, r7, #32
 80011b0:	4618      	mov	r0, r3
 80011b2:	f002 f97b 	bl	80034ac <HAL_RCC_OscConfig>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011bc:	f000 fa4e 	bl	800165c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c0:	230f      	movs	r3, #15
 80011c2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c4:	2302      	movs	r3, #2
 80011c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011cc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011d6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f002 fbdc 	bl	800399c <HAL_RCC_ClockConfig>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011ea:	f000 fa37 	bl	800165c <Error_Handler>
  }
}
 80011ee:	bf00      	nop
 80011f0:	3750      	adds	r7, #80	@ 0x50
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40007000 	.word	0x40007000

08001200 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001204:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <MX_I2C1_Init+0x50>)
 8001206:	4a13      	ldr	r2, [pc, #76]	@ (8001254 <MX_I2C1_Init+0x54>)
 8001208:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800120a:	4b11      	ldr	r3, [pc, #68]	@ (8001250 <MX_I2C1_Init+0x50>)
 800120c:	4a12      	ldr	r2, [pc, #72]	@ (8001258 <MX_I2C1_Init+0x58>)
 800120e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001210:	4b0f      	ldr	r3, [pc, #60]	@ (8001250 <MX_I2C1_Init+0x50>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001216:	4b0e      	ldr	r3, [pc, #56]	@ (8001250 <MX_I2C1_Init+0x50>)
 8001218:	2200      	movs	r2, #0
 800121a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800121c:	4b0c      	ldr	r3, [pc, #48]	@ (8001250 <MX_I2C1_Init+0x50>)
 800121e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001222:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001224:	4b0a      	ldr	r3, [pc, #40]	@ (8001250 <MX_I2C1_Init+0x50>)
 8001226:	2200      	movs	r2, #0
 8001228:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800122a:	4b09      	ldr	r3, [pc, #36]	@ (8001250 <MX_I2C1_Init+0x50>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001230:	4b07      	ldr	r3, [pc, #28]	@ (8001250 <MX_I2C1_Init+0x50>)
 8001232:	2200      	movs	r2, #0
 8001234:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001236:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <MX_I2C1_Init+0x50>)
 8001238:	2200      	movs	r2, #0
 800123a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800123c:	4804      	ldr	r0, [pc, #16]	@ (8001250 <MX_I2C1_Init+0x50>)
 800123e:	f001 f80d 	bl	800225c <HAL_I2C_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001248:	f000 fa08 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	2000009c 	.word	0x2000009c
 8001254:	40005400 	.word	0x40005400
 8001258:	000186a0 	.word	0x000186a0

0800125c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b092      	sub	sp, #72	@ 0x48
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001262:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800126c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
 800127c:	615a      	str	r2, [r3, #20]
 800127e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	2220      	movs	r2, #32
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f004 fb78 	bl	800597c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800128c:	4b32      	ldr	r3, [pc, #200]	@ (8001358 <MX_TIM1_Init+0xfc>)
 800128e:	4a33      	ldr	r2, [pc, #204]	@ (800135c <MX_TIM1_Init+0x100>)
 8001290:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8001292:	4b31      	ldr	r3, [pc, #196]	@ (8001358 <MX_TIM1_Init+0xfc>)
 8001294:	2253      	movs	r2, #83	@ 0x53
 8001296:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001298:	4b2f      	ldr	r3, [pc, #188]	@ (8001358 <MX_TIM1_Init+0xfc>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800129e:	4b2e      	ldr	r3, [pc, #184]	@ (8001358 <MX_TIM1_Init+0xfc>)
 80012a0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001358 <MX_TIM1_Init+0xfc>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001358 <MX_TIM1_Init+0xfc>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b2:	4b29      	ldr	r3, [pc, #164]	@ (8001358 <MX_TIM1_Init+0xfc>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012b8:	4827      	ldr	r0, [pc, #156]	@ (8001358 <MX_TIM1_Init+0xfc>)
 80012ba:	f002 fd8f 	bl	8003ddc <HAL_TIM_PWM_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80012c4:	f000 f9ca 	bl	800165c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c8:	2300      	movs	r3, #0
 80012ca:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012d0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012d4:	4619      	mov	r1, r3
 80012d6:	4820      	ldr	r0, [pc, #128]	@ (8001358 <MX_TIM1_Init+0xfc>)
 80012d8:	f003 fdac 	bl	8004e34 <HAL_TIMEx_MasterConfigSynchronization>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80012e2:	f000 f9bb 	bl	800165c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012e6:	2360      	movs	r3, #96	@ 0x60
 80012e8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ee:	2300      	movs	r3, #0
 80012f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012f6:	2300      	movs	r3, #0
 80012f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012fa:	2300      	movs	r3, #0
 80012fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001302:	220c      	movs	r2, #12
 8001304:	4619      	mov	r1, r3
 8001306:	4814      	ldr	r0, [pc, #80]	@ (8001358 <MX_TIM1_Init+0xfc>)
 8001308:	f003 f8ba 	bl	8004480 <HAL_TIM_PWM_ConfigChannel>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8001312:	f000 f9a3 	bl	800165c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001316:	2300      	movs	r3, #0
 8001318:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800131a:	2300      	movs	r3, #0
 800131c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800132a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800132e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001330:	2300      	movs	r3, #0
 8001332:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	4619      	mov	r1, r3
 8001338:	4807      	ldr	r0, [pc, #28]	@ (8001358 <MX_TIM1_Init+0xfc>)
 800133a:	f003 fdf7 	bl	8004f2c <HAL_TIMEx_ConfigBreakDeadTime>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8001344:	f000 f98a 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001348:	4803      	ldr	r0, [pc, #12]	@ (8001358 <MX_TIM1_Init+0xfc>)
 800134a:	f000 fa85 	bl	8001858 <HAL_TIM_MspPostInit>

}
 800134e:	bf00      	nop
 8001350:	3748      	adds	r7, #72	@ 0x48
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200000f0 	.word	0x200000f0
 800135c:	40010000 	.word	0x40010000

08001360 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	@ 0x28
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001366:	f107 0320 	add.w	r3, r7, #32
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
 800137c:	611a      	str	r2, [r3, #16]
 800137e:	615a      	str	r2, [r3, #20]
 8001380:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001382:	4b22      	ldr	r3, [pc, #136]	@ (800140c <MX_TIM3_Init+0xac>)
 8001384:	4a22      	ldr	r2, [pc, #136]	@ (8001410 <MX_TIM3_Init+0xb0>)
 8001386:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001388:	4b20      	ldr	r3, [pc, #128]	@ (800140c <MX_TIM3_Init+0xac>)
 800138a:	2253      	movs	r2, #83	@ 0x53
 800138c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138e:	4b1f      	ldr	r3, [pc, #124]	@ (800140c <MX_TIM3_Init+0xac>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001394:	4b1d      	ldr	r3, [pc, #116]	@ (800140c <MX_TIM3_Init+0xac>)
 8001396:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800139a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139c:	4b1b      	ldr	r3, [pc, #108]	@ (800140c <MX_TIM3_Init+0xac>)
 800139e:	2200      	movs	r2, #0
 80013a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a2:	4b1a      	ldr	r3, [pc, #104]	@ (800140c <MX_TIM3_Init+0xac>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013a8:	4818      	ldr	r0, [pc, #96]	@ (800140c <MX_TIM3_Init+0xac>)
 80013aa:	f002 fd17 	bl	8003ddc <HAL_TIM_PWM_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80013b4:	f000 f952 	bl	800165c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b8:	2300      	movs	r3, #0
 80013ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013c0:	f107 0320 	add.w	r3, r7, #32
 80013c4:	4619      	mov	r1, r3
 80013c6:	4811      	ldr	r0, [pc, #68]	@ (800140c <MX_TIM3_Init+0xac>)
 80013c8:	f003 fd34 	bl	8004e34 <HAL_TIMEx_MasterConfigSynchronization>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80013d2:	f000 f943 	bl	800165c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013d6:	2360      	movs	r3, #96	@ 0x60
 80013d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	220c      	movs	r2, #12
 80013ea:	4619      	mov	r1, r3
 80013ec:	4807      	ldr	r0, [pc, #28]	@ (800140c <MX_TIM3_Init+0xac>)
 80013ee:	f003 f847 	bl	8004480 <HAL_TIM_PWM_ConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80013f8:	f000 f930 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013fc:	4803      	ldr	r0, [pc, #12]	@ (800140c <MX_TIM3_Init+0xac>)
 80013fe:	f000 fa2b 	bl	8001858 <HAL_TIM_MspPostInit>

}
 8001402:	bf00      	nop
 8001404:	3728      	adds	r7, #40	@ 0x28
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000138 	.word	0x20000138
 8001410:	40000400 	.word	0x40000400

08001414 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141a:	f107 0310 	add.w	r3, r7, #16
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001424:	463b      	mov	r3, r7
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001430:	4b20      	ldr	r3, [pc, #128]	@ (80014b4 <MX_TIM4_Init+0xa0>)
 8001432:	4a21      	ldr	r2, [pc, #132]	@ (80014b8 <MX_TIM4_Init+0xa4>)
 8001434:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8001436:	4b1f      	ldr	r3, [pc, #124]	@ (80014b4 <MX_TIM4_Init+0xa0>)
 8001438:	2253      	movs	r2, #83	@ 0x53
 800143a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143c:	4b1d      	ldr	r3, [pc, #116]	@ (80014b4 <MX_TIM4_Init+0xa0>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001442:	4b1c      	ldr	r3, [pc, #112]	@ (80014b4 <MX_TIM4_Init+0xa0>)
 8001444:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001448:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144a:	4b1a      	ldr	r3, [pc, #104]	@ (80014b4 <MX_TIM4_Init+0xa0>)
 800144c:	2200      	movs	r2, #0
 800144e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001450:	4b18      	ldr	r3, [pc, #96]	@ (80014b4 <MX_TIM4_Init+0xa0>)
 8001452:	2200      	movs	r2, #0
 8001454:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001456:	4817      	ldr	r0, [pc, #92]	@ (80014b4 <MX_TIM4_Init+0xa0>)
 8001458:	f002 fd0f 	bl	8003e7a <HAL_TIM_IC_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001462:	f000 f8fb 	bl	800165c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800146e:	f107 0310 	add.w	r3, r7, #16
 8001472:	4619      	mov	r1, r3
 8001474:	480f      	ldr	r0, [pc, #60]	@ (80014b4 <MX_TIM4_Init+0xa0>)
 8001476:	f003 fcdd 	bl	8004e34 <HAL_TIMEx_MasterConfigSynchronization>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001480:	f000 f8ec 	bl	800165c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001484:	2300      	movs	r3, #0
 8001486:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001488:	2301      	movs	r3, #1
 800148a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800148c:	2300      	movs	r3, #0
 800148e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001494:	463b      	mov	r3, r7
 8001496:	2200      	movs	r2, #0
 8001498:	4619      	mov	r1, r3
 800149a:	4806      	ldr	r0, [pc, #24]	@ (80014b4 <MX_TIM4_Init+0xa0>)
 800149c:	f002 ff54 	bl	8004348 <HAL_TIM_IC_ConfigChannel>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80014a6:	f000 f8d9 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000180 	.word	0x20000180
 80014b8:	40000800 	.word	0x40000800

080014bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014c0:	4b11      	ldr	r3, [pc, #68]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014c2:	4a12      	ldr	r2, [pc, #72]	@ (800150c <MX_USART2_UART_Init+0x50>)
 80014c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014c6:	4b10      	ldr	r3, [pc, #64]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014da:	4b0b      	ldr	r3, [pc, #44]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014e0:	4b09      	ldr	r3, [pc, #36]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014e2:	220c      	movs	r2, #12
 80014e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e6:	4b08      	ldr	r3, [pc, #32]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ec:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014f2:	4805      	ldr	r0, [pc, #20]	@ (8001508 <MX_USART2_UART_Init+0x4c>)
 80014f4:	f003 fd80 	bl	8004ff8 <HAL_UART_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014fe:	f000 f8ad 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200001c8 	.word	0x200001c8
 800150c:	40004400 	.word	0x40004400

08001510 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001514:	4b11      	ldr	r3, [pc, #68]	@ (800155c <MX_USART3_UART_Init+0x4c>)
 8001516:	4a12      	ldr	r2, [pc, #72]	@ (8001560 <MX_USART3_UART_Init+0x50>)
 8001518:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800151a:	4b10      	ldr	r3, [pc, #64]	@ (800155c <MX_USART3_UART_Init+0x4c>)
 800151c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001520:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001522:	4b0e      	ldr	r3, [pc, #56]	@ (800155c <MX_USART3_UART_Init+0x4c>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001528:	4b0c      	ldr	r3, [pc, #48]	@ (800155c <MX_USART3_UART_Init+0x4c>)
 800152a:	2200      	movs	r2, #0
 800152c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800152e:	4b0b      	ldr	r3, [pc, #44]	@ (800155c <MX_USART3_UART_Init+0x4c>)
 8001530:	2200      	movs	r2, #0
 8001532:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001534:	4b09      	ldr	r3, [pc, #36]	@ (800155c <MX_USART3_UART_Init+0x4c>)
 8001536:	220c      	movs	r2, #12
 8001538:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153a:	4b08      	ldr	r3, [pc, #32]	@ (800155c <MX_USART3_UART_Init+0x4c>)
 800153c:	2200      	movs	r2, #0
 800153e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001540:	4b06      	ldr	r3, [pc, #24]	@ (800155c <MX_USART3_UART_Init+0x4c>)
 8001542:	2200      	movs	r2, #0
 8001544:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001546:	4805      	ldr	r0, [pc, #20]	@ (800155c <MX_USART3_UART_Init+0x4c>)
 8001548:	f003 fd56 	bl	8004ff8 <HAL_UART_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001552:	f000 f883 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000210 	.word	0x20000210
 8001560:	40004800 	.word	0x40004800

08001564 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b08a      	sub	sp, #40	@ 0x28
 8001568:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
 8001578:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	4b34      	ldr	r3, [pc, #208]	@ (8001650 <MX_GPIO_Init+0xec>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	4a33      	ldr	r2, [pc, #204]	@ (8001650 <MX_GPIO_Init+0xec>)
 8001584:	f043 0304 	orr.w	r3, r3, #4
 8001588:	6313      	str	r3, [r2, #48]	@ 0x30
 800158a:	4b31      	ldr	r3, [pc, #196]	@ (8001650 <MX_GPIO_Init+0xec>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	f003 0304 	and.w	r3, r3, #4
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	4b2d      	ldr	r3, [pc, #180]	@ (8001650 <MX_GPIO_Init+0xec>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	4a2c      	ldr	r2, [pc, #176]	@ (8001650 <MX_GPIO_Init+0xec>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001650 <MX_GPIO_Init+0xec>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	4b26      	ldr	r3, [pc, #152]	@ (8001650 <MX_GPIO_Init+0xec>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	4a25      	ldr	r2, [pc, #148]	@ (8001650 <MX_GPIO_Init+0xec>)
 80015bc:	f043 0302 	orr.w	r3, r3, #2
 80015c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015c2:	4b23      	ldr	r3, [pc, #140]	@ (8001650 <MX_GPIO_Init+0xec>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	4b1f      	ldr	r3, [pc, #124]	@ (8001650 <MX_GPIO_Init+0xec>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001650 <MX_GPIO_Init+0xec>)
 80015d8:	f043 0310 	orr.w	r3, r3, #16
 80015dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015de:	4b1c      	ldr	r3, [pc, #112]	@ (8001650 <MX_GPIO_Init+0xec>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	f003 0310 	and.w	r3, r3, #16
 80015e6:	607b      	str	r3, [r7, #4]
 80015e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	603b      	str	r3, [r7, #0]
 80015ee:	4b18      	ldr	r3, [pc, #96]	@ (8001650 <MX_GPIO_Init+0xec>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	4a17      	ldr	r2, [pc, #92]	@ (8001650 <MX_GPIO_Init+0xec>)
 80015f4:	f043 0308 	orr.w	r3, r3, #8
 80015f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fa:	4b15      	ldr	r3, [pc, #84]	@ (8001650 <MX_GPIO_Init+0xec>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	f003 0308 	and.w	r3, r3, #8
 8001602:	603b      	str	r3, [r7, #0]
 8001604:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_IN___Pin|MOTOR_IN_2_Pin|MOTOR_IN_3_Pin|MOTOR_IN_4_Pin, GPIO_PIN_RESET);
 8001606:	2200      	movs	r2, #0
 8001608:	210f      	movs	r1, #15
 800160a:	4812      	ldr	r0, [pc, #72]	@ (8001654 <MX_GPIO_Init+0xf0>)
 800160c:	f000 fe0c 	bl	8002228 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MOTOR_IN___Pin MOTOR_IN_2_Pin MOTOR_IN_3_Pin MOTOR_IN_4_Pin */
  GPIO_InitStruct.Pin = MOTOR_IN___Pin|MOTOR_IN_2_Pin|MOTOR_IN_3_Pin|MOTOR_IN_4_Pin;
 8001610:	230f      	movs	r3, #15
 8001612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001614:	2301      	movs	r3, #1
 8001616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	2300      	movs	r3, #0
 800161e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	4619      	mov	r1, r3
 8001626:	480b      	ldr	r0, [pc, #44]	@ (8001654 <MX_GPIO_Init+0xf0>)
 8001628:	f000 fc4a 	bl	8001ec0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULTRA_TRIG_Pin ESP_IN_Pin */
  GPIO_InitStruct.Pin = ULTRA_TRIG_Pin|ESP_IN_Pin;
 800162c:	f640 0302 	movw	r3, #2050	@ 0x802
 8001630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001632:	2300      	movs	r3, #0
 8001634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4619      	mov	r1, r3
 8001640:	4805      	ldr	r0, [pc, #20]	@ (8001658 <MX_GPIO_Init+0xf4>)
 8001642:	f000 fc3d 	bl	8001ec0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001646:	bf00      	nop
 8001648:	3728      	adds	r7, #40	@ 0x28
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40023800 	.word	0x40023800
 8001654:	40020800 	.word	0x40020800
 8001658:	40020c00 	.word	0x40020c00

0800165c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001660:	b672      	cpsid	i
}
 8001662:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <Error_Handler+0x8>

08001668 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	4b10      	ldr	r3, [pc, #64]	@ (80016b4 <HAL_MspInit+0x4c>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001676:	4a0f      	ldr	r2, [pc, #60]	@ (80016b4 <HAL_MspInit+0x4c>)
 8001678:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800167c:	6453      	str	r3, [r2, #68]	@ 0x44
 800167e:	4b0d      	ldr	r3, [pc, #52]	@ (80016b4 <HAL_MspInit+0x4c>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001682:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	603b      	str	r3, [r7, #0]
 800168e:	4b09      	ldr	r3, [pc, #36]	@ (80016b4 <HAL_MspInit+0x4c>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	4a08      	ldr	r2, [pc, #32]	@ (80016b4 <HAL_MspInit+0x4c>)
 8001694:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001698:	6413      	str	r3, [r2, #64]	@ 0x40
 800169a:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <HAL_MspInit+0x4c>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016a6:	2007      	movs	r0, #7
 80016a8:	f000 fbc8 	bl	8001e3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40023800 	.word	0x40023800

080016b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08a      	sub	sp, #40	@ 0x28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a19      	ldr	r2, [pc, #100]	@ (800173c <HAL_I2C_MspInit+0x84>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d12b      	bne.n	8001732 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	4b18      	ldr	r3, [pc, #96]	@ (8001740 <HAL_I2C_MspInit+0x88>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	4a17      	ldr	r2, [pc, #92]	@ (8001740 <HAL_I2C_MspInit+0x88>)
 80016e4:	f043 0302 	orr.w	r3, r3, #2
 80016e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ea:	4b15      	ldr	r3, [pc, #84]	@ (8001740 <HAL_I2C_MspInit+0x88>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MAGNETO_SCL_Pin|MAGNETO_SDA_Pin;
 80016f6:	23c0      	movs	r3, #192	@ 0xc0
 80016f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016fa:	2312      	movs	r3, #18
 80016fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001702:	2303      	movs	r3, #3
 8001704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001706:	2304      	movs	r3, #4
 8001708:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	4619      	mov	r1, r3
 8001710:	480c      	ldr	r0, [pc, #48]	@ (8001744 <HAL_I2C_MspInit+0x8c>)
 8001712:	f000 fbd5 	bl	8001ec0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <HAL_I2C_MspInit+0x88>)
 800171c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171e:	4a08      	ldr	r2, [pc, #32]	@ (8001740 <HAL_I2C_MspInit+0x88>)
 8001720:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001724:	6413      	str	r3, [r2, #64]	@ 0x40
 8001726:	4b06      	ldr	r3, [pc, #24]	@ (8001740 <HAL_I2C_MspInit+0x88>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001732:	bf00      	nop
 8001734:	3728      	adds	r7, #40	@ 0x28
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40005400 	.word	0x40005400
 8001740:	40023800 	.word	0x40023800
 8001744:	40020400 	.word	0x40020400

08001748 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a15      	ldr	r2, [pc, #84]	@ (80017ac <HAL_TIM_PWM_MspInit+0x64>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d10e      	bne.n	8001778 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	4b14      	ldr	r3, [pc, #80]	@ (80017b0 <HAL_TIM_PWM_MspInit+0x68>)
 8001760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001762:	4a13      	ldr	r2, [pc, #76]	@ (80017b0 <HAL_TIM_PWM_MspInit+0x68>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6453      	str	r3, [r2, #68]	@ 0x44
 800176a:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <HAL_TIM_PWM_MspInit+0x68>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001776:	e012      	b.n	800179e <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a0d      	ldr	r2, [pc, #52]	@ (80017b4 <HAL_TIM_PWM_MspInit+0x6c>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d10d      	bne.n	800179e <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	4b0a      	ldr	r3, [pc, #40]	@ (80017b0 <HAL_TIM_PWM_MspInit+0x68>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178a:	4a09      	ldr	r2, [pc, #36]	@ (80017b0 <HAL_TIM_PWM_MspInit+0x68>)
 800178c:	f043 0302 	orr.w	r3, r3, #2
 8001790:	6413      	str	r3, [r2, #64]	@ 0x40
 8001792:	4b07      	ldr	r3, [pc, #28]	@ (80017b0 <HAL_TIM_PWM_MspInit+0x68>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
}
 800179e:	bf00      	nop
 80017a0:	3714      	adds	r7, #20
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	40010000 	.word	0x40010000
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40000400 	.word	0x40000400

080017b8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08a      	sub	sp, #40	@ 0x28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c0:	f107 0314 	add.w	r3, r7, #20
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a1d      	ldr	r2, [pc, #116]	@ (800184c <HAL_TIM_IC_MspInit+0x94>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d134      	bne.n	8001844 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	4b1c      	ldr	r3, [pc, #112]	@ (8001850 <HAL_TIM_IC_MspInit+0x98>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e2:	4a1b      	ldr	r2, [pc, #108]	@ (8001850 <HAL_TIM_IC_MspInit+0x98>)
 80017e4:	f043 0304 	orr.w	r3, r3, #4
 80017e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ea:	4b19      	ldr	r3, [pc, #100]	@ (8001850 <HAL_TIM_IC_MspInit+0x98>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ee:	f003 0304 	and.w	r3, r3, #4
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017f6:	2300      	movs	r3, #0
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	4b15      	ldr	r3, [pc, #84]	@ (8001850 <HAL_TIM_IC_MspInit+0x98>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	4a14      	ldr	r2, [pc, #80]	@ (8001850 <HAL_TIM_IC_MspInit+0x98>)
 8001800:	f043 0308 	orr.w	r3, r3, #8
 8001804:	6313      	str	r3, [r2, #48]	@ 0x30
 8001806:	4b12      	ldr	r3, [pc, #72]	@ (8001850 <HAL_TIM_IC_MspInit+0x98>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = ULTRA_ECHO_Pin;
 8001812:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001818:	2302      	movs	r3, #2
 800181a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	2300      	movs	r3, #0
 8001822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001824:	2302      	movs	r3, #2
 8001826:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ULTRA_ECHO_GPIO_Port, &GPIO_InitStruct);
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	4619      	mov	r1, r3
 800182e:	4809      	ldr	r0, [pc, #36]	@ (8001854 <HAL_TIM_IC_MspInit+0x9c>)
 8001830:	f000 fb46 	bl	8001ec0 <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001834:	2200      	movs	r2, #0
 8001836:	2100      	movs	r1, #0
 8001838:	201e      	movs	r0, #30
 800183a:	f000 fb0a 	bl	8001e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800183e:	201e      	movs	r0, #30
 8001840:	f000 fb23 	bl	8001e8a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8001844:	bf00      	nop
 8001846:	3728      	adds	r7, #40	@ 0x28
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40000800 	.word	0x40000800
 8001850:	40023800 	.word	0x40023800
 8001854:	40020c00 	.word	0x40020c00

08001858 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08a      	sub	sp, #40	@ 0x28
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 0314 	add.w	r3, r7, #20
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a24      	ldr	r2, [pc, #144]	@ (8001908 <HAL_TIM_MspPostInit+0xb0>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d11f      	bne.n	80018ba <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	4b23      	ldr	r3, [pc, #140]	@ (800190c <HAL_TIM_MspPostInit+0xb4>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	4a22      	ldr	r2, [pc, #136]	@ (800190c <HAL_TIM_MspPostInit+0xb4>)
 8001884:	f043 0310 	orr.w	r3, r3, #16
 8001888:	6313      	str	r3, [r2, #48]	@ 0x30
 800188a:	4b20      	ldr	r3, [pc, #128]	@ (800190c <HAL_TIM_MspPostInit+0xb4>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	f003 0310 	and.w	r3, r3, #16
 8001892:	613b      	str	r3, [r7, #16]
 8001894:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_PWM__E14_Pin;
 8001896:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800189a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189c:	2302      	movs	r3, #2
 800189e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a4:	2300      	movs	r3, #0
 80018a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018a8:	2301      	movs	r3, #1
 80018aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOTOR_PWM__E14_GPIO_Port, &GPIO_InitStruct);
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	4619      	mov	r1, r3
 80018b2:	4817      	ldr	r0, [pc, #92]	@ (8001910 <HAL_TIM_MspPostInit+0xb8>)
 80018b4:	f000 fb04 	bl	8001ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80018b8:	e022      	b.n	8001900 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a15      	ldr	r2, [pc, #84]	@ (8001914 <HAL_TIM_MspPostInit+0xbc>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d11d      	bne.n	8001900 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	4b10      	ldr	r3, [pc, #64]	@ (800190c <HAL_TIM_MspPostInit+0xb4>)
 80018ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018cc:	4a0f      	ldr	r2, [pc, #60]	@ (800190c <HAL_TIM_MspPostInit+0xb4>)
 80018ce:	f043 0302 	orr.w	r3, r3, #2
 80018d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d4:	4b0d      	ldr	r3, [pc, #52]	@ (800190c <HAL_TIM_MspPostInit+0xb4>)
 80018d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d8:	f003 0302 	and.w	r3, r3, #2
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_PWM___Pin;
 80018e0:	2302      	movs	r3, #2
 80018e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e4:	2302      	movs	r3, #2
 80018e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2300      	movs	r3, #0
 80018ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018f0:	2302      	movs	r3, #2
 80018f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MOTOR_PWM___GPIO_Port, &GPIO_InitStruct);
 80018f4:	f107 0314 	add.w	r3, r7, #20
 80018f8:	4619      	mov	r1, r3
 80018fa:	4807      	ldr	r0, [pc, #28]	@ (8001918 <HAL_TIM_MspPostInit+0xc0>)
 80018fc:	f000 fae0 	bl	8001ec0 <HAL_GPIO_Init>
}
 8001900:	bf00      	nop
 8001902:	3728      	adds	r7, #40	@ 0x28
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40010000 	.word	0x40010000
 800190c:	40023800 	.word	0x40023800
 8001910:	40021000 	.word	0x40021000
 8001914:	40000400 	.word	0x40000400
 8001918:	40020400 	.word	0x40020400

0800191c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08c      	sub	sp, #48	@ 0x30
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 031c 	add.w	r3, r7, #28
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a32      	ldr	r2, [pc, #200]	@ (8001a04 <HAL_UART_MspInit+0xe8>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d12c      	bne.n	8001998 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	61bb      	str	r3, [r7, #24]
 8001942:	4b31      	ldr	r3, [pc, #196]	@ (8001a08 <HAL_UART_MspInit+0xec>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001946:	4a30      	ldr	r2, [pc, #192]	@ (8001a08 <HAL_UART_MspInit+0xec>)
 8001948:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800194c:	6413      	str	r3, [r2, #64]	@ 0x40
 800194e:	4b2e      	ldr	r3, [pc, #184]	@ (8001a08 <HAL_UART_MspInit+0xec>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001956:	61bb      	str	r3, [r7, #24]
 8001958:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	4b2a      	ldr	r3, [pc, #168]	@ (8001a08 <HAL_UART_MspInit+0xec>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	4a29      	ldr	r2, [pc, #164]	@ (8001a08 <HAL_UART_MspInit+0xec>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6313      	str	r3, [r2, #48]	@ 0x30
 800196a:	4b27      	ldr	r3, [pc, #156]	@ (8001a08 <HAL_UART_MspInit+0xec>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GSM_tx_Pin|GSM_rx_Pin;
 8001976:	230c      	movs	r3, #12
 8001978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001982:	2303      	movs	r3, #3
 8001984:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001986:	2307      	movs	r3, #7
 8001988:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	f107 031c 	add.w	r3, r7, #28
 800198e:	4619      	mov	r1, r3
 8001990:	481e      	ldr	r0, [pc, #120]	@ (8001a0c <HAL_UART_MspInit+0xf0>)
 8001992:	f000 fa95 	bl	8001ec0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001996:	e031      	b.n	80019fc <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a1c      	ldr	r2, [pc, #112]	@ (8001a10 <HAL_UART_MspInit+0xf4>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d12c      	bne.n	80019fc <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	4b18      	ldr	r3, [pc, #96]	@ (8001a08 <HAL_UART_MspInit+0xec>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019aa:	4a17      	ldr	r2, [pc, #92]	@ (8001a08 <HAL_UART_MspInit+0xec>)
 80019ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019b2:	4b15      	ldr	r3, [pc, #84]	@ (8001a08 <HAL_UART_MspInit+0xec>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	4b11      	ldr	r3, [pc, #68]	@ (8001a08 <HAL_UART_MspInit+0xec>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	4a10      	ldr	r2, [pc, #64]	@ (8001a08 <HAL_UART_MspInit+0xec>)
 80019c8:	f043 0302 	orr.w	r3, r3, #2
 80019cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001a08 <HAL_UART_MspInit+0xec>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPS_tx_Pin|GPS_rx_Pin;
 80019da:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80019de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e0:	2302      	movs	r3, #2
 80019e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e8:	2303      	movs	r3, #3
 80019ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019ec:	2307      	movs	r3, #7
 80019ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f0:	f107 031c 	add.w	r3, r7, #28
 80019f4:	4619      	mov	r1, r3
 80019f6:	4807      	ldr	r0, [pc, #28]	@ (8001a14 <HAL_UART_MspInit+0xf8>)
 80019f8:	f000 fa62 	bl	8001ec0 <HAL_GPIO_Init>
}
 80019fc:	bf00      	nop
 80019fe:	3730      	adds	r7, #48	@ 0x30
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40004400 	.word	0x40004400
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40020000 	.word	0x40020000
 8001a10:	40004800 	.word	0x40004800
 8001a14:	40020400 	.word	0x40020400

08001a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a1c:	bf00      	nop
 8001a1e:	e7fd      	b.n	8001a1c <NMI_Handler+0x4>

08001a20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a24:	bf00      	nop
 8001a26:	e7fd      	b.n	8001a24 <HardFault_Handler+0x4>

08001a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a2c:	bf00      	nop
 8001a2e:	e7fd      	b.n	8001a2c <MemManage_Handler+0x4>

08001a30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a34:	bf00      	nop
 8001a36:	e7fd      	b.n	8001a34 <BusFault_Handler+0x4>

08001a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a3c:	bf00      	nop
 8001a3e:	e7fd      	b.n	8001a3c <UsageFault_Handler+0x4>

08001a40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a6e:	f000 f8d1 	bl	8001c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001a7c:	4802      	ldr	r0, [pc, #8]	@ (8001a88 <TIM4_IRQHandler+0x10>)
 8001a7e:	f002 fb73 	bl	8004168 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	20000180 	.word	0x20000180

08001a8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a94:	4a14      	ldr	r2, [pc, #80]	@ (8001ae8 <_sbrk+0x5c>)
 8001a96:	4b15      	ldr	r3, [pc, #84]	@ (8001aec <_sbrk+0x60>)
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aa0:	4b13      	ldr	r3, [pc, #76]	@ (8001af0 <_sbrk+0x64>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d102      	bne.n	8001aae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aa8:	4b11      	ldr	r3, [pc, #68]	@ (8001af0 <_sbrk+0x64>)
 8001aaa:	4a12      	ldr	r2, [pc, #72]	@ (8001af4 <_sbrk+0x68>)
 8001aac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aae:	4b10      	ldr	r3, [pc, #64]	@ (8001af0 <_sbrk+0x64>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d207      	bcs.n	8001acc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001abc:	f003 ff76 	bl	80059ac <__errno>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	220c      	movs	r2, #12
 8001ac4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ac6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001aca:	e009      	b.n	8001ae0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001acc:	4b08      	ldr	r3, [pc, #32]	@ (8001af0 <_sbrk+0x64>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ad2:	4b07      	ldr	r3, [pc, #28]	@ (8001af0 <_sbrk+0x64>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4413      	add	r3, r2
 8001ada:	4a05      	ldr	r2, [pc, #20]	@ (8001af0 <_sbrk+0x64>)
 8001adc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ade:	68fb      	ldr	r3, [r7, #12]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20020000 	.word	0x20020000
 8001aec:	00000400 	.word	0x00000400
 8001af0:	200002b4 	.word	0x200002b4
 8001af4:	20000408 	.word	0x20000408

08001af8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001afc:	4b06      	ldr	r3, [pc, #24]	@ (8001b18 <SystemInit+0x20>)
 8001afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b02:	4a05      	ldr	r2, [pc, #20]	@ (8001b18 <SystemInit+0x20>)
 8001b04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b54 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b20:	f7ff ffea 	bl	8001af8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b24:	480c      	ldr	r0, [pc, #48]	@ (8001b58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b26:	490d      	ldr	r1, [pc, #52]	@ (8001b5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b28:	4a0d      	ldr	r2, [pc, #52]	@ (8001b60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b2c:	e002      	b.n	8001b34 <LoopCopyDataInit>

08001b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b32:	3304      	adds	r3, #4

08001b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b38:	d3f9      	bcc.n	8001b2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b3c:	4c0a      	ldr	r4, [pc, #40]	@ (8001b68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b40:	e001      	b.n	8001b46 <LoopFillZerobss>

08001b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b44:	3204      	adds	r2, #4

08001b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b48:	d3fb      	bcc.n	8001b42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b4a:	f003 ff35 	bl	80059b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b4e:	f7ff fa55 	bl	8000ffc <main>
  bx  lr    
 8001b52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b5c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001b60:	08006370 	.word	0x08006370
  ldr r2, =_sbss
 8001b64:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001b68:	20000404 	.word	0x20000404

08001b6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b6c:	e7fe      	b.n	8001b6c <ADC_IRQHandler>
	...

08001b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b74:	4b0e      	ldr	r3, [pc, #56]	@ (8001bb0 <HAL_Init+0x40>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a0d      	ldr	r2, [pc, #52]	@ (8001bb0 <HAL_Init+0x40>)
 8001b7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b80:	4b0b      	ldr	r3, [pc, #44]	@ (8001bb0 <HAL_Init+0x40>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb0 <HAL_Init+0x40>)
 8001b86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b8c:	4b08      	ldr	r3, [pc, #32]	@ (8001bb0 <HAL_Init+0x40>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a07      	ldr	r2, [pc, #28]	@ (8001bb0 <HAL_Init+0x40>)
 8001b92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b98:	2003      	movs	r0, #3
 8001b9a:	f000 f94f 	bl	8001e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f000 f808 	bl	8001bb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ba4:	f7ff fd60 	bl	8001668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40023c00 	.word	0x40023c00

08001bb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bbc:	4b12      	ldr	r3, [pc, #72]	@ (8001c08 <HAL_InitTick+0x54>)
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	4b12      	ldr	r3, [pc, #72]	@ (8001c0c <HAL_InitTick+0x58>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f000 f967 	bl	8001ea6 <HAL_SYSTICK_Config>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e00e      	b.n	8001c00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b0f      	cmp	r3, #15
 8001be6:	d80a      	bhi.n	8001bfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be8:	2200      	movs	r2, #0
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001bf0:	f000 f92f 	bl	8001e52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bf4:	4a06      	ldr	r2, [pc, #24]	@ (8001c10 <HAL_InitTick+0x5c>)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	e000      	b.n	8001c00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20000010 	.word	0x20000010
 8001c0c:	20000018 	.word	0x20000018
 8001c10:	20000014 	.word	0x20000014

08001c14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c18:	4b06      	ldr	r3, [pc, #24]	@ (8001c34 <HAL_IncTick+0x20>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4b06      	ldr	r3, [pc, #24]	@ (8001c38 <HAL_IncTick+0x24>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4413      	add	r3, r2
 8001c24:	4a04      	ldr	r2, [pc, #16]	@ (8001c38 <HAL_IncTick+0x24>)
 8001c26:	6013      	str	r3, [r2, #0]
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	20000018 	.word	0x20000018
 8001c38:	200002b8 	.word	0x200002b8

08001c3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c40:	4b03      	ldr	r3, [pc, #12]	@ (8001c50 <HAL_GetTick+0x14>)
 8001c42:	681b      	ldr	r3, [r3, #0]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	200002b8 	.word	0x200002b8

08001c54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c5c:	f7ff ffee 	bl	8001c3c <HAL_GetTick>
 8001c60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c6c:	d005      	beq.n	8001c7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c98 <HAL_Delay+0x44>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	461a      	mov	r2, r3
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4413      	add	r3, r2
 8001c78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c7a:	bf00      	nop
 8001c7c:	f7ff ffde 	bl	8001c3c <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d8f7      	bhi.n	8001c7c <HAL_Delay+0x28>
  {
  }
}
 8001c8c:	bf00      	nop
 8001c8e:	bf00      	nop
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000018 	.word	0x20000018

08001c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cb8:	4013      	ands	r3, r2
 8001cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cce:	4a04      	ldr	r2, [pc, #16]	@ (8001ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	60d3      	str	r3, [r2, #12]
}
 8001cd4:	bf00      	nop
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce8:	4b04      	ldr	r3, [pc, #16]	@ (8001cfc <__NVIC_GetPriorityGrouping+0x18>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	0a1b      	lsrs	r3, r3, #8
 8001cee:	f003 0307 	and.w	r3, r3, #7
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	db0b      	blt.n	8001d2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	f003 021f 	and.w	r2, r3, #31
 8001d18:	4907      	ldr	r1, [pc, #28]	@ (8001d38 <__NVIC_EnableIRQ+0x38>)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	095b      	lsrs	r3, r3, #5
 8001d20:	2001      	movs	r0, #1
 8001d22:	fa00 f202 	lsl.w	r2, r0, r2
 8001d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000e100 	.word	0xe000e100

08001d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	6039      	str	r1, [r7, #0]
 8001d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	db0a      	blt.n	8001d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	490c      	ldr	r1, [pc, #48]	@ (8001d88 <__NVIC_SetPriority+0x4c>)
 8001d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5a:	0112      	lsls	r2, r2, #4
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	440b      	add	r3, r1
 8001d60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d64:	e00a      	b.n	8001d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	4908      	ldr	r1, [pc, #32]	@ (8001d8c <__NVIC_SetPriority+0x50>)
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	3b04      	subs	r3, #4
 8001d74:	0112      	lsls	r2, r2, #4
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	440b      	add	r3, r1
 8001d7a:	761a      	strb	r2, [r3, #24]
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	e000e100 	.word	0xe000e100
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b089      	sub	sp, #36	@ 0x24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f1c3 0307 	rsb	r3, r3, #7
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	bf28      	it	cs
 8001dae:	2304      	movcs	r3, #4
 8001db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3304      	adds	r3, #4
 8001db6:	2b06      	cmp	r3, #6
 8001db8:	d902      	bls.n	8001dc0 <NVIC_EncodePriority+0x30>
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3b03      	subs	r3, #3
 8001dbe:	e000      	b.n	8001dc2 <NVIC_EncodePriority+0x32>
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43da      	mvns	r2, r3
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	fa01 f303 	lsl.w	r3, r1, r3
 8001de2:	43d9      	mvns	r1, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de8:	4313      	orrs	r3, r2
         );
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3724      	adds	r7, #36	@ 0x24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
	...

08001df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e08:	d301      	bcc.n	8001e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e00f      	b.n	8001e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e38 <SysTick_Config+0x40>)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e16:	210f      	movs	r1, #15
 8001e18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e1c:	f7ff ff8e 	bl	8001d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e20:	4b05      	ldr	r3, [pc, #20]	@ (8001e38 <SysTick_Config+0x40>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e26:	4b04      	ldr	r3, [pc, #16]	@ (8001e38 <SysTick_Config+0x40>)
 8001e28:	2207      	movs	r2, #7
 8001e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	e000e010 	.word	0xe000e010

08001e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff ff29 	bl	8001c9c <__NVIC_SetPriorityGrouping>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b086      	sub	sp, #24
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	4603      	mov	r3, r0
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	607a      	str	r2, [r7, #4]
 8001e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e64:	f7ff ff3e 	bl	8001ce4 <__NVIC_GetPriorityGrouping>
 8001e68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	68b9      	ldr	r1, [r7, #8]
 8001e6e:	6978      	ldr	r0, [r7, #20]
 8001e70:	f7ff ff8e 	bl	8001d90 <NVIC_EncodePriority>
 8001e74:	4602      	mov	r2, r0
 8001e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ff5d 	bl	8001d3c <__NVIC_SetPriority>
}
 8001e82:	bf00      	nop
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	b082      	sub	sp, #8
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	4603      	mov	r3, r0
 8001e92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff ff31 	bl	8001d00 <__NVIC_EnableIRQ>
}
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff ffa2 	bl	8001df8 <SysTick_Config>
 8001eb4:	4603      	mov	r3, r0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
	...

08001ec0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b089      	sub	sp, #36	@ 0x24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	61fb      	str	r3, [r7, #28]
 8001eda:	e16b      	b.n	80021b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001edc:	2201      	movs	r2, #1
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	697a      	ldr	r2, [r7, #20]
 8001eec:	4013      	ands	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	f040 815a 	bne.w	80021ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d005      	beq.n	8001f12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d130      	bne.n	8001f74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	005b      	lsls	r3, r3, #1
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43db      	mvns	r3, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4013      	ands	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	68da      	ldr	r2, [r3, #12]
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	005b      	lsls	r3, r3, #1
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f48:	2201      	movs	r2, #1
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	091b      	lsrs	r3, r3, #4
 8001f5e:	f003 0201 	and.w	r2, r3, #1
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	2b03      	cmp	r3, #3
 8001f7e:	d017      	beq.n	8001fb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	2203      	movs	r2, #3
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	4013      	ands	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 0303 	and.w	r3, r3, #3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d123      	bne.n	8002004 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	08da      	lsrs	r2, r3, #3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3208      	adds	r2, #8
 8001fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	f003 0307 	and.w	r3, r3, #7
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	220f      	movs	r2, #15
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	691a      	ldr	r2, [r3, #16]
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	08da      	lsrs	r2, r3, #3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3208      	adds	r2, #8
 8001ffe:	69b9      	ldr	r1, [r7, #24]
 8002000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	2203      	movs	r2, #3
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4013      	ands	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 0203 	and.w	r2, r3, #3
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 80b4 	beq.w	80021ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	4b60      	ldr	r3, [pc, #384]	@ (80021cc <HAL_GPIO_Init+0x30c>)
 800204c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204e:	4a5f      	ldr	r2, [pc, #380]	@ (80021cc <HAL_GPIO_Init+0x30c>)
 8002050:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002054:	6453      	str	r3, [r2, #68]	@ 0x44
 8002056:	4b5d      	ldr	r3, [pc, #372]	@ (80021cc <HAL_GPIO_Init+0x30c>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800205a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002062:	4a5b      	ldr	r2, [pc, #364]	@ (80021d0 <HAL_GPIO_Init+0x310>)
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	089b      	lsrs	r3, r3, #2
 8002068:	3302      	adds	r3, #2
 800206a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800206e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	220f      	movs	r2, #15
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43db      	mvns	r3, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4013      	ands	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a52      	ldr	r2, [pc, #328]	@ (80021d4 <HAL_GPIO_Init+0x314>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d02b      	beq.n	80020e6 <HAL_GPIO_Init+0x226>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a51      	ldr	r2, [pc, #324]	@ (80021d8 <HAL_GPIO_Init+0x318>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d025      	beq.n	80020e2 <HAL_GPIO_Init+0x222>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a50      	ldr	r2, [pc, #320]	@ (80021dc <HAL_GPIO_Init+0x31c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d01f      	beq.n	80020de <HAL_GPIO_Init+0x21e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a4f      	ldr	r2, [pc, #316]	@ (80021e0 <HAL_GPIO_Init+0x320>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d019      	beq.n	80020da <HAL_GPIO_Init+0x21a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a4e      	ldr	r2, [pc, #312]	@ (80021e4 <HAL_GPIO_Init+0x324>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d013      	beq.n	80020d6 <HAL_GPIO_Init+0x216>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a4d      	ldr	r2, [pc, #308]	@ (80021e8 <HAL_GPIO_Init+0x328>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d00d      	beq.n	80020d2 <HAL_GPIO_Init+0x212>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a4c      	ldr	r2, [pc, #304]	@ (80021ec <HAL_GPIO_Init+0x32c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d007      	beq.n	80020ce <HAL_GPIO_Init+0x20e>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a4b      	ldr	r2, [pc, #300]	@ (80021f0 <HAL_GPIO_Init+0x330>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d101      	bne.n	80020ca <HAL_GPIO_Init+0x20a>
 80020c6:	2307      	movs	r3, #7
 80020c8:	e00e      	b.n	80020e8 <HAL_GPIO_Init+0x228>
 80020ca:	2308      	movs	r3, #8
 80020cc:	e00c      	b.n	80020e8 <HAL_GPIO_Init+0x228>
 80020ce:	2306      	movs	r3, #6
 80020d0:	e00a      	b.n	80020e8 <HAL_GPIO_Init+0x228>
 80020d2:	2305      	movs	r3, #5
 80020d4:	e008      	b.n	80020e8 <HAL_GPIO_Init+0x228>
 80020d6:	2304      	movs	r3, #4
 80020d8:	e006      	b.n	80020e8 <HAL_GPIO_Init+0x228>
 80020da:	2303      	movs	r3, #3
 80020dc:	e004      	b.n	80020e8 <HAL_GPIO_Init+0x228>
 80020de:	2302      	movs	r3, #2
 80020e0:	e002      	b.n	80020e8 <HAL_GPIO_Init+0x228>
 80020e2:	2301      	movs	r3, #1
 80020e4:	e000      	b.n	80020e8 <HAL_GPIO_Init+0x228>
 80020e6:	2300      	movs	r3, #0
 80020e8:	69fa      	ldr	r2, [r7, #28]
 80020ea:	f002 0203 	and.w	r2, r2, #3
 80020ee:	0092      	lsls	r2, r2, #2
 80020f0:	4093      	lsls	r3, r2
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020f8:	4935      	ldr	r1, [pc, #212]	@ (80021d0 <HAL_GPIO_Init+0x310>)
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	089b      	lsrs	r3, r3, #2
 80020fe:	3302      	adds	r3, #2
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002106:	4b3b      	ldr	r3, [pc, #236]	@ (80021f4 <HAL_GPIO_Init+0x334>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	43db      	mvns	r3, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4013      	ands	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d003      	beq.n	800212a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800212a:	4a32      	ldr	r2, [pc, #200]	@ (80021f4 <HAL_GPIO_Init+0x334>)
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002130:	4b30      	ldr	r3, [pc, #192]	@ (80021f4 <HAL_GPIO_Init+0x334>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4313      	orrs	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002154:	4a27      	ldr	r2, [pc, #156]	@ (80021f4 <HAL_GPIO_Init+0x334>)
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800215a:	4b26      	ldr	r3, [pc, #152]	@ (80021f4 <HAL_GPIO_Init+0x334>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	43db      	mvns	r3, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4013      	ands	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800217e:	4a1d      	ldr	r2, [pc, #116]	@ (80021f4 <HAL_GPIO_Init+0x334>)
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002184:	4b1b      	ldr	r3, [pc, #108]	@ (80021f4 <HAL_GPIO_Init+0x334>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d003      	beq.n	80021a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021a8:	4a12      	ldr	r2, [pc, #72]	@ (80021f4 <HAL_GPIO_Init+0x334>)
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3301      	adds	r3, #1
 80021b2:	61fb      	str	r3, [r7, #28]
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	2b0f      	cmp	r3, #15
 80021b8:	f67f ae90 	bls.w	8001edc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021bc:	bf00      	nop
 80021be:	bf00      	nop
 80021c0:	3724      	adds	r7, #36	@ 0x24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	40023800 	.word	0x40023800
 80021d0:	40013800 	.word	0x40013800
 80021d4:	40020000 	.word	0x40020000
 80021d8:	40020400 	.word	0x40020400
 80021dc:	40020800 	.word	0x40020800
 80021e0:	40020c00 	.word	0x40020c00
 80021e4:	40021000 	.word	0x40021000
 80021e8:	40021400 	.word	0x40021400
 80021ec:	40021800 	.word	0x40021800
 80021f0:	40021c00 	.word	0x40021c00
 80021f4:	40013c00 	.word	0x40013c00

080021f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	887b      	ldrh	r3, [r7, #2]
 800220a:	4013      	ands	r3, r2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d002      	beq.n	8002216 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002210:	2301      	movs	r3, #1
 8002212:	73fb      	strb	r3, [r7, #15]
 8002214:	e001      	b.n	800221a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002216:	2300      	movs	r3, #0
 8002218:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800221a:	7bfb      	ldrb	r3, [r7, #15]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	460b      	mov	r3, r1
 8002232:	807b      	strh	r3, [r7, #2]
 8002234:	4613      	mov	r3, r2
 8002236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002238:	787b      	ldrb	r3, [r7, #1]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d003      	beq.n	8002246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800223e:	887a      	ldrh	r2, [r7, #2]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002244:	e003      	b.n	800224e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002246:	887b      	ldrh	r3, [r7, #2]
 8002248:	041a      	lsls	r2, r3, #16
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	619a      	str	r2, [r3, #24]
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
	...

0800225c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e12b      	b.n	80024c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d106      	bne.n	8002288 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2200      	movs	r2, #0
 800227e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff fa18 	bl	80016b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2224      	movs	r2, #36	@ 0x24
 800228c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0201 	bic.w	r2, r2, #1
 800229e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022c0:	f001 fd64 	bl	8003d8c <HAL_RCC_GetPCLK1Freq>
 80022c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	4a81      	ldr	r2, [pc, #516]	@ (80024d0 <HAL_I2C_Init+0x274>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d807      	bhi.n	80022e0 <HAL_I2C_Init+0x84>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4a80      	ldr	r2, [pc, #512]	@ (80024d4 <HAL_I2C_Init+0x278>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	bf94      	ite	ls
 80022d8:	2301      	movls	r3, #1
 80022da:	2300      	movhi	r3, #0
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	e006      	b.n	80022ee <HAL_I2C_Init+0x92>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4a7d      	ldr	r2, [pc, #500]	@ (80024d8 <HAL_I2C_Init+0x27c>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	bf94      	ite	ls
 80022e8:	2301      	movls	r3, #1
 80022ea:	2300      	movhi	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e0e7      	b.n	80024c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	4a78      	ldr	r2, [pc, #480]	@ (80024dc <HAL_I2C_Init+0x280>)
 80022fa:	fba2 2303 	umull	r2, r3, r2, r3
 80022fe:	0c9b      	lsrs	r3, r3, #18
 8002300:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68ba      	ldr	r2, [r7, #8]
 8002312:	430a      	orrs	r2, r1
 8002314:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	4a6a      	ldr	r2, [pc, #424]	@ (80024d0 <HAL_I2C_Init+0x274>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d802      	bhi.n	8002330 <HAL_I2C_Init+0xd4>
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	3301      	adds	r3, #1
 800232e:	e009      	b.n	8002344 <HAL_I2C_Init+0xe8>
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002336:	fb02 f303 	mul.w	r3, r2, r3
 800233a:	4a69      	ldr	r2, [pc, #420]	@ (80024e0 <HAL_I2C_Init+0x284>)
 800233c:	fba2 2303 	umull	r2, r3, r2, r3
 8002340:	099b      	lsrs	r3, r3, #6
 8002342:	3301      	adds	r3, #1
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6812      	ldr	r2, [r2, #0]
 8002348:	430b      	orrs	r3, r1
 800234a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	69db      	ldr	r3, [r3, #28]
 8002352:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002356:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	495c      	ldr	r1, [pc, #368]	@ (80024d0 <HAL_I2C_Init+0x274>)
 8002360:	428b      	cmp	r3, r1
 8002362:	d819      	bhi.n	8002398 <HAL_I2C_Init+0x13c>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	1e59      	subs	r1, r3, #1
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002372:	1c59      	adds	r1, r3, #1
 8002374:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002378:	400b      	ands	r3, r1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00a      	beq.n	8002394 <HAL_I2C_Init+0x138>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1e59      	subs	r1, r3, #1
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	fbb1 f3f3 	udiv	r3, r1, r3
 800238c:	3301      	adds	r3, #1
 800238e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002392:	e051      	b.n	8002438 <HAL_I2C_Init+0x1dc>
 8002394:	2304      	movs	r3, #4
 8002396:	e04f      	b.n	8002438 <HAL_I2C_Init+0x1dc>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d111      	bne.n	80023c4 <HAL_I2C_Init+0x168>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	1e58      	subs	r0, r3, #1
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6859      	ldr	r1, [r3, #4]
 80023a8:	460b      	mov	r3, r1
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	440b      	add	r3, r1
 80023ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80023b2:	3301      	adds	r3, #1
 80023b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	bf0c      	ite	eq
 80023bc:	2301      	moveq	r3, #1
 80023be:	2300      	movne	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	e012      	b.n	80023ea <HAL_I2C_Init+0x18e>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	1e58      	subs	r0, r3, #1
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6859      	ldr	r1, [r3, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	440b      	add	r3, r1
 80023d2:	0099      	lsls	r1, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023da:	3301      	adds	r3, #1
 80023dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	bf0c      	ite	eq
 80023e4:	2301      	moveq	r3, #1
 80023e6:	2300      	movne	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <HAL_I2C_Init+0x196>
 80023ee:	2301      	movs	r3, #1
 80023f0:	e022      	b.n	8002438 <HAL_I2C_Init+0x1dc>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10e      	bne.n	8002418 <HAL_I2C_Init+0x1bc>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1e58      	subs	r0, r3, #1
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6859      	ldr	r1, [r3, #4]
 8002402:	460b      	mov	r3, r1
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	440b      	add	r3, r1
 8002408:	fbb0 f3f3 	udiv	r3, r0, r3
 800240c:	3301      	adds	r3, #1
 800240e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002412:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002416:	e00f      	b.n	8002438 <HAL_I2C_Init+0x1dc>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	1e58      	subs	r0, r3, #1
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6859      	ldr	r1, [r3, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	0099      	lsls	r1, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	fbb0 f3f3 	udiv	r3, r0, r3
 800242e:	3301      	adds	r3, #1
 8002430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002434:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	6809      	ldr	r1, [r1, #0]
 800243c:	4313      	orrs	r3, r2
 800243e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69da      	ldr	r2, [r3, #28]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	431a      	orrs	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	430a      	orrs	r2, r1
 800245a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002466:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6911      	ldr	r1, [r2, #16]
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	68d2      	ldr	r2, [r2, #12]
 8002472:	4311      	orrs	r1, r2
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	6812      	ldr	r2, [r2, #0]
 8002478:	430b      	orrs	r3, r1
 800247a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695a      	ldr	r2, [r3, #20]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f042 0201 	orr.w	r2, r2, #1
 80024a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2220      	movs	r2, #32
 80024b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	000186a0 	.word	0x000186a0
 80024d4:	001e847f 	.word	0x001e847f
 80024d8:	003d08ff 	.word	0x003d08ff
 80024dc:	431bde83 	.word	0x431bde83
 80024e0:	10624dd3 	.word	0x10624dd3

080024e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b088      	sub	sp, #32
 80024e8:	af02      	add	r7, sp, #8
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	607a      	str	r2, [r7, #4]
 80024ee:	461a      	mov	r2, r3
 80024f0:	460b      	mov	r3, r1
 80024f2:	817b      	strh	r3, [r7, #10]
 80024f4:	4613      	mov	r3, r2
 80024f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024f8:	f7ff fba0 	bl	8001c3c <HAL_GetTick>
 80024fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b20      	cmp	r3, #32
 8002508:	f040 80e0 	bne.w	80026cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	2319      	movs	r3, #25
 8002512:	2201      	movs	r2, #1
 8002514:	4970      	ldr	r1, [pc, #448]	@ (80026d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 fd92 	bl	8003040 <I2C_WaitOnFlagUntilTimeout>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002522:	2302      	movs	r3, #2
 8002524:	e0d3      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800252c:	2b01      	cmp	r3, #1
 800252e:	d101      	bne.n	8002534 <HAL_I2C_Master_Transmit+0x50>
 8002530:	2302      	movs	r3, #2
 8002532:	e0cc      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1ea>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b01      	cmp	r3, #1
 8002548:	d007      	beq.n	800255a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f042 0201 	orr.w	r2, r2, #1
 8002558:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002568:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2221      	movs	r2, #33	@ 0x21
 800256e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2210      	movs	r2, #16
 8002576:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	893a      	ldrh	r2, [r7, #8]
 800258a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002590:	b29a      	uxth	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	4a50      	ldr	r2, [pc, #320]	@ (80026dc <HAL_I2C_Master_Transmit+0x1f8>)
 800259a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800259c:	8979      	ldrh	r1, [r7, #10]
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	6a3a      	ldr	r2, [r7, #32]
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 fbfc 	bl	8002da0 <I2C_MasterRequestWrite>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e08d      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025b2:	2300      	movs	r3, #0
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	699b      	ldr	r3, [r3, #24]
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80025c8:	e066      	b.n	8002698 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	6a39      	ldr	r1, [r7, #32]
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 fe50 	bl	8003274 <I2C_WaitOnTXEFlagUntilTimeout>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00d      	beq.n	80025f6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d107      	bne.n	80025f2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e06b      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fa:	781a      	ldrb	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002610:	b29b      	uxth	r3, r3
 8002612:	3b01      	subs	r3, #1
 8002614:	b29a      	uxth	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800261e:	3b01      	subs	r3, #1
 8002620:	b29a      	uxth	r2, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b04      	cmp	r3, #4
 8002632:	d11b      	bne.n	800266c <HAL_I2C_Master_Transmit+0x188>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002638:	2b00      	cmp	r3, #0
 800263a:	d017      	beq.n	800266c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002640:	781a      	ldrb	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264c:	1c5a      	adds	r2, r3, #1
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002656:	b29b      	uxth	r3, r3
 8002658:	3b01      	subs	r3, #1
 800265a:	b29a      	uxth	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002664:	3b01      	subs	r3, #1
 8002666:	b29a      	uxth	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	6a39      	ldr	r1, [r7, #32]
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 fe47 	bl	8003304 <I2C_WaitOnBTFFlagUntilTimeout>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00d      	beq.n	8002698 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002680:	2b04      	cmp	r3, #4
 8002682:	d107      	bne.n	8002694 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002692:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e01a      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800269c:	2b00      	cmp	r3, #0
 800269e:	d194      	bne.n	80025ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2220      	movs	r2, #32
 80026b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	e000      	b.n	80026ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80026cc:	2302      	movs	r3, #2
  }
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	00100002 	.word	0x00100002
 80026dc:	ffff0000 	.word	0xffff0000

080026e0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08c      	sub	sp, #48	@ 0x30
 80026e4:	af02      	add	r7, sp, #8
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	607a      	str	r2, [r7, #4]
 80026ea:	461a      	mov	r2, r3
 80026ec:	460b      	mov	r3, r1
 80026ee:	817b      	strh	r3, [r7, #10]
 80026f0:	4613      	mov	r3, r2
 80026f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026f4:	f7ff faa2 	bl	8001c3c <HAL_GetTick>
 80026f8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b20      	cmp	r3, #32
 8002704:	f040 8217 	bne.w	8002b36 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	2319      	movs	r3, #25
 800270e:	2201      	movs	r2, #1
 8002710:	497c      	ldr	r1, [pc, #496]	@ (8002904 <HAL_I2C_Master_Receive+0x224>)
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 fc94 	bl	8003040 <I2C_WaitOnFlagUntilTimeout>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800271e:	2302      	movs	r3, #2
 8002720:	e20a      	b.n	8002b38 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002728:	2b01      	cmp	r3, #1
 800272a:	d101      	bne.n	8002730 <HAL_I2C_Master_Receive+0x50>
 800272c:	2302      	movs	r3, #2
 800272e:	e203      	b.n	8002b38 <HAL_I2C_Master_Receive+0x458>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b01      	cmp	r3, #1
 8002744:	d007      	beq.n	8002756 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f042 0201 	orr.w	r2, r2, #1
 8002754:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002764:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2222      	movs	r2, #34	@ 0x22
 800276a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2210      	movs	r2, #16
 8002772:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	893a      	ldrh	r2, [r7, #8]
 8002786:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800278c:	b29a      	uxth	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	4a5c      	ldr	r2, [pc, #368]	@ (8002908 <HAL_I2C_Master_Receive+0x228>)
 8002796:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002798:	8979      	ldrh	r1, [r7, #10]
 800279a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 fb80 	bl	8002ea4 <I2C_MasterRequestRead>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e1c4      	b.n	8002b38 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d113      	bne.n	80027de <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027b6:	2300      	movs	r3, #0
 80027b8:	623b      	str	r3, [r7, #32]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	623b      	str	r3, [r7, #32]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	623b      	str	r3, [r7, #32]
 80027ca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	e198      	b.n	8002b10 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d11b      	bne.n	800281e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027f6:	2300      	movs	r3, #0
 80027f8:	61fb      	str	r3, [r7, #28]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	61fb      	str	r3, [r7, #28]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	61fb      	str	r3, [r7, #28]
 800280a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800281a:	601a      	str	r2, [r3, #0]
 800281c:	e178      	b.n	8002b10 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002822:	2b02      	cmp	r3, #2
 8002824:	d11b      	bne.n	800285e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002834:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002844:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002846:	2300      	movs	r3, #0
 8002848:	61bb      	str	r3, [r7, #24]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	61bb      	str	r3, [r7, #24]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	61bb      	str	r3, [r7, #24]
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	e158      	b.n	8002b10 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800286c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	617b      	str	r3, [r7, #20]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002884:	e144      	b.n	8002b10 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800288a:	2b03      	cmp	r3, #3
 800288c:	f200 80f1 	bhi.w	8002a72 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002894:	2b01      	cmp	r3, #1
 8002896:	d123      	bne.n	80028e0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002898:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800289a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 fd79 	bl	8003394 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e145      	b.n	8002b38 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	691a      	ldr	r2, [r3, #16]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028be:	1c5a      	adds	r2, r3, #1
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028c8:	3b01      	subs	r3, #1
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028de:	e117      	b.n	8002b10 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d14e      	bne.n	8002986 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028ee:	2200      	movs	r2, #0
 80028f0:	4906      	ldr	r1, [pc, #24]	@ (800290c <HAL_I2C_Master_Receive+0x22c>)
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 fba4 	bl	8003040 <I2C_WaitOnFlagUntilTimeout>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d008      	beq.n	8002910 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e11a      	b.n	8002b38 <HAL_I2C_Master_Receive+0x458>
 8002902:	bf00      	nop
 8002904:	00100002 	.word	0x00100002
 8002908:	ffff0000 	.word	0xffff0000
 800290c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800291e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	691a      	ldr	r2, [r3, #16]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002932:	1c5a      	adds	r2, r3, #1
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800293c:	3b01      	subs	r3, #1
 800293e:	b29a      	uxth	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002948:	b29b      	uxth	r3, r3
 800294a:	3b01      	subs	r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	691a      	ldr	r2, [r3, #16]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002964:	1c5a      	adds	r2, r3, #1
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800296e:	3b01      	subs	r3, #1
 8002970:	b29a      	uxth	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800297a:	b29b      	uxth	r3, r3
 800297c:	3b01      	subs	r3, #1
 800297e:	b29a      	uxth	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002984:	e0c4      	b.n	8002b10 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800298c:	2200      	movs	r2, #0
 800298e:	496c      	ldr	r1, [pc, #432]	@ (8002b40 <HAL_I2C_Master_Receive+0x460>)
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 fb55 	bl	8003040 <I2C_WaitOnFlagUntilTimeout>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e0cb      	b.n	8002b38 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	691a      	ldr	r2, [r3, #16]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ba:	b2d2      	uxtb	r2, r2
 80029bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c2:	1c5a      	adds	r2, r3, #1
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029cc:	3b01      	subs	r3, #1
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029d8:	b29b      	uxth	r3, r3
 80029da:	3b01      	subs	r3, #1
 80029dc:	b29a      	uxth	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029e8:	2200      	movs	r2, #0
 80029ea:	4955      	ldr	r1, [pc, #340]	@ (8002b40 <HAL_I2C_Master_Receive+0x460>)
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f000 fb27 	bl	8003040 <I2C_WaitOnFlagUntilTimeout>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e09d      	b.n	8002b38 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	691a      	ldr	r2, [r3, #16]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1e:	1c5a      	adds	r2, r3, #1
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	691a      	ldr	r2, [r3, #16]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a48:	b2d2      	uxtb	r2, r2
 8002a4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a50:	1c5a      	adds	r2, r3, #1
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a70:	e04e      	b.n	8002b10 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a74:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 fc8c 	bl	8003394 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e058      	b.n	8002b38 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	691a      	ldr	r2, [r3, #16]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a98:	1c5a      	adds	r2, r3, #1
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	b29a      	uxth	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d124      	bne.n	8002b10 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d107      	bne.n	8002ade <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002adc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	691a      	ldr	r2, [r3, #16]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af0:	1c5a      	adds	r2, r3, #1
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002afa:	3b01      	subs	r3, #1
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f47f aeb6 	bne.w	8002886 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	e000      	b.n	8002b38 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002b36:	2302      	movs	r3, #2
  }
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3728      	adds	r7, #40	@ 0x28
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	00010004 	.word	0x00010004

08002b44 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b08a      	sub	sp, #40	@ 0x28
 8002b48:	af02      	add	r7, sp, #8
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	607a      	str	r2, [r7, #4]
 8002b4e:	603b      	str	r3, [r7, #0]
 8002b50:	460b      	mov	r3, r1
 8002b52:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002b54:	f7ff f872 	bl	8001c3c <HAL_GetTick>
 8002b58:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b20      	cmp	r3, #32
 8002b68:	f040 8111 	bne.w	8002d8e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	2319      	movs	r3, #25
 8002b72:	2201      	movs	r2, #1
 8002b74:	4988      	ldr	r1, [pc, #544]	@ (8002d98 <HAL_I2C_IsDeviceReady+0x254>)
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f000 fa62 	bl	8003040 <I2C_WaitOnFlagUntilTimeout>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002b82:	2302      	movs	r3, #2
 8002b84:	e104      	b.n	8002d90 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <HAL_I2C_IsDeviceReady+0x50>
 8002b90:	2302      	movs	r3, #2
 8002b92:	e0fd      	b.n	8002d90 <HAL_I2C_IsDeviceReady+0x24c>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d007      	beq.n	8002bba <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f042 0201 	orr.w	r2, r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2224      	movs	r2, #36	@ 0x24
 8002bce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4a70      	ldr	r2, [pc, #448]	@ (8002d9c <HAL_I2C_IsDeviceReady+0x258>)
 8002bdc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002bec:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 fa20 	bl	8003040 <I2C_WaitOnFlagUntilTimeout>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00d      	beq.n	8002c22 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c14:	d103      	bne.n	8002c1e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c1c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e0b6      	b.n	8002d90 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c22:	897b      	ldrh	r3, [r7, #10]
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	461a      	mov	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002c30:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002c32:	f7ff f803 	bl	8001c3c <HAL_GetTick>
 8002c36:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695b      	ldr	r3, [r3, #20]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	bf0c      	ite	eq
 8002c46:	2301      	moveq	r3, #1
 8002c48:	2300      	movne	r3, #0
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c5c:	bf0c      	ite	eq
 8002c5e:	2301      	moveq	r3, #1
 8002c60:	2300      	movne	r3, #0
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c66:	e025      	b.n	8002cb4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c68:	f7fe ffe8 	bl	8001c3c <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d302      	bcc.n	8002c7e <HAL_I2C_IsDeviceReady+0x13a>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d103      	bne.n	8002c86 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	22a0      	movs	r2, #160	@ 0xa0
 8002c82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	bf0c      	ite	eq
 8002c94:	2301      	moveq	r3, #1
 8002c96:	2300      	movne	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ca6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002caa:	bf0c      	ite	eq
 8002cac:	2301      	moveq	r3, #1
 8002cae:	2300      	movne	r3, #0
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	2ba0      	cmp	r3, #160	@ 0xa0
 8002cbe:	d005      	beq.n	8002ccc <HAL_I2C_IsDeviceReady+0x188>
 8002cc0:	7dfb      	ldrb	r3, [r7, #23]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d102      	bne.n	8002ccc <HAL_I2C_IsDeviceReady+0x188>
 8002cc6:	7dbb      	ldrb	r3, [r7, #22]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0cd      	beq.n	8002c68 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d129      	bne.n	8002d36 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cf0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	613b      	str	r3, [r7, #16]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	695b      	ldr	r3, [r3, #20]
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	613b      	str	r3, [r7, #16]
 8002d06:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	2319      	movs	r3, #25
 8002d0e:	2201      	movs	r2, #1
 8002d10:	4921      	ldr	r1, [pc, #132]	@ (8002d98 <HAL_I2C_IsDeviceReady+0x254>)
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f000 f994 	bl	8003040 <I2C_WaitOnFlagUntilTimeout>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e036      	b.n	8002d90 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2220      	movs	r2, #32
 8002d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	e02c      	b.n	8002d90 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d44:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002d4e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	2319      	movs	r3, #25
 8002d56:	2201      	movs	r2, #1
 8002d58:	490f      	ldr	r1, [pc, #60]	@ (8002d98 <HAL_I2C_IsDeviceReady+0x254>)
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 f970 	bl	8003040 <I2C_WaitOnFlagUntilTimeout>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e012      	b.n	8002d90 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	f4ff af32 	bcc.w	8002bde <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e000      	b.n	8002d90 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002d8e:	2302      	movs	r3, #2
  }
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3720      	adds	r7, #32
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	00100002 	.word	0x00100002
 8002d9c:	ffff0000 	.word	0xffff0000

08002da0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b088      	sub	sp, #32
 8002da4:	af02      	add	r7, sp, #8
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	607a      	str	r2, [r7, #4]
 8002daa:	603b      	str	r3, [r7, #0]
 8002dac:	460b      	mov	r3, r1
 8002dae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d006      	beq.n	8002dca <I2C_MasterRequestWrite+0x2a>
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d003      	beq.n	8002dca <I2C_MasterRequestWrite+0x2a>
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002dc8:	d108      	bne.n	8002ddc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	e00b      	b.n	8002df4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de0:	2b12      	cmp	r3, #18
 8002de2:	d107      	bne.n	8002df4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002df2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 f91d 	bl	8003040 <I2C_WaitOnFlagUntilTimeout>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00d      	beq.n	8002e28 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e1a:	d103      	bne.n	8002e24 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e22:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e035      	b.n	8002e94 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e30:	d108      	bne.n	8002e44 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e32:	897b      	ldrh	r3, [r7, #10]
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	461a      	mov	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e40:	611a      	str	r2, [r3, #16]
 8002e42:	e01b      	b.n	8002e7c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e44:	897b      	ldrh	r3, [r7, #10]
 8002e46:	11db      	asrs	r3, r3, #7
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	f003 0306 	and.w	r3, r3, #6
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	f063 030f 	orn	r3, r3, #15
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	490e      	ldr	r1, [pc, #56]	@ (8002e9c <I2C_MasterRequestWrite+0xfc>)
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 f966 	bl	8003134 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e010      	b.n	8002e94 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e72:	897b      	ldrh	r3, [r7, #10]
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	4907      	ldr	r1, [pc, #28]	@ (8002ea0 <I2C_MasterRequestWrite+0x100>)
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 f956 	bl	8003134 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e000      	b.n	8002e94 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e92:	2300      	movs	r3, #0
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3718      	adds	r7, #24
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	00010008 	.word	0x00010008
 8002ea0:	00010002 	.word	0x00010002

08002ea4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b088      	sub	sp, #32
 8002ea8:	af02      	add	r7, sp, #8
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	607a      	str	r2, [r7, #4]
 8002eae:	603b      	str	r3, [r7, #0]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ec8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	2b08      	cmp	r3, #8
 8002ece:	d006      	beq.n	8002ede <I2C_MasterRequestRead+0x3a>
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d003      	beq.n	8002ede <I2C_MasterRequestRead+0x3a>
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002edc:	d108      	bne.n	8002ef0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	e00b      	b.n	8002f08 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef4:	2b11      	cmp	r3, #17
 8002ef6:	d107      	bne.n	8002f08 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002f06:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 f893 	bl	8003040 <I2C_WaitOnFlagUntilTimeout>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00d      	beq.n	8002f3c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f2e:	d103      	bne.n	8002f38 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f36:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e079      	b.n	8003030 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f44:	d108      	bne.n	8002f58 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f46:	897b      	ldrh	r3, [r7, #10]
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	f043 0301 	orr.w	r3, r3, #1
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	611a      	str	r2, [r3, #16]
 8002f56:	e05f      	b.n	8003018 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f58:	897b      	ldrh	r3, [r7, #10]
 8002f5a:	11db      	asrs	r3, r3, #7
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	f003 0306 	and.w	r3, r3, #6
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	f063 030f 	orn	r3, r3, #15
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	4930      	ldr	r1, [pc, #192]	@ (8003038 <I2C_MasterRequestRead+0x194>)
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 f8dc 	bl	8003134 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e054      	b.n	8003030 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f86:	897b      	ldrh	r3, [r7, #10]
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	4929      	ldr	r1, [pc, #164]	@ (800303c <I2C_MasterRequestRead+0x198>)
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 f8cc 	bl	8003134 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e044      	b.n	8003030 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	613b      	str	r3, [r7, #16]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	613b      	str	r3, [r7, #16]
 8002fba:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fca:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	9300      	str	r3, [sp, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 f831 	bl	8003040 <I2C_WaitOnFlagUntilTimeout>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00d      	beq.n	8003000 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ff2:	d103      	bne.n	8002ffc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ffa:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e017      	b.n	8003030 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003000:	897b      	ldrh	r3, [r7, #10]
 8003002:	11db      	asrs	r3, r3, #7
 8003004:	b2db      	uxtb	r3, r3
 8003006:	f003 0306 	and.w	r3, r3, #6
 800300a:	b2db      	uxtb	r3, r3
 800300c:	f063 030e 	orn	r3, r3, #14
 8003010:	b2da      	uxtb	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	4907      	ldr	r1, [pc, #28]	@ (800303c <I2C_MasterRequestRead+0x198>)
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 f888 	bl	8003134 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	00010008 	.word	0x00010008
 800303c:	00010002 	.word	0x00010002

08003040 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	603b      	str	r3, [r7, #0]
 800304c:	4613      	mov	r3, r2
 800304e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003050:	e048      	b.n	80030e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003058:	d044      	beq.n	80030e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800305a:	f7fe fdef 	bl	8001c3c <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	429a      	cmp	r2, r3
 8003068:	d302      	bcc.n	8003070 <I2C_WaitOnFlagUntilTimeout+0x30>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d139      	bne.n	80030e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	0c1b      	lsrs	r3, r3, #16
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b01      	cmp	r3, #1
 8003078:	d10d      	bne.n	8003096 <I2C_WaitOnFlagUntilTimeout+0x56>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	695b      	ldr	r3, [r3, #20]
 8003080:	43da      	mvns	r2, r3
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	4013      	ands	r3, r2
 8003086:	b29b      	uxth	r3, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	bf0c      	ite	eq
 800308c:	2301      	moveq	r3, #1
 800308e:	2300      	movne	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	461a      	mov	r2, r3
 8003094:	e00c      	b.n	80030b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	43da      	mvns	r2, r3
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	4013      	ands	r3, r2
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	bf0c      	ite	eq
 80030a8:	2301      	moveq	r3, #1
 80030aa:	2300      	movne	r3, #0
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	461a      	mov	r2, r3
 80030b0:	79fb      	ldrb	r3, [r7, #7]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d116      	bne.n	80030e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2220      	movs	r2, #32
 80030c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d0:	f043 0220 	orr.w	r2, r3, #32
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e023      	b.n	800312c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	0c1b      	lsrs	r3, r3, #16
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d10d      	bne.n	800310a <I2C_WaitOnFlagUntilTimeout+0xca>
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	43da      	mvns	r2, r3
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	4013      	ands	r3, r2
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	bf0c      	ite	eq
 8003100:	2301      	moveq	r3, #1
 8003102:	2300      	movne	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	461a      	mov	r2, r3
 8003108:	e00c      	b.n	8003124 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	43da      	mvns	r2, r3
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	4013      	ands	r3, r2
 8003116:	b29b      	uxth	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	bf0c      	ite	eq
 800311c:	2301      	moveq	r3, #1
 800311e:	2300      	movne	r3, #0
 8003120:	b2db      	uxtb	r3, r3
 8003122:	461a      	mov	r2, r3
 8003124:	79fb      	ldrb	r3, [r7, #7]
 8003126:	429a      	cmp	r2, r3
 8003128:	d093      	beq.n	8003052 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
 8003140:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003142:	e071      	b.n	8003228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800314e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003152:	d123      	bne.n	800319c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003162:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800316c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2220      	movs	r2, #32
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003188:	f043 0204 	orr.w	r2, r3, #4
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e067      	b.n	800326c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031a2:	d041      	beq.n	8003228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031a4:	f7fe fd4a 	bl	8001c3c <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d302      	bcc.n	80031ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d136      	bne.n	8003228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	0c1b      	lsrs	r3, r3, #16
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d10c      	bne.n	80031de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	43da      	mvns	r2, r3
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	4013      	ands	r3, r2
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	bf14      	ite	ne
 80031d6:	2301      	movne	r3, #1
 80031d8:	2300      	moveq	r3, #0
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	e00b      	b.n	80031f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	43da      	mvns	r2, r3
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	4013      	ands	r3, r2
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	bf14      	ite	ne
 80031f0:	2301      	movne	r3, #1
 80031f2:	2300      	moveq	r3, #0
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d016      	beq.n	8003228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003214:	f043 0220 	orr.w	r2, r3, #32
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e021      	b.n	800326c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	0c1b      	lsrs	r3, r3, #16
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b01      	cmp	r3, #1
 8003230:	d10c      	bne.n	800324c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	43da      	mvns	r2, r3
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	4013      	ands	r3, r2
 800323e:	b29b      	uxth	r3, r3
 8003240:	2b00      	cmp	r3, #0
 8003242:	bf14      	ite	ne
 8003244:	2301      	movne	r3, #1
 8003246:	2300      	moveq	r3, #0
 8003248:	b2db      	uxtb	r3, r3
 800324a:	e00b      	b.n	8003264 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	43da      	mvns	r2, r3
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	4013      	ands	r3, r2
 8003258:	b29b      	uxth	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	bf14      	ite	ne
 800325e:	2301      	movne	r3, #1
 8003260:	2300      	moveq	r3, #0
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	f47f af6d 	bne.w	8003144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003280:	e034      	b.n	80032ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 f8e3 	bl	800344e <I2C_IsAcknowledgeFailed>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e034      	b.n	80032fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003298:	d028      	beq.n	80032ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800329a:	f7fe fccf 	bl	8001c3c <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d302      	bcc.n	80032b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d11d      	bne.n	80032ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ba:	2b80      	cmp	r3, #128	@ 0x80
 80032bc:	d016      	beq.n	80032ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2200      	movs	r2, #0
 80032c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2220      	movs	r2, #32
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d8:	f043 0220 	orr.w	r2, r3, #32
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e007      	b.n	80032fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032f6:	2b80      	cmp	r3, #128	@ 0x80
 80032f8:	d1c3      	bne.n	8003282 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003310:	e034      	b.n	800337c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 f89b 	bl	800344e <I2C_IsAcknowledgeFailed>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e034      	b.n	800338c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003328:	d028      	beq.n	800337c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800332a:	f7fe fc87 	bl	8001c3c <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	429a      	cmp	r2, r3
 8003338:	d302      	bcc.n	8003340 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d11d      	bne.n	800337c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	f003 0304 	and.w	r3, r3, #4
 800334a:	2b04      	cmp	r3, #4
 800334c:	d016      	beq.n	800337c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2220      	movs	r2, #32
 8003358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003368:	f043 0220 	orr.w	r2, r3, #32
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e007      	b.n	800338c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	f003 0304 	and.w	r3, r3, #4
 8003386:	2b04      	cmp	r3, #4
 8003388:	d1c3      	bne.n	8003312 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033a0:	e049      	b.n	8003436 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	f003 0310 	and.w	r3, r3, #16
 80033ac:	2b10      	cmp	r3, #16
 80033ae:	d119      	bne.n	80033e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f06f 0210 	mvn.w	r2, #16
 80033b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2220      	movs	r2, #32
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e030      	b.n	8003446 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e4:	f7fe fc2a 	bl	8001c3c <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d302      	bcc.n	80033fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d11d      	bne.n	8003436 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003404:	2b40      	cmp	r3, #64	@ 0x40
 8003406:	d016      	beq.n	8003436 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2220      	movs	r2, #32
 8003412:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003422:	f043 0220 	orr.w	r2, r3, #32
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e007      	b.n	8003446 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003440:	2b40      	cmp	r3, #64	@ 0x40
 8003442:	d1ae      	bne.n	80033a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003460:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003464:	d11b      	bne.n	800349e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800346e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2220      	movs	r2, #32
 800347a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348a:	f043 0204 	orr.w	r2, r3, #4
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e000      	b.n	80034a0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e267      	b.n	800398e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d075      	beq.n	80035b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80034ca:	4b88      	ldr	r3, [pc, #544]	@ (80036ec <HAL_RCC_OscConfig+0x240>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 030c 	and.w	r3, r3, #12
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d00c      	beq.n	80034f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034d6:	4b85      	ldr	r3, [pc, #532]	@ (80036ec <HAL_RCC_OscConfig+0x240>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80034de:	2b08      	cmp	r3, #8
 80034e0:	d112      	bne.n	8003508 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034e2:	4b82      	ldr	r3, [pc, #520]	@ (80036ec <HAL_RCC_OscConfig+0x240>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034ee:	d10b      	bne.n	8003508 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f0:	4b7e      	ldr	r3, [pc, #504]	@ (80036ec <HAL_RCC_OscConfig+0x240>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d05b      	beq.n	80035b4 <HAL_RCC_OscConfig+0x108>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d157      	bne.n	80035b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e242      	b.n	800398e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003510:	d106      	bne.n	8003520 <HAL_RCC_OscConfig+0x74>
 8003512:	4b76      	ldr	r3, [pc, #472]	@ (80036ec <HAL_RCC_OscConfig+0x240>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a75      	ldr	r2, [pc, #468]	@ (80036ec <HAL_RCC_OscConfig+0x240>)
 8003518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	e01d      	b.n	800355c <HAL_RCC_OscConfig+0xb0>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003528:	d10c      	bne.n	8003544 <HAL_RCC_OscConfig+0x98>
 800352a:	4b70      	ldr	r3, [pc, #448]	@ (80036ec <HAL_RCC_OscConfig+0x240>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a6f      	ldr	r2, [pc, #444]	@ (80036ec <HAL_RCC_OscConfig+0x240>)
 8003530:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003534:	6013      	str	r3, [r2, #0]
 8003536:	4b6d      	ldr	r3, [pc, #436]	@ (80036ec <HAL_RCC_OscConfig+0x240>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a6c      	ldr	r2, [pc, #432]	@ (80036ec <HAL_RCC_OscConfig+0x240>)
 800353c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003540:	6013      	str	r3, [r2, #0]
 8003542:	e00b      	b.n	800355c <HAL_RCC_OscConfig+0xb0>
 8003544:	4b69      	ldr	r3, [pc, #420]	@ (80036ec <HAL_RCC_OscConfig+0x240>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a68      	ldr	r2, [pc, #416]	@ (80036ec <HAL_RCC_OscConfig+0x240>)
 800354a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800354e:	6013      	str	r3, [r2, #0]
 8003550:	4b66      	ldr	r3, [pc, #408]	@ (80036ec <HAL_RCC_OscConfig+0x240>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a65      	ldr	r2, [pc, #404]	@ (80036ec <HAL_RCC_OscConfig+0x240>)
 8003556:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800355a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d013      	beq.n	800358c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003564:	f7fe fb6a 	bl	8001c3c <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800356c:	f7fe fb66 	bl	8001c3c <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b64      	cmp	r3, #100	@ 0x64
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e207      	b.n	800398e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800357e:	4b5b      	ldr	r3, [pc, #364]	@ (80036ec <HAL_RCC_OscConfig+0x240>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d0f0      	beq.n	800356c <HAL_RCC_OscConfig+0xc0>
 800358a:	e014      	b.n	80035b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358c:	f7fe fb56 	bl	8001c3c <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003594:	f7fe fb52 	bl	8001c3c <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b64      	cmp	r3, #100	@ 0x64
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e1f3      	b.n	800398e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035a6:	4b51      	ldr	r3, [pc, #324]	@ (80036ec <HAL_RCC_OscConfig+0x240>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1f0      	bne.n	8003594 <HAL_RCC_OscConfig+0xe8>
 80035b2:	e000      	b.n	80035b6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d063      	beq.n	800368a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80035c2:	4b4a      	ldr	r3, [pc, #296]	@ (80036ec <HAL_RCC_OscConfig+0x240>)
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f003 030c 	and.w	r3, r3, #12
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00b      	beq.n	80035e6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ce:	4b47      	ldr	r3, [pc, #284]	@ (80036ec <HAL_RCC_OscConfig+0x240>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80035d6:	2b08      	cmp	r3, #8
 80035d8:	d11c      	bne.n	8003614 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035da:	4b44      	ldr	r3, [pc, #272]	@ (80036ec <HAL_RCC_OscConfig+0x240>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d116      	bne.n	8003614 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035e6:	4b41      	ldr	r3, [pc, #260]	@ (80036ec <HAL_RCC_OscConfig+0x240>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d005      	beq.n	80035fe <HAL_RCC_OscConfig+0x152>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d001      	beq.n	80035fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e1c7      	b.n	800398e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035fe:	4b3b      	ldr	r3, [pc, #236]	@ (80036ec <HAL_RCC_OscConfig+0x240>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	4937      	ldr	r1, [pc, #220]	@ (80036ec <HAL_RCC_OscConfig+0x240>)
 800360e:	4313      	orrs	r3, r2
 8003610:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003612:	e03a      	b.n	800368a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d020      	beq.n	800365e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800361c:	4b34      	ldr	r3, [pc, #208]	@ (80036f0 <HAL_RCC_OscConfig+0x244>)
 800361e:	2201      	movs	r2, #1
 8003620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003622:	f7fe fb0b 	bl	8001c3c <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800362a:	f7fe fb07 	bl	8001c3c <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e1a8      	b.n	800398e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800363c:	4b2b      	ldr	r3, [pc, #172]	@ (80036ec <HAL_RCC_OscConfig+0x240>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0f0      	beq.n	800362a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003648:	4b28      	ldr	r3, [pc, #160]	@ (80036ec <HAL_RCC_OscConfig+0x240>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	4925      	ldr	r1, [pc, #148]	@ (80036ec <HAL_RCC_OscConfig+0x240>)
 8003658:	4313      	orrs	r3, r2
 800365a:	600b      	str	r3, [r1, #0]
 800365c:	e015      	b.n	800368a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800365e:	4b24      	ldr	r3, [pc, #144]	@ (80036f0 <HAL_RCC_OscConfig+0x244>)
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003664:	f7fe faea 	bl	8001c3c <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800366a:	e008      	b.n	800367e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800366c:	f7fe fae6 	bl	8001c3c <HAL_GetTick>
 8003670:	4602      	mov	r2, r0
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	2b02      	cmp	r3, #2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e187      	b.n	800398e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800367e:	4b1b      	ldr	r3, [pc, #108]	@ (80036ec <HAL_RCC_OscConfig+0x240>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1f0      	bne.n	800366c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0308 	and.w	r3, r3, #8
 8003692:	2b00      	cmp	r3, #0
 8003694:	d036      	beq.n	8003704 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d016      	beq.n	80036cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800369e:	4b15      	ldr	r3, [pc, #84]	@ (80036f4 <HAL_RCC_OscConfig+0x248>)
 80036a0:	2201      	movs	r2, #1
 80036a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a4:	f7fe faca 	bl	8001c3c <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ac:	f7fe fac6 	bl	8001c3c <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e167      	b.n	800398e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036be:	4b0b      	ldr	r3, [pc, #44]	@ (80036ec <HAL_RCC_OscConfig+0x240>)
 80036c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0f0      	beq.n	80036ac <HAL_RCC_OscConfig+0x200>
 80036ca:	e01b      	b.n	8003704 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036cc:	4b09      	ldr	r3, [pc, #36]	@ (80036f4 <HAL_RCC_OscConfig+0x248>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d2:	f7fe fab3 	bl	8001c3c <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036d8:	e00e      	b.n	80036f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036da:	f7fe faaf 	bl	8001c3c <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d907      	bls.n	80036f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e150      	b.n	800398e <HAL_RCC_OscConfig+0x4e2>
 80036ec:	40023800 	.word	0x40023800
 80036f0:	42470000 	.word	0x42470000
 80036f4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036f8:	4b88      	ldr	r3, [pc, #544]	@ (800391c <HAL_RCC_OscConfig+0x470>)
 80036fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1ea      	bne.n	80036da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 8097 	beq.w	8003840 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003712:	2300      	movs	r3, #0
 8003714:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003716:	4b81      	ldr	r3, [pc, #516]	@ (800391c <HAL_RCC_OscConfig+0x470>)
 8003718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d10f      	bne.n	8003742 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003722:	2300      	movs	r3, #0
 8003724:	60bb      	str	r3, [r7, #8]
 8003726:	4b7d      	ldr	r3, [pc, #500]	@ (800391c <HAL_RCC_OscConfig+0x470>)
 8003728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372a:	4a7c      	ldr	r2, [pc, #496]	@ (800391c <HAL_RCC_OscConfig+0x470>)
 800372c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003730:	6413      	str	r3, [r2, #64]	@ 0x40
 8003732:	4b7a      	ldr	r3, [pc, #488]	@ (800391c <HAL_RCC_OscConfig+0x470>)
 8003734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003736:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800373a:	60bb      	str	r3, [r7, #8]
 800373c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800373e:	2301      	movs	r3, #1
 8003740:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003742:	4b77      	ldr	r3, [pc, #476]	@ (8003920 <HAL_RCC_OscConfig+0x474>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800374a:	2b00      	cmp	r3, #0
 800374c:	d118      	bne.n	8003780 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800374e:	4b74      	ldr	r3, [pc, #464]	@ (8003920 <HAL_RCC_OscConfig+0x474>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a73      	ldr	r2, [pc, #460]	@ (8003920 <HAL_RCC_OscConfig+0x474>)
 8003754:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003758:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800375a:	f7fe fa6f 	bl	8001c3c <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003760:	e008      	b.n	8003774 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003762:	f7fe fa6b 	bl	8001c3c <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e10c      	b.n	800398e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003774:	4b6a      	ldr	r3, [pc, #424]	@ (8003920 <HAL_RCC_OscConfig+0x474>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0f0      	beq.n	8003762 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d106      	bne.n	8003796 <HAL_RCC_OscConfig+0x2ea>
 8003788:	4b64      	ldr	r3, [pc, #400]	@ (800391c <HAL_RCC_OscConfig+0x470>)
 800378a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800378c:	4a63      	ldr	r2, [pc, #396]	@ (800391c <HAL_RCC_OscConfig+0x470>)
 800378e:	f043 0301 	orr.w	r3, r3, #1
 8003792:	6713      	str	r3, [r2, #112]	@ 0x70
 8003794:	e01c      	b.n	80037d0 <HAL_RCC_OscConfig+0x324>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	2b05      	cmp	r3, #5
 800379c:	d10c      	bne.n	80037b8 <HAL_RCC_OscConfig+0x30c>
 800379e:	4b5f      	ldr	r3, [pc, #380]	@ (800391c <HAL_RCC_OscConfig+0x470>)
 80037a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037a2:	4a5e      	ldr	r2, [pc, #376]	@ (800391c <HAL_RCC_OscConfig+0x470>)
 80037a4:	f043 0304 	orr.w	r3, r3, #4
 80037a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80037aa:	4b5c      	ldr	r3, [pc, #368]	@ (800391c <HAL_RCC_OscConfig+0x470>)
 80037ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ae:	4a5b      	ldr	r2, [pc, #364]	@ (800391c <HAL_RCC_OscConfig+0x470>)
 80037b0:	f043 0301 	orr.w	r3, r3, #1
 80037b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80037b6:	e00b      	b.n	80037d0 <HAL_RCC_OscConfig+0x324>
 80037b8:	4b58      	ldr	r3, [pc, #352]	@ (800391c <HAL_RCC_OscConfig+0x470>)
 80037ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037bc:	4a57      	ldr	r2, [pc, #348]	@ (800391c <HAL_RCC_OscConfig+0x470>)
 80037be:	f023 0301 	bic.w	r3, r3, #1
 80037c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80037c4:	4b55      	ldr	r3, [pc, #340]	@ (800391c <HAL_RCC_OscConfig+0x470>)
 80037c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c8:	4a54      	ldr	r2, [pc, #336]	@ (800391c <HAL_RCC_OscConfig+0x470>)
 80037ca:	f023 0304 	bic.w	r3, r3, #4
 80037ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d015      	beq.n	8003804 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d8:	f7fe fa30 	bl	8001c3c <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037de:	e00a      	b.n	80037f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e0:	f7fe fa2c 	bl	8001c3c <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e0cb      	b.n	800398e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f6:	4b49      	ldr	r3, [pc, #292]	@ (800391c <HAL_RCC_OscConfig+0x470>)
 80037f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d0ee      	beq.n	80037e0 <HAL_RCC_OscConfig+0x334>
 8003802:	e014      	b.n	800382e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003804:	f7fe fa1a 	bl	8001c3c <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800380a:	e00a      	b.n	8003822 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800380c:	f7fe fa16 	bl	8001c3c <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800381a:	4293      	cmp	r3, r2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e0b5      	b.n	800398e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003822:	4b3e      	ldr	r3, [pc, #248]	@ (800391c <HAL_RCC_OscConfig+0x470>)
 8003824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1ee      	bne.n	800380c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800382e:	7dfb      	ldrb	r3, [r7, #23]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d105      	bne.n	8003840 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003834:	4b39      	ldr	r3, [pc, #228]	@ (800391c <HAL_RCC_OscConfig+0x470>)
 8003836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003838:	4a38      	ldr	r2, [pc, #224]	@ (800391c <HAL_RCC_OscConfig+0x470>)
 800383a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800383e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	699b      	ldr	r3, [r3, #24]
 8003844:	2b00      	cmp	r3, #0
 8003846:	f000 80a1 	beq.w	800398c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800384a:	4b34      	ldr	r3, [pc, #208]	@ (800391c <HAL_RCC_OscConfig+0x470>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f003 030c 	and.w	r3, r3, #12
 8003852:	2b08      	cmp	r3, #8
 8003854:	d05c      	beq.n	8003910 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	699b      	ldr	r3, [r3, #24]
 800385a:	2b02      	cmp	r3, #2
 800385c:	d141      	bne.n	80038e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800385e:	4b31      	ldr	r3, [pc, #196]	@ (8003924 <HAL_RCC_OscConfig+0x478>)
 8003860:	2200      	movs	r2, #0
 8003862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003864:	f7fe f9ea 	bl	8001c3c <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800386c:	f7fe f9e6 	bl	8001c3c <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e087      	b.n	800398e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800387e:	4b27      	ldr	r3, [pc, #156]	@ (800391c <HAL_RCC_OscConfig+0x470>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1f0      	bne.n	800386c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69da      	ldr	r2, [r3, #28]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	431a      	orrs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003898:	019b      	lsls	r3, r3, #6
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a0:	085b      	lsrs	r3, r3, #1
 80038a2:	3b01      	subs	r3, #1
 80038a4:	041b      	lsls	r3, r3, #16
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ac:	061b      	lsls	r3, r3, #24
 80038ae:	491b      	ldr	r1, [pc, #108]	@ (800391c <HAL_RCC_OscConfig+0x470>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038b4:	4b1b      	ldr	r3, [pc, #108]	@ (8003924 <HAL_RCC_OscConfig+0x478>)
 80038b6:	2201      	movs	r2, #1
 80038b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ba:	f7fe f9bf 	bl	8001c3c <HAL_GetTick>
 80038be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038c0:	e008      	b.n	80038d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c2:	f7fe f9bb 	bl	8001c3c <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e05c      	b.n	800398e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038d4:	4b11      	ldr	r3, [pc, #68]	@ (800391c <HAL_RCC_OscConfig+0x470>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d0f0      	beq.n	80038c2 <HAL_RCC_OscConfig+0x416>
 80038e0:	e054      	b.n	800398c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e2:	4b10      	ldr	r3, [pc, #64]	@ (8003924 <HAL_RCC_OscConfig+0x478>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e8:	f7fe f9a8 	bl	8001c3c <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f0:	f7fe f9a4 	bl	8001c3c <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b02      	cmp	r3, #2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e045      	b.n	800398e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003902:	4b06      	ldr	r3, [pc, #24]	@ (800391c <HAL_RCC_OscConfig+0x470>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1f0      	bne.n	80038f0 <HAL_RCC_OscConfig+0x444>
 800390e:	e03d      	b.n	800398c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d107      	bne.n	8003928 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e038      	b.n	800398e <HAL_RCC_OscConfig+0x4e2>
 800391c:	40023800 	.word	0x40023800
 8003920:	40007000 	.word	0x40007000
 8003924:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003928:	4b1b      	ldr	r3, [pc, #108]	@ (8003998 <HAL_RCC_OscConfig+0x4ec>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d028      	beq.n	8003988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003940:	429a      	cmp	r2, r3
 8003942:	d121      	bne.n	8003988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800394e:	429a      	cmp	r2, r3
 8003950:	d11a      	bne.n	8003988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003958:	4013      	ands	r3, r2
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800395e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003960:	4293      	cmp	r3, r2
 8003962:	d111      	bne.n	8003988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800396e:	085b      	lsrs	r3, r3, #1
 8003970:	3b01      	subs	r3, #1
 8003972:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003974:	429a      	cmp	r2, r3
 8003976:	d107      	bne.n	8003988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003982:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003984:	429a      	cmp	r2, r3
 8003986:	d001      	beq.n	800398c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e000      	b.n	800398e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3718      	adds	r7, #24
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40023800 	.word	0x40023800

0800399c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e0cc      	b.n	8003b4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039b0:	4b68      	ldr	r3, [pc, #416]	@ (8003b54 <HAL_RCC_ClockConfig+0x1b8>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d90c      	bls.n	80039d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039be:	4b65      	ldr	r3, [pc, #404]	@ (8003b54 <HAL_RCC_ClockConfig+0x1b8>)
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	b2d2      	uxtb	r2, r2
 80039c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c6:	4b63      	ldr	r3, [pc, #396]	@ (8003b54 <HAL_RCC_ClockConfig+0x1b8>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d001      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e0b8      	b.n	8003b4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d020      	beq.n	8003a26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d005      	beq.n	80039fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039f0:	4b59      	ldr	r3, [pc, #356]	@ (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	4a58      	ldr	r2, [pc, #352]	@ (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80039fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0308 	and.w	r3, r3, #8
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d005      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a08:	4b53      	ldr	r3, [pc, #332]	@ (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	4a52      	ldr	r2, [pc, #328]	@ (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a14:	4b50      	ldr	r3, [pc, #320]	@ (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	494d      	ldr	r1, [pc, #308]	@ (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d044      	beq.n	8003abc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d107      	bne.n	8003a4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3a:	4b47      	ldr	r3, [pc, #284]	@ (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d119      	bne.n	8003a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e07f      	b.n	8003b4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d003      	beq.n	8003a5a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a56:	2b03      	cmp	r3, #3
 8003a58:	d107      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a5a:	4b3f      	ldr	r3, [pc, #252]	@ (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d109      	bne.n	8003a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e06f      	b.n	8003b4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a6a:	4b3b      	ldr	r3, [pc, #236]	@ (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e067      	b.n	8003b4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a7a:	4b37      	ldr	r3, [pc, #220]	@ (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f023 0203 	bic.w	r2, r3, #3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	4934      	ldr	r1, [pc, #208]	@ (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a8c:	f7fe f8d6 	bl	8001c3c <HAL_GetTick>
 8003a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a92:	e00a      	b.n	8003aaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a94:	f7fe f8d2 	bl	8001c3c <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e04f      	b.n	8003b4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aaa:	4b2b      	ldr	r3, [pc, #172]	@ (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 020c 	and.w	r2, r3, #12
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d1eb      	bne.n	8003a94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003abc:	4b25      	ldr	r3, [pc, #148]	@ (8003b54 <HAL_RCC_ClockConfig+0x1b8>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0307 	and.w	r3, r3, #7
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d20c      	bcs.n	8003ae4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aca:	4b22      	ldr	r3, [pc, #136]	@ (8003b54 <HAL_RCC_ClockConfig+0x1b8>)
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	b2d2      	uxtb	r2, r2
 8003ad0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ad2:	4b20      	ldr	r3, [pc, #128]	@ (8003b54 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d001      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e032      	b.n	8003b4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d008      	beq.n	8003b02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003af0:	4b19      	ldr	r3, [pc, #100]	@ (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	4916      	ldr	r1, [pc, #88]	@ (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0308 	and.w	r3, r3, #8
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d009      	beq.n	8003b22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b0e:	4b12      	ldr	r3, [pc, #72]	@ (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	490e      	ldr	r1, [pc, #56]	@ (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b22:	f000 f821 	bl	8003b68 <HAL_RCC_GetSysClockFreq>
 8003b26:	4602      	mov	r2, r0
 8003b28:	4b0b      	ldr	r3, [pc, #44]	@ (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	091b      	lsrs	r3, r3, #4
 8003b2e:	f003 030f 	and.w	r3, r3, #15
 8003b32:	490a      	ldr	r1, [pc, #40]	@ (8003b5c <HAL_RCC_ClockConfig+0x1c0>)
 8003b34:	5ccb      	ldrb	r3, [r1, r3]
 8003b36:	fa22 f303 	lsr.w	r3, r2, r3
 8003b3a:	4a09      	ldr	r2, [pc, #36]	@ (8003b60 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b3e:	4b09      	ldr	r3, [pc, #36]	@ (8003b64 <HAL_RCC_ClockConfig+0x1c8>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fe f836 	bl	8001bb4 <HAL_InitTick>

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	40023c00 	.word	0x40023c00
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	08006314 	.word	0x08006314
 8003b60:	20000010 	.word	0x20000010
 8003b64:	20000014 	.word	0x20000014

08003b68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b6c:	b094      	sub	sp, #80	@ 0x50
 8003b6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b70:	2300      	movs	r3, #0
 8003b72:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003b74:	2300      	movs	r3, #0
 8003b76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b80:	4b79      	ldr	r3, [pc, #484]	@ (8003d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 030c 	and.w	r3, r3, #12
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	d00d      	beq.n	8003ba8 <HAL_RCC_GetSysClockFreq+0x40>
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	f200 80e1 	bhi.w	8003d54 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d002      	beq.n	8003b9c <HAL_RCC_GetSysClockFreq+0x34>
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d003      	beq.n	8003ba2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b9a:	e0db      	b.n	8003d54 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b9c:	4b73      	ldr	r3, [pc, #460]	@ (8003d6c <HAL_RCC_GetSysClockFreq+0x204>)
 8003b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ba0:	e0db      	b.n	8003d5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ba2:	4b73      	ldr	r3, [pc, #460]	@ (8003d70 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ba4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ba6:	e0d8      	b.n	8003d5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ba8:	4b6f      	ldr	r3, [pc, #444]	@ (8003d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bb0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bb2:	4b6d      	ldr	r3, [pc, #436]	@ (8003d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d063      	beq.n	8003c86 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bbe:	4b6a      	ldr	r3, [pc, #424]	@ (8003d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	099b      	lsrs	r3, r3, #6
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003bc8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bd6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003bda:	4622      	mov	r2, r4
 8003bdc:	462b      	mov	r3, r5
 8003bde:	f04f 0000 	mov.w	r0, #0
 8003be2:	f04f 0100 	mov.w	r1, #0
 8003be6:	0159      	lsls	r1, r3, #5
 8003be8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bec:	0150      	lsls	r0, r2, #5
 8003bee:	4602      	mov	r2, r0
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	4621      	mov	r1, r4
 8003bf4:	1a51      	subs	r1, r2, r1
 8003bf6:	6139      	str	r1, [r7, #16]
 8003bf8:	4629      	mov	r1, r5
 8003bfa:	eb63 0301 	sbc.w	r3, r3, r1
 8003bfe:	617b      	str	r3, [r7, #20]
 8003c00:	f04f 0200 	mov.w	r2, #0
 8003c04:	f04f 0300 	mov.w	r3, #0
 8003c08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c0c:	4659      	mov	r1, fp
 8003c0e:	018b      	lsls	r3, r1, #6
 8003c10:	4651      	mov	r1, sl
 8003c12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c16:	4651      	mov	r1, sl
 8003c18:	018a      	lsls	r2, r1, #6
 8003c1a:	4651      	mov	r1, sl
 8003c1c:	ebb2 0801 	subs.w	r8, r2, r1
 8003c20:	4659      	mov	r1, fp
 8003c22:	eb63 0901 	sbc.w	r9, r3, r1
 8003c26:	f04f 0200 	mov.w	r2, #0
 8003c2a:	f04f 0300 	mov.w	r3, #0
 8003c2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c3a:	4690      	mov	r8, r2
 8003c3c:	4699      	mov	r9, r3
 8003c3e:	4623      	mov	r3, r4
 8003c40:	eb18 0303 	adds.w	r3, r8, r3
 8003c44:	60bb      	str	r3, [r7, #8]
 8003c46:	462b      	mov	r3, r5
 8003c48:	eb49 0303 	adc.w	r3, r9, r3
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	f04f 0200 	mov.w	r2, #0
 8003c52:	f04f 0300 	mov.w	r3, #0
 8003c56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c5a:	4629      	mov	r1, r5
 8003c5c:	024b      	lsls	r3, r1, #9
 8003c5e:	4621      	mov	r1, r4
 8003c60:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c64:	4621      	mov	r1, r4
 8003c66:	024a      	lsls	r2, r1, #9
 8003c68:	4610      	mov	r0, r2
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c6e:	2200      	movs	r2, #0
 8003c70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c78:	f7fc fe08 	bl	800088c <__aeabi_uldivmod>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4613      	mov	r3, r2
 8003c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c84:	e058      	b.n	8003d38 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c86:	4b38      	ldr	r3, [pc, #224]	@ (8003d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	099b      	lsrs	r3, r3, #6
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	4618      	mov	r0, r3
 8003c90:	4611      	mov	r1, r2
 8003c92:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c96:	623b      	str	r3, [r7, #32]
 8003c98:	2300      	movs	r3, #0
 8003c9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c9c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ca0:	4642      	mov	r2, r8
 8003ca2:	464b      	mov	r3, r9
 8003ca4:	f04f 0000 	mov.w	r0, #0
 8003ca8:	f04f 0100 	mov.w	r1, #0
 8003cac:	0159      	lsls	r1, r3, #5
 8003cae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cb2:	0150      	lsls	r0, r2, #5
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	4641      	mov	r1, r8
 8003cba:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cbe:	4649      	mov	r1, r9
 8003cc0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cc4:	f04f 0200 	mov.w	r2, #0
 8003cc8:	f04f 0300 	mov.w	r3, #0
 8003ccc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003cd0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003cd4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003cd8:	ebb2 040a 	subs.w	r4, r2, sl
 8003cdc:	eb63 050b 	sbc.w	r5, r3, fp
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	00eb      	lsls	r3, r5, #3
 8003cea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cee:	00e2      	lsls	r2, r4, #3
 8003cf0:	4614      	mov	r4, r2
 8003cf2:	461d      	mov	r5, r3
 8003cf4:	4643      	mov	r3, r8
 8003cf6:	18e3      	adds	r3, r4, r3
 8003cf8:	603b      	str	r3, [r7, #0]
 8003cfa:	464b      	mov	r3, r9
 8003cfc:	eb45 0303 	adc.w	r3, r5, r3
 8003d00:	607b      	str	r3, [r7, #4]
 8003d02:	f04f 0200 	mov.w	r2, #0
 8003d06:	f04f 0300 	mov.w	r3, #0
 8003d0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d0e:	4629      	mov	r1, r5
 8003d10:	028b      	lsls	r3, r1, #10
 8003d12:	4621      	mov	r1, r4
 8003d14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d18:	4621      	mov	r1, r4
 8003d1a:	028a      	lsls	r2, r1, #10
 8003d1c:	4610      	mov	r0, r2
 8003d1e:	4619      	mov	r1, r3
 8003d20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d22:	2200      	movs	r2, #0
 8003d24:	61bb      	str	r3, [r7, #24]
 8003d26:	61fa      	str	r2, [r7, #28]
 8003d28:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d2c:	f7fc fdae 	bl	800088c <__aeabi_uldivmod>
 8003d30:	4602      	mov	r2, r0
 8003d32:	460b      	mov	r3, r1
 8003d34:	4613      	mov	r3, r2
 8003d36:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003d38:	4b0b      	ldr	r3, [pc, #44]	@ (8003d68 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	0c1b      	lsrs	r3, r3, #16
 8003d3e:	f003 0303 	and.w	r3, r3, #3
 8003d42:	3301      	adds	r3, #1
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003d48:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d52:	e002      	b.n	8003d5a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d54:	4b05      	ldr	r3, [pc, #20]	@ (8003d6c <HAL_RCC_GetSysClockFreq+0x204>)
 8003d56:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3750      	adds	r7, #80	@ 0x50
 8003d60:	46bd      	mov	sp, r7
 8003d62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d66:	bf00      	nop
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	00f42400 	.word	0x00f42400
 8003d70:	007a1200 	.word	0x007a1200

08003d74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d78:	4b03      	ldr	r3, [pc, #12]	@ (8003d88 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	20000010 	.word	0x20000010

08003d8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d90:	f7ff fff0 	bl	8003d74 <HAL_RCC_GetHCLKFreq>
 8003d94:	4602      	mov	r2, r0
 8003d96:	4b05      	ldr	r3, [pc, #20]	@ (8003dac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	0a9b      	lsrs	r3, r3, #10
 8003d9c:	f003 0307 	and.w	r3, r3, #7
 8003da0:	4903      	ldr	r1, [pc, #12]	@ (8003db0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003da2:	5ccb      	ldrb	r3, [r1, r3]
 8003da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40023800 	.word	0x40023800
 8003db0:	08006324 	.word	0x08006324

08003db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003db8:	f7ff ffdc 	bl	8003d74 <HAL_RCC_GetHCLKFreq>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	4b05      	ldr	r3, [pc, #20]	@ (8003dd4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	0b5b      	lsrs	r3, r3, #13
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	4903      	ldr	r1, [pc, #12]	@ (8003dd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dca:	5ccb      	ldrb	r3, [r1, r3]
 8003dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	40023800 	.word	0x40023800
 8003dd8:	08006324 	.word	0x08006324

08003ddc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d101      	bne.n	8003dee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e041      	b.n	8003e72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d106      	bne.n	8003e08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7fd fca0 	bl	8001748 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3304      	adds	r3, #4
 8003e18:	4619      	mov	r1, r3
 8003e1a:	4610      	mov	r0, r2
 8003e1c:	f000 fc5e 	bl	80046dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b082      	sub	sp, #8
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e041      	b.n	8003f10 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d106      	bne.n	8003ea6 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f7fd fc89 	bl	80017b8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	4610      	mov	r0, r2
 8003eba:	f000 fc0f 	bl	80046dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2201      	movs	r2, #1
 8003eda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3708      	adds	r7, #8
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d104      	bne.n	8003f36 <HAL_TIM_IC_Start_IT+0x1e>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	e013      	b.n	8003f5e <HAL_TIM_IC_Start_IT+0x46>
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	2b04      	cmp	r3, #4
 8003f3a:	d104      	bne.n	8003f46 <HAL_TIM_IC_Start_IT+0x2e>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	e00b      	b.n	8003f5e <HAL_TIM_IC_Start_IT+0x46>
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	2b08      	cmp	r3, #8
 8003f4a:	d104      	bne.n	8003f56 <HAL_TIM_IC_Start_IT+0x3e>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	e003      	b.n	8003f5e <HAL_TIM_IC_Start_IT+0x46>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d104      	bne.n	8003f70 <HAL_TIM_IC_Start_IT+0x58>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	e013      	b.n	8003f98 <HAL_TIM_IC_Start_IT+0x80>
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d104      	bne.n	8003f80 <HAL_TIM_IC_Start_IT+0x68>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	e00b      	b.n	8003f98 <HAL_TIM_IC_Start_IT+0x80>
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	2b08      	cmp	r3, #8
 8003f84:	d104      	bne.n	8003f90 <HAL_TIM_IC_Start_IT+0x78>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	e003      	b.n	8003f98 <HAL_TIM_IC_Start_IT+0x80>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f9a:	7bbb      	ldrb	r3, [r7, #14]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d102      	bne.n	8003fa6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fa0:	7b7b      	ldrb	r3, [r7, #13]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d001      	beq.n	8003faa <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e0cc      	b.n	8004144 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d104      	bne.n	8003fba <HAL_TIM_IC_Start_IT+0xa2>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fb8:	e013      	b.n	8003fe2 <HAL_TIM_IC_Start_IT+0xca>
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d104      	bne.n	8003fca <HAL_TIM_IC_Start_IT+0xb2>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fc8:	e00b      	b.n	8003fe2 <HAL_TIM_IC_Start_IT+0xca>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	d104      	bne.n	8003fda <HAL_TIM_IC_Start_IT+0xc2>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fd8:	e003      	b.n	8003fe2 <HAL_TIM_IC_Start_IT+0xca>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2202      	movs	r2, #2
 8003fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d104      	bne.n	8003ff2 <HAL_TIM_IC_Start_IT+0xda>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2202      	movs	r2, #2
 8003fec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ff0:	e013      	b.n	800401a <HAL_TIM_IC_Start_IT+0x102>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	2b04      	cmp	r3, #4
 8003ff6:	d104      	bne.n	8004002 <HAL_TIM_IC_Start_IT+0xea>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004000:	e00b      	b.n	800401a <HAL_TIM_IC_Start_IT+0x102>
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b08      	cmp	r3, #8
 8004006:	d104      	bne.n	8004012 <HAL_TIM_IC_Start_IT+0xfa>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2202      	movs	r2, #2
 800400c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004010:	e003      	b.n	800401a <HAL_TIM_IC_Start_IT+0x102>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2202      	movs	r2, #2
 8004016:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2b0c      	cmp	r3, #12
 800401e:	d841      	bhi.n	80040a4 <HAL_TIM_IC_Start_IT+0x18c>
 8004020:	a201      	add	r2, pc, #4	@ (adr r2, 8004028 <HAL_TIM_IC_Start_IT+0x110>)
 8004022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004026:	bf00      	nop
 8004028:	0800405d 	.word	0x0800405d
 800402c:	080040a5 	.word	0x080040a5
 8004030:	080040a5 	.word	0x080040a5
 8004034:	080040a5 	.word	0x080040a5
 8004038:	0800406f 	.word	0x0800406f
 800403c:	080040a5 	.word	0x080040a5
 8004040:	080040a5 	.word	0x080040a5
 8004044:	080040a5 	.word	0x080040a5
 8004048:	08004081 	.word	0x08004081
 800404c:	080040a5 	.word	0x080040a5
 8004050:	080040a5 	.word	0x080040a5
 8004054:	080040a5 	.word	0x080040a5
 8004058:	08004093 	.word	0x08004093
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68da      	ldr	r2, [r3, #12]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 0202 	orr.w	r2, r2, #2
 800406a:	60da      	str	r2, [r3, #12]
      break;
 800406c:	e01d      	b.n	80040aa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68da      	ldr	r2, [r3, #12]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f042 0204 	orr.w	r2, r2, #4
 800407c:	60da      	str	r2, [r3, #12]
      break;
 800407e:	e014      	b.n	80040aa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68da      	ldr	r2, [r3, #12]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0208 	orr.w	r2, r2, #8
 800408e:	60da      	str	r2, [r3, #12]
      break;
 8004090:	e00b      	b.n	80040aa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68da      	ldr	r2, [r3, #12]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f042 0210 	orr.w	r2, r2, #16
 80040a0:	60da      	str	r2, [r3, #12]
      break;
 80040a2:	e002      	b.n	80040aa <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	73fb      	strb	r3, [r7, #15]
      break;
 80040a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80040aa:	7bfb      	ldrb	r3, [r7, #15]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d148      	bne.n	8004142 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2201      	movs	r2, #1
 80040b6:	6839      	ldr	r1, [r7, #0]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 fe95 	bl	8004de8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a22      	ldr	r2, [pc, #136]	@ (800414c <HAL_TIM_IC_Start_IT+0x234>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d022      	beq.n	800410e <HAL_TIM_IC_Start_IT+0x1f6>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040d0:	d01d      	beq.n	800410e <HAL_TIM_IC_Start_IT+0x1f6>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a1e      	ldr	r2, [pc, #120]	@ (8004150 <HAL_TIM_IC_Start_IT+0x238>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d018      	beq.n	800410e <HAL_TIM_IC_Start_IT+0x1f6>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a1c      	ldr	r2, [pc, #112]	@ (8004154 <HAL_TIM_IC_Start_IT+0x23c>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d013      	beq.n	800410e <HAL_TIM_IC_Start_IT+0x1f6>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a1b      	ldr	r2, [pc, #108]	@ (8004158 <HAL_TIM_IC_Start_IT+0x240>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d00e      	beq.n	800410e <HAL_TIM_IC_Start_IT+0x1f6>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a19      	ldr	r2, [pc, #100]	@ (800415c <HAL_TIM_IC_Start_IT+0x244>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d009      	beq.n	800410e <HAL_TIM_IC_Start_IT+0x1f6>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a18      	ldr	r2, [pc, #96]	@ (8004160 <HAL_TIM_IC_Start_IT+0x248>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d004      	beq.n	800410e <HAL_TIM_IC_Start_IT+0x1f6>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a16      	ldr	r2, [pc, #88]	@ (8004164 <HAL_TIM_IC_Start_IT+0x24c>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d111      	bne.n	8004132 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f003 0307 	and.w	r3, r3, #7
 8004118:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	2b06      	cmp	r3, #6
 800411e:	d010      	beq.n	8004142 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0201 	orr.w	r2, r2, #1
 800412e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004130:	e007      	b.n	8004142 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f042 0201 	orr.w	r2, r2, #1
 8004140:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004142:	7bfb      	ldrb	r3, [r7, #15]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	40010000 	.word	0x40010000
 8004150:	40000400 	.word	0x40000400
 8004154:	40000800 	.word	0x40000800
 8004158:	40000c00 	.word	0x40000c00
 800415c:	40010400 	.word	0x40010400
 8004160:	40014000 	.word	0x40014000
 8004164:	40001800 	.word	0x40001800

08004168 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d020      	beq.n	80041cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f003 0302 	and.w	r3, r3, #2
 8004190:	2b00      	cmp	r3, #0
 8004192:	d01b      	beq.n	80041cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f06f 0202 	mvn.w	r2, #2
 800419c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7fc fe8c 	bl	8000ed0 <HAL_TIM_IC_CaptureCallback>
 80041b8:	e005      	b.n	80041c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f000 fa70 	bl	80046a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 fa77 	bl	80046b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	f003 0304 	and.w	r3, r3, #4
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d020      	beq.n	8004218 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d01b      	beq.n	8004218 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f06f 0204 	mvn.w	r2, #4
 80041e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2202      	movs	r2, #2
 80041ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7fc fe66 	bl	8000ed0 <HAL_TIM_IC_CaptureCallback>
 8004204:	e005      	b.n	8004212 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 fa4a 	bl	80046a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 fa51 	bl	80046b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f003 0308 	and.w	r3, r3, #8
 800421e:	2b00      	cmp	r3, #0
 8004220:	d020      	beq.n	8004264 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f003 0308 	and.w	r3, r3, #8
 8004228:	2b00      	cmp	r3, #0
 800422a:	d01b      	beq.n	8004264 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f06f 0208 	mvn.w	r2, #8
 8004234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2204      	movs	r2, #4
 800423a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	f003 0303 	and.w	r3, r3, #3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7fc fe40 	bl	8000ed0 <HAL_TIM_IC_CaptureCallback>
 8004250:	e005      	b.n	800425e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 fa24 	bl	80046a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f000 fa2b 	bl	80046b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	f003 0310 	and.w	r3, r3, #16
 800426a:	2b00      	cmp	r3, #0
 800426c:	d020      	beq.n	80042b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f003 0310 	and.w	r3, r3, #16
 8004274:	2b00      	cmp	r3, #0
 8004276:	d01b      	beq.n	80042b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f06f 0210 	mvn.w	r2, #16
 8004280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2208      	movs	r2, #8
 8004286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	69db      	ldr	r3, [r3, #28]
 800428e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004292:	2b00      	cmp	r3, #0
 8004294:	d003      	beq.n	800429e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7fc fe1a 	bl	8000ed0 <HAL_TIM_IC_CaptureCallback>
 800429c:	e005      	b.n	80042aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f9fe 	bl	80046a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 fa05 	bl	80046b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00c      	beq.n	80042d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d007      	beq.n	80042d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f06f 0201 	mvn.w	r2, #1
 80042cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f9dc 	bl	800468c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d00c      	beq.n	80042f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d007      	beq.n	80042f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80042f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 fe76 	bl	8004fe4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00c      	beq.n	800431c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004308:	2b00      	cmp	r3, #0
 800430a:	d007      	beq.n	800431c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f9d6 	bl	80046c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	f003 0320 	and.w	r3, r3, #32
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00c      	beq.n	8004340 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f003 0320 	and.w	r3, r3, #32
 800432c:	2b00      	cmp	r3, #0
 800432e:	d007      	beq.n	8004340 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f06f 0220 	mvn.w	r2, #32
 8004338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 fe48 	bl	8004fd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004340:	bf00      	nop
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004354:	2300      	movs	r3, #0
 8004356:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800435e:	2b01      	cmp	r3, #1
 8004360:	d101      	bne.n	8004366 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004362:	2302      	movs	r3, #2
 8004364:	e088      	b.n	8004478 <HAL_TIM_IC_ConfigChannel+0x130>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d11b      	bne.n	80043ac <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004384:	f000 fc06 	bl	8004b94 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699a      	ldr	r2, [r3, #24]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 020c 	bic.w	r2, r2, #12
 8004396:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6999      	ldr	r1, [r3, #24]
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	689a      	ldr	r2, [r3, #8]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	619a      	str	r2, [r3, #24]
 80043aa:	e060      	b.n	800446e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d11c      	bne.n	80043ec <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80043c2:	f000 fc5b 	bl	8004c7c <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	699a      	ldr	r2, [r3, #24]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80043d4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	6999      	ldr	r1, [r3, #24]
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	021a      	lsls	r2, r3, #8
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	619a      	str	r2, [r3, #24]
 80043ea:	e040      	b.n	800446e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b08      	cmp	r3, #8
 80043f0:	d11b      	bne.n	800442a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004402:	f000 fc78 	bl	8004cf6 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	69da      	ldr	r2, [r3, #28]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 020c 	bic.w	r2, r2, #12
 8004414:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	69d9      	ldr	r1, [r3, #28]
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	430a      	orrs	r2, r1
 8004426:	61da      	str	r2, [r3, #28]
 8004428:	e021      	b.n	800446e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b0c      	cmp	r3, #12
 800442e:	d11c      	bne.n	800446a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004440:	f000 fc95 	bl	8004d6e <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	69da      	ldr	r2, [r3, #28]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004452:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	69d9      	ldr	r1, [r3, #28]
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	021a      	lsls	r2, r3, #8
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	61da      	str	r2, [r3, #28]
 8004468:	e001      	b.n	800446e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004476:	7dfb      	ldrb	r3, [r7, #23]
}
 8004478:	4618      	mov	r0, r3
 800447a:	3718      	adds	r7, #24
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}

08004480 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800448c:	2300      	movs	r3, #0
 800448e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004496:	2b01      	cmp	r3, #1
 8004498:	d101      	bne.n	800449e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800449a:	2302      	movs	r3, #2
 800449c:	e0ae      	b.n	80045fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2b0c      	cmp	r3, #12
 80044aa:	f200 809f 	bhi.w	80045ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80044ae:	a201      	add	r2, pc, #4	@ (adr r2, 80044b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80044b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b4:	080044e9 	.word	0x080044e9
 80044b8:	080045ed 	.word	0x080045ed
 80044bc:	080045ed 	.word	0x080045ed
 80044c0:	080045ed 	.word	0x080045ed
 80044c4:	08004529 	.word	0x08004529
 80044c8:	080045ed 	.word	0x080045ed
 80044cc:	080045ed 	.word	0x080045ed
 80044d0:	080045ed 	.word	0x080045ed
 80044d4:	0800456b 	.word	0x0800456b
 80044d8:	080045ed 	.word	0x080045ed
 80044dc:	080045ed 	.word	0x080045ed
 80044e0:	080045ed 	.word	0x080045ed
 80044e4:	080045ab 	.word	0x080045ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68b9      	ldr	r1, [r7, #8]
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 f9a0 	bl	8004834 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	699a      	ldr	r2, [r3, #24]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0208 	orr.w	r2, r2, #8
 8004502:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	699a      	ldr	r2, [r3, #24]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0204 	bic.w	r2, r2, #4
 8004512:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6999      	ldr	r1, [r3, #24]
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	691a      	ldr	r2, [r3, #16]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	619a      	str	r2, [r3, #24]
      break;
 8004526:	e064      	b.n	80045f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68b9      	ldr	r1, [r7, #8]
 800452e:	4618      	mov	r0, r3
 8004530:	f000 f9f0 	bl	8004914 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	699a      	ldr	r2, [r3, #24]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004542:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	699a      	ldr	r2, [r3, #24]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004552:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6999      	ldr	r1, [r3, #24]
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	021a      	lsls	r2, r3, #8
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	430a      	orrs	r2, r1
 8004566:	619a      	str	r2, [r3, #24]
      break;
 8004568:	e043      	b.n	80045f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68b9      	ldr	r1, [r7, #8]
 8004570:	4618      	mov	r0, r3
 8004572:	f000 fa45 	bl	8004a00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	69da      	ldr	r2, [r3, #28]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f042 0208 	orr.w	r2, r2, #8
 8004584:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	69da      	ldr	r2, [r3, #28]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 0204 	bic.w	r2, r2, #4
 8004594:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	69d9      	ldr	r1, [r3, #28]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	691a      	ldr	r2, [r3, #16]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	430a      	orrs	r2, r1
 80045a6:	61da      	str	r2, [r3, #28]
      break;
 80045a8:	e023      	b.n	80045f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68b9      	ldr	r1, [r7, #8]
 80045b0:	4618      	mov	r0, r3
 80045b2:	f000 fa99 	bl	8004ae8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69da      	ldr	r2, [r3, #28]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	69da      	ldr	r2, [r3, #28]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	69d9      	ldr	r1, [r3, #28]
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	021a      	lsls	r2, r3, #8
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	61da      	str	r2, [r3, #28]
      break;
 80045ea:	e002      	b.n	80045f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	75fb      	strb	r3, [r7, #23]
      break;
 80045f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80045fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3718      	adds	r7, #24
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800460e:	2300      	movs	r3, #0
 8004610:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b0c      	cmp	r3, #12
 8004616:	d831      	bhi.n	800467c <HAL_TIM_ReadCapturedValue+0x78>
 8004618:	a201      	add	r2, pc, #4	@ (adr r2, 8004620 <HAL_TIM_ReadCapturedValue+0x1c>)
 800461a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461e:	bf00      	nop
 8004620:	08004655 	.word	0x08004655
 8004624:	0800467d 	.word	0x0800467d
 8004628:	0800467d 	.word	0x0800467d
 800462c:	0800467d 	.word	0x0800467d
 8004630:	0800465f 	.word	0x0800465f
 8004634:	0800467d 	.word	0x0800467d
 8004638:	0800467d 	.word	0x0800467d
 800463c:	0800467d 	.word	0x0800467d
 8004640:	08004669 	.word	0x08004669
 8004644:	0800467d 	.word	0x0800467d
 8004648:	0800467d 	.word	0x0800467d
 800464c:	0800467d 	.word	0x0800467d
 8004650:	08004673 	.word	0x08004673
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800465a:	60fb      	str	r3, [r7, #12]

      break;
 800465c:	e00f      	b.n	800467e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004664:	60fb      	str	r3, [r7, #12]

      break;
 8004666:	e00a      	b.n	800467e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800466e:	60fb      	str	r3, [r7, #12]

      break;
 8004670:	e005      	b.n	800467e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004678:	60fb      	str	r3, [r7, #12]

      break;
 800467a:	e000      	b.n	800467e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800467c:	bf00      	nop
  }

  return tmpreg;
 800467e:	68fb      	ldr	r3, [r7, #12]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a46      	ldr	r2, [pc, #280]	@ (8004808 <TIM_Base_SetConfig+0x12c>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d013      	beq.n	800471c <TIM_Base_SetConfig+0x40>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046fa:	d00f      	beq.n	800471c <TIM_Base_SetConfig+0x40>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a43      	ldr	r2, [pc, #268]	@ (800480c <TIM_Base_SetConfig+0x130>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d00b      	beq.n	800471c <TIM_Base_SetConfig+0x40>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a42      	ldr	r2, [pc, #264]	@ (8004810 <TIM_Base_SetConfig+0x134>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d007      	beq.n	800471c <TIM_Base_SetConfig+0x40>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a41      	ldr	r2, [pc, #260]	@ (8004814 <TIM_Base_SetConfig+0x138>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d003      	beq.n	800471c <TIM_Base_SetConfig+0x40>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a40      	ldr	r2, [pc, #256]	@ (8004818 <TIM_Base_SetConfig+0x13c>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d108      	bne.n	800472e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004722:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	4313      	orrs	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a35      	ldr	r2, [pc, #212]	@ (8004808 <TIM_Base_SetConfig+0x12c>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d02b      	beq.n	800478e <TIM_Base_SetConfig+0xb2>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800473c:	d027      	beq.n	800478e <TIM_Base_SetConfig+0xb2>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a32      	ldr	r2, [pc, #200]	@ (800480c <TIM_Base_SetConfig+0x130>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d023      	beq.n	800478e <TIM_Base_SetConfig+0xb2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a31      	ldr	r2, [pc, #196]	@ (8004810 <TIM_Base_SetConfig+0x134>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d01f      	beq.n	800478e <TIM_Base_SetConfig+0xb2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a30      	ldr	r2, [pc, #192]	@ (8004814 <TIM_Base_SetConfig+0x138>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d01b      	beq.n	800478e <TIM_Base_SetConfig+0xb2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a2f      	ldr	r2, [pc, #188]	@ (8004818 <TIM_Base_SetConfig+0x13c>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d017      	beq.n	800478e <TIM_Base_SetConfig+0xb2>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a2e      	ldr	r2, [pc, #184]	@ (800481c <TIM_Base_SetConfig+0x140>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d013      	beq.n	800478e <TIM_Base_SetConfig+0xb2>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a2d      	ldr	r2, [pc, #180]	@ (8004820 <TIM_Base_SetConfig+0x144>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d00f      	beq.n	800478e <TIM_Base_SetConfig+0xb2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a2c      	ldr	r2, [pc, #176]	@ (8004824 <TIM_Base_SetConfig+0x148>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d00b      	beq.n	800478e <TIM_Base_SetConfig+0xb2>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a2b      	ldr	r2, [pc, #172]	@ (8004828 <TIM_Base_SetConfig+0x14c>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d007      	beq.n	800478e <TIM_Base_SetConfig+0xb2>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a2a      	ldr	r2, [pc, #168]	@ (800482c <TIM_Base_SetConfig+0x150>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d003      	beq.n	800478e <TIM_Base_SetConfig+0xb2>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a29      	ldr	r2, [pc, #164]	@ (8004830 <TIM_Base_SetConfig+0x154>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d108      	bne.n	80047a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004794:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	4313      	orrs	r3, r2
 800479e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a10      	ldr	r2, [pc, #64]	@ (8004808 <TIM_Base_SetConfig+0x12c>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d003      	beq.n	80047d4 <TIM_Base_SetConfig+0xf8>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a12      	ldr	r2, [pc, #72]	@ (8004818 <TIM_Base_SetConfig+0x13c>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d103      	bne.n	80047dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	691a      	ldr	r2, [r3, #16]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d105      	bne.n	80047fa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	f023 0201 	bic.w	r2, r3, #1
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	611a      	str	r2, [r3, #16]
  }
}
 80047fa:	bf00      	nop
 80047fc:	3714      	adds	r7, #20
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	40010000 	.word	0x40010000
 800480c:	40000400 	.word	0x40000400
 8004810:	40000800 	.word	0x40000800
 8004814:	40000c00 	.word	0x40000c00
 8004818:	40010400 	.word	0x40010400
 800481c:	40014000 	.word	0x40014000
 8004820:	40014400 	.word	0x40014400
 8004824:	40014800 	.word	0x40014800
 8004828:	40001800 	.word	0x40001800
 800482c:	40001c00 	.word	0x40001c00
 8004830:	40002000 	.word	0x40002000

08004834 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004834:	b480      	push	{r7}
 8004836:	b087      	sub	sp, #28
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	f023 0201 	bic.w	r2, r3, #1
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f023 0303 	bic.w	r3, r3, #3
 800486a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	4313      	orrs	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f023 0302 	bic.w	r3, r3, #2
 800487c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	4313      	orrs	r3, r2
 8004886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a20      	ldr	r2, [pc, #128]	@ (800490c <TIM_OC1_SetConfig+0xd8>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d003      	beq.n	8004898 <TIM_OC1_SetConfig+0x64>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	4a1f      	ldr	r2, [pc, #124]	@ (8004910 <TIM_OC1_SetConfig+0xdc>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d10c      	bne.n	80048b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	f023 0308 	bic.w	r3, r3, #8
 800489e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	f023 0304 	bic.w	r3, r3, #4
 80048b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a15      	ldr	r2, [pc, #84]	@ (800490c <TIM_OC1_SetConfig+0xd8>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d003      	beq.n	80048c2 <TIM_OC1_SetConfig+0x8e>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a14      	ldr	r2, [pc, #80]	@ (8004910 <TIM_OC1_SetConfig+0xdc>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d111      	bne.n	80048e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80048d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	4313      	orrs	r3, r2
 80048da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685a      	ldr	r2, [r3, #4]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	621a      	str	r2, [r3, #32]
}
 8004900:	bf00      	nop
 8004902:	371c      	adds	r7, #28
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	40010000 	.word	0x40010000
 8004910:	40010400 	.word	0x40010400

08004914 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004914:	b480      	push	{r7}
 8004916:	b087      	sub	sp, #28
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	f023 0210 	bic.w	r2, r3, #16
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800494a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	021b      	lsls	r3, r3, #8
 8004952:	68fa      	ldr	r2, [r7, #12]
 8004954:	4313      	orrs	r3, r2
 8004956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	f023 0320 	bic.w	r3, r3, #32
 800495e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	011b      	lsls	r3, r3, #4
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	4313      	orrs	r3, r2
 800496a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a22      	ldr	r2, [pc, #136]	@ (80049f8 <TIM_OC2_SetConfig+0xe4>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d003      	beq.n	800497c <TIM_OC2_SetConfig+0x68>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a21      	ldr	r2, [pc, #132]	@ (80049fc <TIM_OC2_SetConfig+0xe8>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d10d      	bne.n	8004998 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	011b      	lsls	r3, r3, #4
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	4313      	orrs	r3, r2
 800498e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004996:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a17      	ldr	r2, [pc, #92]	@ (80049f8 <TIM_OC2_SetConfig+0xe4>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d003      	beq.n	80049a8 <TIM_OC2_SetConfig+0x94>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a16      	ldr	r2, [pc, #88]	@ (80049fc <TIM_OC2_SetConfig+0xe8>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d113      	bne.n	80049d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80049ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80049b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	695b      	ldr	r3, [r3, #20]
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	621a      	str	r2, [r3, #32]
}
 80049ea:	bf00      	nop
 80049ec:	371c      	adds	r7, #28
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	40010000 	.word	0x40010000
 80049fc:	40010400 	.word	0x40010400

08004a00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b087      	sub	sp, #28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a1b      	ldr	r3, [r3, #32]
 8004a0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a1b      	ldr	r3, [r3, #32]
 8004a14:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f023 0303 	bic.w	r3, r3, #3
 8004a36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68fa      	ldr	r2, [r7, #12]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	021b      	lsls	r3, r3, #8
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a21      	ldr	r2, [pc, #132]	@ (8004ae0 <TIM_OC3_SetConfig+0xe0>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d003      	beq.n	8004a66 <TIM_OC3_SetConfig+0x66>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a20      	ldr	r2, [pc, #128]	@ (8004ae4 <TIM_OC3_SetConfig+0xe4>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d10d      	bne.n	8004a82 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	021b      	lsls	r3, r3, #8
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a16      	ldr	r2, [pc, #88]	@ (8004ae0 <TIM_OC3_SetConfig+0xe0>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d003      	beq.n	8004a92 <TIM_OC3_SetConfig+0x92>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a15      	ldr	r2, [pc, #84]	@ (8004ae4 <TIM_OC3_SetConfig+0xe4>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d113      	bne.n	8004aba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	011b      	lsls	r3, r3, #4
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	011b      	lsls	r3, r3, #4
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	621a      	str	r2, [r3, #32]
}
 8004ad4:	bf00      	nop
 8004ad6:	371c      	adds	r7, #28
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	40010000 	.word	0x40010000
 8004ae4:	40010400 	.word	0x40010400

08004ae8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b087      	sub	sp, #28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	021b      	lsls	r3, r3, #8
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	031b      	lsls	r3, r3, #12
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	4a12      	ldr	r2, [pc, #72]	@ (8004b8c <TIM_OC4_SetConfig+0xa4>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d003      	beq.n	8004b50 <TIM_OC4_SetConfig+0x68>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a11      	ldr	r2, [pc, #68]	@ (8004b90 <TIM_OC4_SetConfig+0xa8>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d109      	bne.n	8004b64 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	019b      	lsls	r3, r3, #6
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	621a      	str	r2, [r3, #32]
}
 8004b7e:	bf00      	nop
 8004b80:	371c      	adds	r7, #28
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	40010000 	.word	0x40010000
 8004b90:	40010400 	.word	0x40010400

08004b94 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b087      	sub	sp, #28
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
 8004ba0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	f023 0201 	bic.w	r2, r3, #1
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	4a28      	ldr	r2, [pc, #160]	@ (8004c60 <TIM_TI1_SetConfig+0xcc>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d01b      	beq.n	8004bfa <TIM_TI1_SetConfig+0x66>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bc8:	d017      	beq.n	8004bfa <TIM_TI1_SetConfig+0x66>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	4a25      	ldr	r2, [pc, #148]	@ (8004c64 <TIM_TI1_SetConfig+0xd0>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d013      	beq.n	8004bfa <TIM_TI1_SetConfig+0x66>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	4a24      	ldr	r2, [pc, #144]	@ (8004c68 <TIM_TI1_SetConfig+0xd4>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d00f      	beq.n	8004bfa <TIM_TI1_SetConfig+0x66>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	4a23      	ldr	r2, [pc, #140]	@ (8004c6c <TIM_TI1_SetConfig+0xd8>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d00b      	beq.n	8004bfa <TIM_TI1_SetConfig+0x66>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	4a22      	ldr	r2, [pc, #136]	@ (8004c70 <TIM_TI1_SetConfig+0xdc>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d007      	beq.n	8004bfa <TIM_TI1_SetConfig+0x66>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	4a21      	ldr	r2, [pc, #132]	@ (8004c74 <TIM_TI1_SetConfig+0xe0>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d003      	beq.n	8004bfa <TIM_TI1_SetConfig+0x66>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	4a20      	ldr	r2, [pc, #128]	@ (8004c78 <TIM_TI1_SetConfig+0xe4>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d101      	bne.n	8004bfe <TIM_TI1_SetConfig+0x6a>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e000      	b.n	8004c00 <TIM_TI1_SetConfig+0x6c>
 8004bfe:	2300      	movs	r3, #0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d008      	beq.n	8004c16 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	f023 0303 	bic.w	r3, r3, #3
 8004c0a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	617b      	str	r3, [r7, #20]
 8004c14:	e003      	b.n	8004c1e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f043 0301 	orr.w	r3, r3, #1
 8004c1c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	011b      	lsls	r3, r3, #4
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	f023 030a 	bic.w	r3, r3, #10
 8004c38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	f003 030a 	and.w	r3, r3, #10
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	621a      	str	r2, [r3, #32]
}
 8004c52:	bf00      	nop
 8004c54:	371c      	adds	r7, #28
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	40010000 	.word	0x40010000
 8004c64:	40000400 	.word	0x40000400
 8004c68:	40000800 	.word	0x40000800
 8004c6c:	40000c00 	.word	0x40000c00
 8004c70:	40010400 	.word	0x40010400
 8004c74:	40014000 	.word	0x40014000
 8004c78:	40001800 	.word	0x40001800

08004c7c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b087      	sub	sp, #28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
 8004c88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	f023 0210 	bic.w	r2, r3, #16
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ca8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	021b      	lsls	r3, r3, #8
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004cba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	031b      	lsls	r3, r3, #12
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004cce:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	011b      	lsls	r3, r3, #4
 8004cd4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	621a      	str	r2, [r3, #32]
}
 8004cea:	bf00      	nop
 8004cec:	371c      	adds	r7, #28
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b087      	sub	sp, #28
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	60f8      	str	r0, [r7, #12]
 8004cfe:	60b9      	str	r1, [r7, #8]
 8004d00:	607a      	str	r2, [r7, #4]
 8004d02:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6a1b      	ldr	r3, [r3, #32]
 8004d08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	f023 0303 	bic.w	r3, r3, #3
 8004d22:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d32:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	011b      	lsls	r3, r3, #4
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004d46:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	021b      	lsls	r3, r3, #8
 8004d4c:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	693a      	ldr	r2, [r7, #16]
 8004d5a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	697a      	ldr	r2, [r7, #20]
 8004d60:	621a      	str	r2, [r3, #32]
}
 8004d62:	bf00      	nop
 8004d64:	371c      	adds	r7, #28
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d6e:	b480      	push	{r7}
 8004d70:	b087      	sub	sp, #28
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	60f8      	str	r0, [r7, #12]
 8004d76:	60b9      	str	r1, [r7, #8]
 8004d78:	607a      	str	r2, [r7, #4]
 8004d7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d9a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	021b      	lsls	r3, r3, #8
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004dac:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	031b      	lsls	r3, r3, #12
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004dc0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	031b      	lsls	r3, r3, #12
 8004dc6:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	621a      	str	r2, [r3, #32]
}
 8004ddc:	bf00      	nop
 8004dde:	371c      	adds	r7, #28
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b087      	sub	sp, #28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	f003 031f 	and.w	r3, r3, #31
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004e00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6a1a      	ldr	r2, [r3, #32]
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	43db      	mvns	r3, r3
 8004e0a:	401a      	ands	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6a1a      	ldr	r2, [r3, #32]
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f003 031f 	and.w	r3, r3, #31
 8004e1a:	6879      	ldr	r1, [r7, #4]
 8004e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e20:	431a      	orrs	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	621a      	str	r2, [r3, #32]
}
 8004e26:	bf00      	nop
 8004e28:	371c      	adds	r7, #28
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
	...

08004e34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d101      	bne.n	8004e4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e48:	2302      	movs	r3, #2
 8004e4a:	e05a      	b.n	8004f02 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a21      	ldr	r2, [pc, #132]	@ (8004f10 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d022      	beq.n	8004ed6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e98:	d01d      	beq.n	8004ed6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a1d      	ldr	r2, [pc, #116]	@ (8004f14 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d018      	beq.n	8004ed6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a1b      	ldr	r2, [pc, #108]	@ (8004f18 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d013      	beq.n	8004ed6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a1a      	ldr	r2, [pc, #104]	@ (8004f1c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d00e      	beq.n	8004ed6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a18      	ldr	r2, [pc, #96]	@ (8004f20 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d009      	beq.n	8004ed6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a17      	ldr	r2, [pc, #92]	@ (8004f24 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d004      	beq.n	8004ed6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a15      	ldr	r2, [pc, #84]	@ (8004f28 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d10c      	bne.n	8004ef0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004edc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	68ba      	ldr	r2, [r7, #8]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68ba      	ldr	r2, [r7, #8]
 8004eee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3714      	adds	r7, #20
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	40010000 	.word	0x40010000
 8004f14:	40000400 	.word	0x40000400
 8004f18:	40000800 	.word	0x40000800
 8004f1c:	40000c00 	.word	0x40000c00
 8004f20:	40010400 	.word	0x40010400
 8004f24:	40014000 	.word	0x40014000
 8004f28:	40001800 	.word	0x40001800

08004f2c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004f36:	2300      	movs	r3, #0
 8004f38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d101      	bne.n	8004f48 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004f44:	2302      	movs	r3, #2
 8004f46:	e03d      	b.n	8004fc4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	4313      	orrs	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3714      	adds	r7, #20
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005006:	2301      	movs	r3, #1
 8005008:	e042      	b.n	8005090 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d106      	bne.n	8005024 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7fc fc7c 	bl	800191c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2224      	movs	r2, #36	@ 0x24
 8005028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68da      	ldr	r2, [r3, #12]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800503a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 fa09 	bl	8005454 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	691a      	ldr	r2, [r3, #16]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005050:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	695a      	ldr	r2, [r3, #20]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005060:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68da      	ldr	r2, [r3, #12]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005070:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2220      	movs	r2, #32
 800507c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2220      	movs	r2, #32
 8005084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3708      	adds	r7, #8
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b08a      	sub	sp, #40	@ 0x28
 800509c:	af02      	add	r7, sp, #8
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	603b      	str	r3, [r7, #0]
 80050a4:	4613      	mov	r3, r2
 80050a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80050a8:	2300      	movs	r3, #0
 80050aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b20      	cmp	r3, #32
 80050b6:	d175      	bne.n	80051a4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d002      	beq.n	80050c4 <HAL_UART_Transmit+0x2c>
 80050be:	88fb      	ldrh	r3, [r7, #6]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d101      	bne.n	80050c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e06e      	b.n	80051a6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2221      	movs	r2, #33	@ 0x21
 80050d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050d6:	f7fc fdb1 	bl	8001c3c <HAL_GetTick>
 80050da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	88fa      	ldrh	r2, [r7, #6]
 80050e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	88fa      	ldrh	r2, [r7, #6]
 80050e6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050f0:	d108      	bne.n	8005104 <HAL_UART_Transmit+0x6c>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d104      	bne.n	8005104 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050fa:	2300      	movs	r3, #0
 80050fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	61bb      	str	r3, [r7, #24]
 8005102:	e003      	b.n	800510c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005108:	2300      	movs	r3, #0
 800510a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800510c:	e02e      	b.n	800516c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	9300      	str	r3, [sp, #0]
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	2200      	movs	r2, #0
 8005116:	2180      	movs	r1, #128	@ 0x80
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f000 f8df 	bl	80052dc <UART_WaitOnFlagUntilTimeout>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d005      	beq.n	8005130 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2220      	movs	r2, #32
 8005128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e03a      	b.n	80051a6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10b      	bne.n	800514e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	881b      	ldrh	r3, [r3, #0]
 800513a:	461a      	mov	r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005144:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	3302      	adds	r3, #2
 800514a:	61bb      	str	r3, [r7, #24]
 800514c:	e007      	b.n	800515e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	781a      	ldrb	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	3301      	adds	r3, #1
 800515c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005162:	b29b      	uxth	r3, r3
 8005164:	3b01      	subs	r3, #1
 8005166:	b29a      	uxth	r2, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005170:	b29b      	uxth	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1cb      	bne.n	800510e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	2200      	movs	r2, #0
 800517e:	2140      	movs	r1, #64	@ 0x40
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f000 f8ab 	bl	80052dc <UART_WaitOnFlagUntilTimeout>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d005      	beq.n	8005198 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2220      	movs	r2, #32
 8005190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e006      	b.n	80051a6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2220      	movs	r2, #32
 800519c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80051a0:	2300      	movs	r3, #0
 80051a2:	e000      	b.n	80051a6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80051a4:	2302      	movs	r3, #2
  }
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3720      	adds	r7, #32
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b08a      	sub	sp, #40	@ 0x28
 80051b2:	af02      	add	r7, sp, #8
 80051b4:	60f8      	str	r0, [r7, #12]
 80051b6:	60b9      	str	r1, [r7, #8]
 80051b8:	603b      	str	r3, [r7, #0]
 80051ba:	4613      	mov	r3, r2
 80051bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80051be:	2300      	movs	r3, #0
 80051c0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b20      	cmp	r3, #32
 80051cc:	f040 8081 	bne.w	80052d2 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d002      	beq.n	80051dc <HAL_UART_Receive+0x2e>
 80051d6:	88fb      	ldrh	r3, [r7, #6]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d101      	bne.n	80051e0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e079      	b.n	80052d4 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2222      	movs	r2, #34	@ 0x22
 80051ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051f4:	f7fc fd22 	bl	8001c3c <HAL_GetTick>
 80051f8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	88fa      	ldrh	r2, [r7, #6]
 80051fe:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	88fa      	ldrh	r2, [r7, #6]
 8005204:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800520e:	d108      	bne.n	8005222 <HAL_UART_Receive+0x74>
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d104      	bne.n	8005222 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005218:	2300      	movs	r3, #0
 800521a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	61bb      	str	r3, [r7, #24]
 8005220:	e003      	b.n	800522a <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005226:	2300      	movs	r3, #0
 8005228:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800522a:	e047      	b.n	80052bc <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	2200      	movs	r2, #0
 8005234:	2120      	movs	r1, #32
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f000 f850 	bl	80052dc <UART_WaitOnFlagUntilTimeout>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d005      	beq.n	800524e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2220      	movs	r2, #32
 8005246:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e042      	b.n	80052d4 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10c      	bne.n	800526e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	b29b      	uxth	r3, r3
 800525c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005260:	b29a      	uxth	r2, r3
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	3302      	adds	r3, #2
 800526a:	61bb      	str	r3, [r7, #24]
 800526c:	e01f      	b.n	80052ae <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005276:	d007      	beq.n	8005288 <HAL_UART_Receive+0xda>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10a      	bne.n	8005296 <HAL_UART_Receive+0xe8>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d106      	bne.n	8005296 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	b2da      	uxtb	r2, r3
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	701a      	strb	r2, [r3, #0]
 8005294:	e008      	b.n	80052a8 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	b2db      	uxtb	r3, r3
 800529e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	3301      	adds	r3, #1
 80052ac:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	3b01      	subs	r3, #1
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1b2      	bne.n	800522c <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2220      	movs	r2, #32
 80052ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80052ce:	2300      	movs	r3, #0
 80052d0:	e000      	b.n	80052d4 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80052d2:	2302      	movs	r3, #2
  }
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3720      	adds	r7, #32
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	603b      	str	r3, [r7, #0]
 80052e8:	4613      	mov	r3, r2
 80052ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ec:	e03b      	b.n	8005366 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ee:	6a3b      	ldr	r3, [r7, #32]
 80052f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80052f4:	d037      	beq.n	8005366 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052f6:	f7fc fca1 	bl	8001c3c <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	6a3a      	ldr	r2, [r7, #32]
 8005302:	429a      	cmp	r2, r3
 8005304:	d302      	bcc.n	800530c <UART_WaitOnFlagUntilTimeout+0x30>
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d101      	bne.n	8005310 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e03a      	b.n	8005386 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	f003 0304 	and.w	r3, r3, #4
 800531a:	2b00      	cmp	r3, #0
 800531c:	d023      	beq.n	8005366 <UART_WaitOnFlagUntilTimeout+0x8a>
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	2b80      	cmp	r3, #128	@ 0x80
 8005322:	d020      	beq.n	8005366 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	2b40      	cmp	r3, #64	@ 0x40
 8005328:	d01d      	beq.n	8005366 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0308 	and.w	r3, r3, #8
 8005334:	2b08      	cmp	r3, #8
 8005336:	d116      	bne.n	8005366 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005338:	2300      	movs	r3, #0
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	617b      	str	r3, [r7, #20]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	617b      	str	r3, [r7, #20]
 800534c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 f81d 	bl	800538e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2208      	movs	r2, #8
 8005358:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e00f      	b.n	8005386 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	4013      	ands	r3, r2
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	429a      	cmp	r2, r3
 8005374:	bf0c      	ite	eq
 8005376:	2301      	moveq	r3, #1
 8005378:	2300      	movne	r3, #0
 800537a:	b2db      	uxtb	r3, r3
 800537c:	461a      	mov	r2, r3
 800537e:	79fb      	ldrb	r3, [r7, #7]
 8005380:	429a      	cmp	r2, r3
 8005382:	d0b4      	beq.n	80052ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3718      	adds	r7, #24
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800538e:	b480      	push	{r7}
 8005390:	b095      	sub	sp, #84	@ 0x54
 8005392:	af00      	add	r7, sp, #0
 8005394:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	330c      	adds	r3, #12
 800539c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053a0:	e853 3f00 	ldrex	r3, [r3]
 80053a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	330c      	adds	r3, #12
 80053b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80053b6:	643a      	str	r2, [r7, #64]	@ 0x40
 80053b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80053bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053be:	e841 2300 	strex	r3, r2, [r1]
 80053c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1e5      	bne.n	8005396 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	3314      	adds	r3, #20
 80053d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	e853 3f00 	ldrex	r3, [r3]
 80053d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	f023 0301 	bic.w	r3, r3, #1
 80053e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	3314      	adds	r3, #20
 80053e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053f2:	e841 2300 	strex	r3, r2, [r1]
 80053f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1e5      	bne.n	80053ca <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005402:	2b01      	cmp	r3, #1
 8005404:	d119      	bne.n	800543a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	330c      	adds	r3, #12
 800540c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	e853 3f00 	ldrex	r3, [r3]
 8005414:	60bb      	str	r3, [r7, #8]
   return(result);
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	f023 0310 	bic.w	r3, r3, #16
 800541c:	647b      	str	r3, [r7, #68]	@ 0x44
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	330c      	adds	r3, #12
 8005424:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005426:	61ba      	str	r2, [r7, #24]
 8005428:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542a:	6979      	ldr	r1, [r7, #20]
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	e841 2300 	strex	r3, r2, [r1]
 8005432:	613b      	str	r3, [r7, #16]
   return(result);
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1e5      	bne.n	8005406 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2220      	movs	r2, #32
 800543e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005448:	bf00      	nop
 800544a:	3754      	adds	r7, #84	@ 0x54
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005458:	b0c0      	sub	sp, #256	@ 0x100
 800545a:	af00      	add	r7, sp, #0
 800545c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800546c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005470:	68d9      	ldr	r1, [r3, #12]
 8005472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	ea40 0301 	orr.w	r3, r0, r1
 800547c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800547e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	431a      	orrs	r2, r3
 800548c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	431a      	orrs	r2, r3
 8005494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005498:	69db      	ldr	r3, [r3, #28]
 800549a:	4313      	orrs	r3, r2
 800549c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80054a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80054ac:	f021 010c 	bic.w	r1, r1, #12
 80054b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80054ba:	430b      	orrs	r3, r1
 80054bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80054ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ce:	6999      	ldr	r1, [r3, #24]
 80054d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	ea40 0301 	orr.w	r3, r0, r1
 80054da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	4b8f      	ldr	r3, [pc, #572]	@ (8005720 <UART_SetConfig+0x2cc>)
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d005      	beq.n	80054f4 <UART_SetConfig+0xa0>
 80054e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	4b8d      	ldr	r3, [pc, #564]	@ (8005724 <UART_SetConfig+0x2d0>)
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d104      	bne.n	80054fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054f4:	f7fe fc5e 	bl	8003db4 <HAL_RCC_GetPCLK2Freq>
 80054f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80054fc:	e003      	b.n	8005506 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054fe:	f7fe fc45 	bl	8003d8c <HAL_RCC_GetPCLK1Freq>
 8005502:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800550a:	69db      	ldr	r3, [r3, #28]
 800550c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005510:	f040 810c 	bne.w	800572c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005514:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005518:	2200      	movs	r2, #0
 800551a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800551e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005522:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005526:	4622      	mov	r2, r4
 8005528:	462b      	mov	r3, r5
 800552a:	1891      	adds	r1, r2, r2
 800552c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800552e:	415b      	adcs	r3, r3
 8005530:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005532:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005536:	4621      	mov	r1, r4
 8005538:	eb12 0801 	adds.w	r8, r2, r1
 800553c:	4629      	mov	r1, r5
 800553e:	eb43 0901 	adc.w	r9, r3, r1
 8005542:	f04f 0200 	mov.w	r2, #0
 8005546:	f04f 0300 	mov.w	r3, #0
 800554a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800554e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005552:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005556:	4690      	mov	r8, r2
 8005558:	4699      	mov	r9, r3
 800555a:	4623      	mov	r3, r4
 800555c:	eb18 0303 	adds.w	r3, r8, r3
 8005560:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005564:	462b      	mov	r3, r5
 8005566:	eb49 0303 	adc.w	r3, r9, r3
 800556a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800556e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800557a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800557e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005582:	460b      	mov	r3, r1
 8005584:	18db      	adds	r3, r3, r3
 8005586:	653b      	str	r3, [r7, #80]	@ 0x50
 8005588:	4613      	mov	r3, r2
 800558a:	eb42 0303 	adc.w	r3, r2, r3
 800558e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005590:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005594:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005598:	f7fb f978 	bl	800088c <__aeabi_uldivmod>
 800559c:	4602      	mov	r2, r0
 800559e:	460b      	mov	r3, r1
 80055a0:	4b61      	ldr	r3, [pc, #388]	@ (8005728 <UART_SetConfig+0x2d4>)
 80055a2:	fba3 2302 	umull	r2, r3, r3, r2
 80055a6:	095b      	lsrs	r3, r3, #5
 80055a8:	011c      	lsls	r4, r3, #4
 80055aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055ae:	2200      	movs	r2, #0
 80055b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80055b4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80055b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80055bc:	4642      	mov	r2, r8
 80055be:	464b      	mov	r3, r9
 80055c0:	1891      	adds	r1, r2, r2
 80055c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80055c4:	415b      	adcs	r3, r3
 80055c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80055cc:	4641      	mov	r1, r8
 80055ce:	eb12 0a01 	adds.w	sl, r2, r1
 80055d2:	4649      	mov	r1, r9
 80055d4:	eb43 0b01 	adc.w	fp, r3, r1
 80055d8:	f04f 0200 	mov.w	r2, #0
 80055dc:	f04f 0300 	mov.w	r3, #0
 80055e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80055e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80055e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055ec:	4692      	mov	sl, r2
 80055ee:	469b      	mov	fp, r3
 80055f0:	4643      	mov	r3, r8
 80055f2:	eb1a 0303 	adds.w	r3, sl, r3
 80055f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80055fa:	464b      	mov	r3, r9
 80055fc:	eb4b 0303 	adc.w	r3, fp, r3
 8005600:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005610:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005614:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005618:	460b      	mov	r3, r1
 800561a:	18db      	adds	r3, r3, r3
 800561c:	643b      	str	r3, [r7, #64]	@ 0x40
 800561e:	4613      	mov	r3, r2
 8005620:	eb42 0303 	adc.w	r3, r2, r3
 8005624:	647b      	str	r3, [r7, #68]	@ 0x44
 8005626:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800562a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800562e:	f7fb f92d 	bl	800088c <__aeabi_uldivmod>
 8005632:	4602      	mov	r2, r0
 8005634:	460b      	mov	r3, r1
 8005636:	4611      	mov	r1, r2
 8005638:	4b3b      	ldr	r3, [pc, #236]	@ (8005728 <UART_SetConfig+0x2d4>)
 800563a:	fba3 2301 	umull	r2, r3, r3, r1
 800563e:	095b      	lsrs	r3, r3, #5
 8005640:	2264      	movs	r2, #100	@ 0x64
 8005642:	fb02 f303 	mul.w	r3, r2, r3
 8005646:	1acb      	subs	r3, r1, r3
 8005648:	00db      	lsls	r3, r3, #3
 800564a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800564e:	4b36      	ldr	r3, [pc, #216]	@ (8005728 <UART_SetConfig+0x2d4>)
 8005650:	fba3 2302 	umull	r2, r3, r3, r2
 8005654:	095b      	lsrs	r3, r3, #5
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800565c:	441c      	add	r4, r3
 800565e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005662:	2200      	movs	r2, #0
 8005664:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005668:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800566c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005670:	4642      	mov	r2, r8
 8005672:	464b      	mov	r3, r9
 8005674:	1891      	adds	r1, r2, r2
 8005676:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005678:	415b      	adcs	r3, r3
 800567a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800567c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005680:	4641      	mov	r1, r8
 8005682:	1851      	adds	r1, r2, r1
 8005684:	6339      	str	r1, [r7, #48]	@ 0x30
 8005686:	4649      	mov	r1, r9
 8005688:	414b      	adcs	r3, r1
 800568a:	637b      	str	r3, [r7, #52]	@ 0x34
 800568c:	f04f 0200 	mov.w	r2, #0
 8005690:	f04f 0300 	mov.w	r3, #0
 8005694:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005698:	4659      	mov	r1, fp
 800569a:	00cb      	lsls	r3, r1, #3
 800569c:	4651      	mov	r1, sl
 800569e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056a2:	4651      	mov	r1, sl
 80056a4:	00ca      	lsls	r2, r1, #3
 80056a6:	4610      	mov	r0, r2
 80056a8:	4619      	mov	r1, r3
 80056aa:	4603      	mov	r3, r0
 80056ac:	4642      	mov	r2, r8
 80056ae:	189b      	adds	r3, r3, r2
 80056b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056b4:	464b      	mov	r3, r9
 80056b6:	460a      	mov	r2, r1
 80056b8:	eb42 0303 	adc.w	r3, r2, r3
 80056bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80056cc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80056d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80056d4:	460b      	mov	r3, r1
 80056d6:	18db      	adds	r3, r3, r3
 80056d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056da:	4613      	mov	r3, r2
 80056dc:	eb42 0303 	adc.w	r3, r2, r3
 80056e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80056e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80056ea:	f7fb f8cf 	bl	800088c <__aeabi_uldivmod>
 80056ee:	4602      	mov	r2, r0
 80056f0:	460b      	mov	r3, r1
 80056f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005728 <UART_SetConfig+0x2d4>)
 80056f4:	fba3 1302 	umull	r1, r3, r3, r2
 80056f8:	095b      	lsrs	r3, r3, #5
 80056fa:	2164      	movs	r1, #100	@ 0x64
 80056fc:	fb01 f303 	mul.w	r3, r1, r3
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	00db      	lsls	r3, r3, #3
 8005704:	3332      	adds	r3, #50	@ 0x32
 8005706:	4a08      	ldr	r2, [pc, #32]	@ (8005728 <UART_SetConfig+0x2d4>)
 8005708:	fba2 2303 	umull	r2, r3, r2, r3
 800570c:	095b      	lsrs	r3, r3, #5
 800570e:	f003 0207 	and.w	r2, r3, #7
 8005712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4422      	add	r2, r4
 800571a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800571c:	e106      	b.n	800592c <UART_SetConfig+0x4d8>
 800571e:	bf00      	nop
 8005720:	40011000 	.word	0x40011000
 8005724:	40011400 	.word	0x40011400
 8005728:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800572c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005730:	2200      	movs	r2, #0
 8005732:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005736:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800573a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800573e:	4642      	mov	r2, r8
 8005740:	464b      	mov	r3, r9
 8005742:	1891      	adds	r1, r2, r2
 8005744:	6239      	str	r1, [r7, #32]
 8005746:	415b      	adcs	r3, r3
 8005748:	627b      	str	r3, [r7, #36]	@ 0x24
 800574a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800574e:	4641      	mov	r1, r8
 8005750:	1854      	adds	r4, r2, r1
 8005752:	4649      	mov	r1, r9
 8005754:	eb43 0501 	adc.w	r5, r3, r1
 8005758:	f04f 0200 	mov.w	r2, #0
 800575c:	f04f 0300 	mov.w	r3, #0
 8005760:	00eb      	lsls	r3, r5, #3
 8005762:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005766:	00e2      	lsls	r2, r4, #3
 8005768:	4614      	mov	r4, r2
 800576a:	461d      	mov	r5, r3
 800576c:	4643      	mov	r3, r8
 800576e:	18e3      	adds	r3, r4, r3
 8005770:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005774:	464b      	mov	r3, r9
 8005776:	eb45 0303 	adc.w	r3, r5, r3
 800577a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800577e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800578a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800578e:	f04f 0200 	mov.w	r2, #0
 8005792:	f04f 0300 	mov.w	r3, #0
 8005796:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800579a:	4629      	mov	r1, r5
 800579c:	008b      	lsls	r3, r1, #2
 800579e:	4621      	mov	r1, r4
 80057a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057a4:	4621      	mov	r1, r4
 80057a6:	008a      	lsls	r2, r1, #2
 80057a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80057ac:	f7fb f86e 	bl	800088c <__aeabi_uldivmod>
 80057b0:	4602      	mov	r2, r0
 80057b2:	460b      	mov	r3, r1
 80057b4:	4b60      	ldr	r3, [pc, #384]	@ (8005938 <UART_SetConfig+0x4e4>)
 80057b6:	fba3 2302 	umull	r2, r3, r3, r2
 80057ba:	095b      	lsrs	r3, r3, #5
 80057bc:	011c      	lsls	r4, r3, #4
 80057be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057c2:	2200      	movs	r2, #0
 80057c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80057c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80057cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80057d0:	4642      	mov	r2, r8
 80057d2:	464b      	mov	r3, r9
 80057d4:	1891      	adds	r1, r2, r2
 80057d6:	61b9      	str	r1, [r7, #24]
 80057d8:	415b      	adcs	r3, r3
 80057da:	61fb      	str	r3, [r7, #28]
 80057dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057e0:	4641      	mov	r1, r8
 80057e2:	1851      	adds	r1, r2, r1
 80057e4:	6139      	str	r1, [r7, #16]
 80057e6:	4649      	mov	r1, r9
 80057e8:	414b      	adcs	r3, r1
 80057ea:	617b      	str	r3, [r7, #20]
 80057ec:	f04f 0200 	mov.w	r2, #0
 80057f0:	f04f 0300 	mov.w	r3, #0
 80057f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057f8:	4659      	mov	r1, fp
 80057fa:	00cb      	lsls	r3, r1, #3
 80057fc:	4651      	mov	r1, sl
 80057fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005802:	4651      	mov	r1, sl
 8005804:	00ca      	lsls	r2, r1, #3
 8005806:	4610      	mov	r0, r2
 8005808:	4619      	mov	r1, r3
 800580a:	4603      	mov	r3, r0
 800580c:	4642      	mov	r2, r8
 800580e:	189b      	adds	r3, r3, r2
 8005810:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005814:	464b      	mov	r3, r9
 8005816:	460a      	mov	r2, r1
 8005818:	eb42 0303 	adc.w	r3, r2, r3
 800581c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	67bb      	str	r3, [r7, #120]	@ 0x78
 800582a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800582c:	f04f 0200 	mov.w	r2, #0
 8005830:	f04f 0300 	mov.w	r3, #0
 8005834:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005838:	4649      	mov	r1, r9
 800583a:	008b      	lsls	r3, r1, #2
 800583c:	4641      	mov	r1, r8
 800583e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005842:	4641      	mov	r1, r8
 8005844:	008a      	lsls	r2, r1, #2
 8005846:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800584a:	f7fb f81f 	bl	800088c <__aeabi_uldivmod>
 800584e:	4602      	mov	r2, r0
 8005850:	460b      	mov	r3, r1
 8005852:	4611      	mov	r1, r2
 8005854:	4b38      	ldr	r3, [pc, #224]	@ (8005938 <UART_SetConfig+0x4e4>)
 8005856:	fba3 2301 	umull	r2, r3, r3, r1
 800585a:	095b      	lsrs	r3, r3, #5
 800585c:	2264      	movs	r2, #100	@ 0x64
 800585e:	fb02 f303 	mul.w	r3, r2, r3
 8005862:	1acb      	subs	r3, r1, r3
 8005864:	011b      	lsls	r3, r3, #4
 8005866:	3332      	adds	r3, #50	@ 0x32
 8005868:	4a33      	ldr	r2, [pc, #204]	@ (8005938 <UART_SetConfig+0x4e4>)
 800586a:	fba2 2303 	umull	r2, r3, r2, r3
 800586e:	095b      	lsrs	r3, r3, #5
 8005870:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005874:	441c      	add	r4, r3
 8005876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800587a:	2200      	movs	r2, #0
 800587c:	673b      	str	r3, [r7, #112]	@ 0x70
 800587e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005880:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005884:	4642      	mov	r2, r8
 8005886:	464b      	mov	r3, r9
 8005888:	1891      	adds	r1, r2, r2
 800588a:	60b9      	str	r1, [r7, #8]
 800588c:	415b      	adcs	r3, r3
 800588e:	60fb      	str	r3, [r7, #12]
 8005890:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005894:	4641      	mov	r1, r8
 8005896:	1851      	adds	r1, r2, r1
 8005898:	6039      	str	r1, [r7, #0]
 800589a:	4649      	mov	r1, r9
 800589c:	414b      	adcs	r3, r1
 800589e:	607b      	str	r3, [r7, #4]
 80058a0:	f04f 0200 	mov.w	r2, #0
 80058a4:	f04f 0300 	mov.w	r3, #0
 80058a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80058ac:	4659      	mov	r1, fp
 80058ae:	00cb      	lsls	r3, r1, #3
 80058b0:	4651      	mov	r1, sl
 80058b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058b6:	4651      	mov	r1, sl
 80058b8:	00ca      	lsls	r2, r1, #3
 80058ba:	4610      	mov	r0, r2
 80058bc:	4619      	mov	r1, r3
 80058be:	4603      	mov	r3, r0
 80058c0:	4642      	mov	r2, r8
 80058c2:	189b      	adds	r3, r3, r2
 80058c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058c6:	464b      	mov	r3, r9
 80058c8:	460a      	mov	r2, r1
 80058ca:	eb42 0303 	adc.w	r3, r2, r3
 80058ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80058d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80058da:	667a      	str	r2, [r7, #100]	@ 0x64
 80058dc:	f04f 0200 	mov.w	r2, #0
 80058e0:	f04f 0300 	mov.w	r3, #0
 80058e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80058e8:	4649      	mov	r1, r9
 80058ea:	008b      	lsls	r3, r1, #2
 80058ec:	4641      	mov	r1, r8
 80058ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058f2:	4641      	mov	r1, r8
 80058f4:	008a      	lsls	r2, r1, #2
 80058f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80058fa:	f7fa ffc7 	bl	800088c <__aeabi_uldivmod>
 80058fe:	4602      	mov	r2, r0
 8005900:	460b      	mov	r3, r1
 8005902:	4b0d      	ldr	r3, [pc, #52]	@ (8005938 <UART_SetConfig+0x4e4>)
 8005904:	fba3 1302 	umull	r1, r3, r3, r2
 8005908:	095b      	lsrs	r3, r3, #5
 800590a:	2164      	movs	r1, #100	@ 0x64
 800590c:	fb01 f303 	mul.w	r3, r1, r3
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	011b      	lsls	r3, r3, #4
 8005914:	3332      	adds	r3, #50	@ 0x32
 8005916:	4a08      	ldr	r2, [pc, #32]	@ (8005938 <UART_SetConfig+0x4e4>)
 8005918:	fba2 2303 	umull	r2, r3, r2, r3
 800591c:	095b      	lsrs	r3, r3, #5
 800591e:	f003 020f 	and.w	r2, r3, #15
 8005922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4422      	add	r2, r4
 800592a:	609a      	str	r2, [r3, #8]
}
 800592c:	bf00      	nop
 800592e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005932:	46bd      	mov	sp, r7
 8005934:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005938:	51eb851f 	.word	0x51eb851f

0800593c <siprintf>:
 800593c:	b40e      	push	{r1, r2, r3}
 800593e:	b500      	push	{lr}
 8005940:	b09c      	sub	sp, #112	@ 0x70
 8005942:	ab1d      	add	r3, sp, #116	@ 0x74
 8005944:	9002      	str	r0, [sp, #8]
 8005946:	9006      	str	r0, [sp, #24]
 8005948:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800594c:	4809      	ldr	r0, [pc, #36]	@ (8005974 <siprintf+0x38>)
 800594e:	9107      	str	r1, [sp, #28]
 8005950:	9104      	str	r1, [sp, #16]
 8005952:	4909      	ldr	r1, [pc, #36]	@ (8005978 <siprintf+0x3c>)
 8005954:	f853 2b04 	ldr.w	r2, [r3], #4
 8005958:	9105      	str	r1, [sp, #20]
 800595a:	6800      	ldr	r0, [r0, #0]
 800595c:	9301      	str	r3, [sp, #4]
 800595e:	a902      	add	r1, sp, #8
 8005960:	f000 f9ac 	bl	8005cbc <_svfiprintf_r>
 8005964:	9b02      	ldr	r3, [sp, #8]
 8005966:	2200      	movs	r2, #0
 8005968:	701a      	strb	r2, [r3, #0]
 800596a:	b01c      	add	sp, #112	@ 0x70
 800596c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005970:	b003      	add	sp, #12
 8005972:	4770      	bx	lr
 8005974:	2000001c 	.word	0x2000001c
 8005978:	ffff0208 	.word	0xffff0208

0800597c <memset>:
 800597c:	4402      	add	r2, r0
 800597e:	4603      	mov	r3, r0
 8005980:	4293      	cmp	r3, r2
 8005982:	d100      	bne.n	8005986 <memset+0xa>
 8005984:	4770      	bx	lr
 8005986:	f803 1b01 	strb.w	r1, [r3], #1
 800598a:	e7f9      	b.n	8005980 <memset+0x4>

0800598c <strcat>:
 800598c:	b510      	push	{r4, lr}
 800598e:	4602      	mov	r2, r0
 8005990:	7814      	ldrb	r4, [r2, #0]
 8005992:	4613      	mov	r3, r2
 8005994:	3201      	adds	r2, #1
 8005996:	2c00      	cmp	r4, #0
 8005998:	d1fa      	bne.n	8005990 <strcat+0x4>
 800599a:	3b01      	subs	r3, #1
 800599c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059a0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059a4:	2a00      	cmp	r2, #0
 80059a6:	d1f9      	bne.n	800599c <strcat+0x10>
 80059a8:	bd10      	pop	{r4, pc}
	...

080059ac <__errno>:
 80059ac:	4b01      	ldr	r3, [pc, #4]	@ (80059b4 <__errno+0x8>)
 80059ae:	6818      	ldr	r0, [r3, #0]
 80059b0:	4770      	bx	lr
 80059b2:	bf00      	nop
 80059b4:	2000001c 	.word	0x2000001c

080059b8 <__libc_init_array>:
 80059b8:	b570      	push	{r4, r5, r6, lr}
 80059ba:	4d0d      	ldr	r5, [pc, #52]	@ (80059f0 <__libc_init_array+0x38>)
 80059bc:	4c0d      	ldr	r4, [pc, #52]	@ (80059f4 <__libc_init_array+0x3c>)
 80059be:	1b64      	subs	r4, r4, r5
 80059c0:	10a4      	asrs	r4, r4, #2
 80059c2:	2600      	movs	r6, #0
 80059c4:	42a6      	cmp	r6, r4
 80059c6:	d109      	bne.n	80059dc <__libc_init_array+0x24>
 80059c8:	4d0b      	ldr	r5, [pc, #44]	@ (80059f8 <__libc_init_array+0x40>)
 80059ca:	4c0c      	ldr	r4, [pc, #48]	@ (80059fc <__libc_init_array+0x44>)
 80059cc:	f000 fc6e 	bl	80062ac <_init>
 80059d0:	1b64      	subs	r4, r4, r5
 80059d2:	10a4      	asrs	r4, r4, #2
 80059d4:	2600      	movs	r6, #0
 80059d6:	42a6      	cmp	r6, r4
 80059d8:	d105      	bne.n	80059e6 <__libc_init_array+0x2e>
 80059da:	bd70      	pop	{r4, r5, r6, pc}
 80059dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80059e0:	4798      	blx	r3
 80059e2:	3601      	adds	r6, #1
 80059e4:	e7ee      	b.n	80059c4 <__libc_init_array+0xc>
 80059e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ea:	4798      	blx	r3
 80059ec:	3601      	adds	r6, #1
 80059ee:	e7f2      	b.n	80059d6 <__libc_init_array+0x1e>
 80059f0:	08006368 	.word	0x08006368
 80059f4:	08006368 	.word	0x08006368
 80059f8:	08006368 	.word	0x08006368
 80059fc:	0800636c 	.word	0x0800636c

08005a00 <__retarget_lock_acquire_recursive>:
 8005a00:	4770      	bx	lr

08005a02 <__retarget_lock_release_recursive>:
 8005a02:	4770      	bx	lr

08005a04 <strcpy>:
 8005a04:	4603      	mov	r3, r0
 8005a06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a0a:	f803 2b01 	strb.w	r2, [r3], #1
 8005a0e:	2a00      	cmp	r2, #0
 8005a10:	d1f9      	bne.n	8005a06 <strcpy+0x2>
 8005a12:	4770      	bx	lr

08005a14 <_free_r>:
 8005a14:	b538      	push	{r3, r4, r5, lr}
 8005a16:	4605      	mov	r5, r0
 8005a18:	2900      	cmp	r1, #0
 8005a1a:	d041      	beq.n	8005aa0 <_free_r+0x8c>
 8005a1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a20:	1f0c      	subs	r4, r1, #4
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	bfb8      	it	lt
 8005a26:	18e4      	addlt	r4, r4, r3
 8005a28:	f000 f8e0 	bl	8005bec <__malloc_lock>
 8005a2c:	4a1d      	ldr	r2, [pc, #116]	@ (8005aa4 <_free_r+0x90>)
 8005a2e:	6813      	ldr	r3, [r2, #0]
 8005a30:	b933      	cbnz	r3, 8005a40 <_free_r+0x2c>
 8005a32:	6063      	str	r3, [r4, #4]
 8005a34:	6014      	str	r4, [r2, #0]
 8005a36:	4628      	mov	r0, r5
 8005a38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a3c:	f000 b8dc 	b.w	8005bf8 <__malloc_unlock>
 8005a40:	42a3      	cmp	r3, r4
 8005a42:	d908      	bls.n	8005a56 <_free_r+0x42>
 8005a44:	6820      	ldr	r0, [r4, #0]
 8005a46:	1821      	adds	r1, r4, r0
 8005a48:	428b      	cmp	r3, r1
 8005a4a:	bf01      	itttt	eq
 8005a4c:	6819      	ldreq	r1, [r3, #0]
 8005a4e:	685b      	ldreq	r3, [r3, #4]
 8005a50:	1809      	addeq	r1, r1, r0
 8005a52:	6021      	streq	r1, [r4, #0]
 8005a54:	e7ed      	b.n	8005a32 <_free_r+0x1e>
 8005a56:	461a      	mov	r2, r3
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	b10b      	cbz	r3, 8005a60 <_free_r+0x4c>
 8005a5c:	42a3      	cmp	r3, r4
 8005a5e:	d9fa      	bls.n	8005a56 <_free_r+0x42>
 8005a60:	6811      	ldr	r1, [r2, #0]
 8005a62:	1850      	adds	r0, r2, r1
 8005a64:	42a0      	cmp	r0, r4
 8005a66:	d10b      	bne.n	8005a80 <_free_r+0x6c>
 8005a68:	6820      	ldr	r0, [r4, #0]
 8005a6a:	4401      	add	r1, r0
 8005a6c:	1850      	adds	r0, r2, r1
 8005a6e:	4283      	cmp	r3, r0
 8005a70:	6011      	str	r1, [r2, #0]
 8005a72:	d1e0      	bne.n	8005a36 <_free_r+0x22>
 8005a74:	6818      	ldr	r0, [r3, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	6053      	str	r3, [r2, #4]
 8005a7a:	4408      	add	r0, r1
 8005a7c:	6010      	str	r0, [r2, #0]
 8005a7e:	e7da      	b.n	8005a36 <_free_r+0x22>
 8005a80:	d902      	bls.n	8005a88 <_free_r+0x74>
 8005a82:	230c      	movs	r3, #12
 8005a84:	602b      	str	r3, [r5, #0]
 8005a86:	e7d6      	b.n	8005a36 <_free_r+0x22>
 8005a88:	6820      	ldr	r0, [r4, #0]
 8005a8a:	1821      	adds	r1, r4, r0
 8005a8c:	428b      	cmp	r3, r1
 8005a8e:	bf04      	itt	eq
 8005a90:	6819      	ldreq	r1, [r3, #0]
 8005a92:	685b      	ldreq	r3, [r3, #4]
 8005a94:	6063      	str	r3, [r4, #4]
 8005a96:	bf04      	itt	eq
 8005a98:	1809      	addeq	r1, r1, r0
 8005a9a:	6021      	streq	r1, [r4, #0]
 8005a9c:	6054      	str	r4, [r2, #4]
 8005a9e:	e7ca      	b.n	8005a36 <_free_r+0x22>
 8005aa0:	bd38      	pop	{r3, r4, r5, pc}
 8005aa2:	bf00      	nop
 8005aa4:	20000400 	.word	0x20000400

08005aa8 <sbrk_aligned>:
 8005aa8:	b570      	push	{r4, r5, r6, lr}
 8005aaa:	4e0f      	ldr	r6, [pc, #60]	@ (8005ae8 <sbrk_aligned+0x40>)
 8005aac:	460c      	mov	r4, r1
 8005aae:	6831      	ldr	r1, [r6, #0]
 8005ab0:	4605      	mov	r5, r0
 8005ab2:	b911      	cbnz	r1, 8005aba <sbrk_aligned+0x12>
 8005ab4:	f000 fba6 	bl	8006204 <_sbrk_r>
 8005ab8:	6030      	str	r0, [r6, #0]
 8005aba:	4621      	mov	r1, r4
 8005abc:	4628      	mov	r0, r5
 8005abe:	f000 fba1 	bl	8006204 <_sbrk_r>
 8005ac2:	1c43      	adds	r3, r0, #1
 8005ac4:	d103      	bne.n	8005ace <sbrk_aligned+0x26>
 8005ac6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005aca:	4620      	mov	r0, r4
 8005acc:	bd70      	pop	{r4, r5, r6, pc}
 8005ace:	1cc4      	adds	r4, r0, #3
 8005ad0:	f024 0403 	bic.w	r4, r4, #3
 8005ad4:	42a0      	cmp	r0, r4
 8005ad6:	d0f8      	beq.n	8005aca <sbrk_aligned+0x22>
 8005ad8:	1a21      	subs	r1, r4, r0
 8005ada:	4628      	mov	r0, r5
 8005adc:	f000 fb92 	bl	8006204 <_sbrk_r>
 8005ae0:	3001      	adds	r0, #1
 8005ae2:	d1f2      	bne.n	8005aca <sbrk_aligned+0x22>
 8005ae4:	e7ef      	b.n	8005ac6 <sbrk_aligned+0x1e>
 8005ae6:	bf00      	nop
 8005ae8:	200003fc 	.word	0x200003fc

08005aec <_malloc_r>:
 8005aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005af0:	1ccd      	adds	r5, r1, #3
 8005af2:	f025 0503 	bic.w	r5, r5, #3
 8005af6:	3508      	adds	r5, #8
 8005af8:	2d0c      	cmp	r5, #12
 8005afa:	bf38      	it	cc
 8005afc:	250c      	movcc	r5, #12
 8005afe:	2d00      	cmp	r5, #0
 8005b00:	4606      	mov	r6, r0
 8005b02:	db01      	blt.n	8005b08 <_malloc_r+0x1c>
 8005b04:	42a9      	cmp	r1, r5
 8005b06:	d904      	bls.n	8005b12 <_malloc_r+0x26>
 8005b08:	230c      	movs	r3, #12
 8005b0a:	6033      	str	r3, [r6, #0]
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b12:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005be8 <_malloc_r+0xfc>
 8005b16:	f000 f869 	bl	8005bec <__malloc_lock>
 8005b1a:	f8d8 3000 	ldr.w	r3, [r8]
 8005b1e:	461c      	mov	r4, r3
 8005b20:	bb44      	cbnz	r4, 8005b74 <_malloc_r+0x88>
 8005b22:	4629      	mov	r1, r5
 8005b24:	4630      	mov	r0, r6
 8005b26:	f7ff ffbf 	bl	8005aa8 <sbrk_aligned>
 8005b2a:	1c43      	adds	r3, r0, #1
 8005b2c:	4604      	mov	r4, r0
 8005b2e:	d158      	bne.n	8005be2 <_malloc_r+0xf6>
 8005b30:	f8d8 4000 	ldr.w	r4, [r8]
 8005b34:	4627      	mov	r7, r4
 8005b36:	2f00      	cmp	r7, #0
 8005b38:	d143      	bne.n	8005bc2 <_malloc_r+0xd6>
 8005b3a:	2c00      	cmp	r4, #0
 8005b3c:	d04b      	beq.n	8005bd6 <_malloc_r+0xea>
 8005b3e:	6823      	ldr	r3, [r4, #0]
 8005b40:	4639      	mov	r1, r7
 8005b42:	4630      	mov	r0, r6
 8005b44:	eb04 0903 	add.w	r9, r4, r3
 8005b48:	f000 fb5c 	bl	8006204 <_sbrk_r>
 8005b4c:	4581      	cmp	r9, r0
 8005b4e:	d142      	bne.n	8005bd6 <_malloc_r+0xea>
 8005b50:	6821      	ldr	r1, [r4, #0]
 8005b52:	1a6d      	subs	r5, r5, r1
 8005b54:	4629      	mov	r1, r5
 8005b56:	4630      	mov	r0, r6
 8005b58:	f7ff ffa6 	bl	8005aa8 <sbrk_aligned>
 8005b5c:	3001      	adds	r0, #1
 8005b5e:	d03a      	beq.n	8005bd6 <_malloc_r+0xea>
 8005b60:	6823      	ldr	r3, [r4, #0]
 8005b62:	442b      	add	r3, r5
 8005b64:	6023      	str	r3, [r4, #0]
 8005b66:	f8d8 3000 	ldr.w	r3, [r8]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	bb62      	cbnz	r2, 8005bc8 <_malloc_r+0xdc>
 8005b6e:	f8c8 7000 	str.w	r7, [r8]
 8005b72:	e00f      	b.n	8005b94 <_malloc_r+0xa8>
 8005b74:	6822      	ldr	r2, [r4, #0]
 8005b76:	1b52      	subs	r2, r2, r5
 8005b78:	d420      	bmi.n	8005bbc <_malloc_r+0xd0>
 8005b7a:	2a0b      	cmp	r2, #11
 8005b7c:	d917      	bls.n	8005bae <_malloc_r+0xc2>
 8005b7e:	1961      	adds	r1, r4, r5
 8005b80:	42a3      	cmp	r3, r4
 8005b82:	6025      	str	r5, [r4, #0]
 8005b84:	bf18      	it	ne
 8005b86:	6059      	strne	r1, [r3, #4]
 8005b88:	6863      	ldr	r3, [r4, #4]
 8005b8a:	bf08      	it	eq
 8005b8c:	f8c8 1000 	streq.w	r1, [r8]
 8005b90:	5162      	str	r2, [r4, r5]
 8005b92:	604b      	str	r3, [r1, #4]
 8005b94:	4630      	mov	r0, r6
 8005b96:	f000 f82f 	bl	8005bf8 <__malloc_unlock>
 8005b9a:	f104 000b 	add.w	r0, r4, #11
 8005b9e:	1d23      	adds	r3, r4, #4
 8005ba0:	f020 0007 	bic.w	r0, r0, #7
 8005ba4:	1ac2      	subs	r2, r0, r3
 8005ba6:	bf1c      	itt	ne
 8005ba8:	1a1b      	subne	r3, r3, r0
 8005baa:	50a3      	strne	r3, [r4, r2]
 8005bac:	e7af      	b.n	8005b0e <_malloc_r+0x22>
 8005bae:	6862      	ldr	r2, [r4, #4]
 8005bb0:	42a3      	cmp	r3, r4
 8005bb2:	bf0c      	ite	eq
 8005bb4:	f8c8 2000 	streq.w	r2, [r8]
 8005bb8:	605a      	strne	r2, [r3, #4]
 8005bba:	e7eb      	b.n	8005b94 <_malloc_r+0xa8>
 8005bbc:	4623      	mov	r3, r4
 8005bbe:	6864      	ldr	r4, [r4, #4]
 8005bc0:	e7ae      	b.n	8005b20 <_malloc_r+0x34>
 8005bc2:	463c      	mov	r4, r7
 8005bc4:	687f      	ldr	r7, [r7, #4]
 8005bc6:	e7b6      	b.n	8005b36 <_malloc_r+0x4a>
 8005bc8:	461a      	mov	r2, r3
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	42a3      	cmp	r3, r4
 8005bce:	d1fb      	bne.n	8005bc8 <_malloc_r+0xdc>
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	6053      	str	r3, [r2, #4]
 8005bd4:	e7de      	b.n	8005b94 <_malloc_r+0xa8>
 8005bd6:	230c      	movs	r3, #12
 8005bd8:	6033      	str	r3, [r6, #0]
 8005bda:	4630      	mov	r0, r6
 8005bdc:	f000 f80c 	bl	8005bf8 <__malloc_unlock>
 8005be0:	e794      	b.n	8005b0c <_malloc_r+0x20>
 8005be2:	6005      	str	r5, [r0, #0]
 8005be4:	e7d6      	b.n	8005b94 <_malloc_r+0xa8>
 8005be6:	bf00      	nop
 8005be8:	20000400 	.word	0x20000400

08005bec <__malloc_lock>:
 8005bec:	4801      	ldr	r0, [pc, #4]	@ (8005bf4 <__malloc_lock+0x8>)
 8005bee:	f7ff bf07 	b.w	8005a00 <__retarget_lock_acquire_recursive>
 8005bf2:	bf00      	nop
 8005bf4:	200003f8 	.word	0x200003f8

08005bf8 <__malloc_unlock>:
 8005bf8:	4801      	ldr	r0, [pc, #4]	@ (8005c00 <__malloc_unlock+0x8>)
 8005bfa:	f7ff bf02 	b.w	8005a02 <__retarget_lock_release_recursive>
 8005bfe:	bf00      	nop
 8005c00:	200003f8 	.word	0x200003f8

08005c04 <__ssputs_r>:
 8005c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c08:	688e      	ldr	r6, [r1, #8]
 8005c0a:	461f      	mov	r7, r3
 8005c0c:	42be      	cmp	r6, r7
 8005c0e:	680b      	ldr	r3, [r1, #0]
 8005c10:	4682      	mov	sl, r0
 8005c12:	460c      	mov	r4, r1
 8005c14:	4690      	mov	r8, r2
 8005c16:	d82d      	bhi.n	8005c74 <__ssputs_r+0x70>
 8005c18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005c20:	d026      	beq.n	8005c70 <__ssputs_r+0x6c>
 8005c22:	6965      	ldr	r5, [r4, #20]
 8005c24:	6909      	ldr	r1, [r1, #16]
 8005c26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c2a:	eba3 0901 	sub.w	r9, r3, r1
 8005c2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c32:	1c7b      	adds	r3, r7, #1
 8005c34:	444b      	add	r3, r9
 8005c36:	106d      	asrs	r5, r5, #1
 8005c38:	429d      	cmp	r5, r3
 8005c3a:	bf38      	it	cc
 8005c3c:	461d      	movcc	r5, r3
 8005c3e:	0553      	lsls	r3, r2, #21
 8005c40:	d527      	bpl.n	8005c92 <__ssputs_r+0x8e>
 8005c42:	4629      	mov	r1, r5
 8005c44:	f7ff ff52 	bl	8005aec <_malloc_r>
 8005c48:	4606      	mov	r6, r0
 8005c4a:	b360      	cbz	r0, 8005ca6 <__ssputs_r+0xa2>
 8005c4c:	6921      	ldr	r1, [r4, #16]
 8005c4e:	464a      	mov	r2, r9
 8005c50:	f000 fae8 	bl	8006224 <memcpy>
 8005c54:	89a3      	ldrh	r3, [r4, #12]
 8005c56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005c5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c5e:	81a3      	strh	r3, [r4, #12]
 8005c60:	6126      	str	r6, [r4, #16]
 8005c62:	6165      	str	r5, [r4, #20]
 8005c64:	444e      	add	r6, r9
 8005c66:	eba5 0509 	sub.w	r5, r5, r9
 8005c6a:	6026      	str	r6, [r4, #0]
 8005c6c:	60a5      	str	r5, [r4, #8]
 8005c6e:	463e      	mov	r6, r7
 8005c70:	42be      	cmp	r6, r7
 8005c72:	d900      	bls.n	8005c76 <__ssputs_r+0x72>
 8005c74:	463e      	mov	r6, r7
 8005c76:	6820      	ldr	r0, [r4, #0]
 8005c78:	4632      	mov	r2, r6
 8005c7a:	4641      	mov	r1, r8
 8005c7c:	f000 faa8 	bl	80061d0 <memmove>
 8005c80:	68a3      	ldr	r3, [r4, #8]
 8005c82:	1b9b      	subs	r3, r3, r6
 8005c84:	60a3      	str	r3, [r4, #8]
 8005c86:	6823      	ldr	r3, [r4, #0]
 8005c88:	4433      	add	r3, r6
 8005c8a:	6023      	str	r3, [r4, #0]
 8005c8c:	2000      	movs	r0, #0
 8005c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c92:	462a      	mov	r2, r5
 8005c94:	f000 fad4 	bl	8006240 <_realloc_r>
 8005c98:	4606      	mov	r6, r0
 8005c9a:	2800      	cmp	r0, #0
 8005c9c:	d1e0      	bne.n	8005c60 <__ssputs_r+0x5c>
 8005c9e:	6921      	ldr	r1, [r4, #16]
 8005ca0:	4650      	mov	r0, sl
 8005ca2:	f7ff feb7 	bl	8005a14 <_free_r>
 8005ca6:	230c      	movs	r3, #12
 8005ca8:	f8ca 3000 	str.w	r3, [sl]
 8005cac:	89a3      	ldrh	r3, [r4, #12]
 8005cae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cb2:	81a3      	strh	r3, [r4, #12]
 8005cb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005cb8:	e7e9      	b.n	8005c8e <__ssputs_r+0x8a>
	...

08005cbc <_svfiprintf_r>:
 8005cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc0:	4698      	mov	r8, r3
 8005cc2:	898b      	ldrh	r3, [r1, #12]
 8005cc4:	061b      	lsls	r3, r3, #24
 8005cc6:	b09d      	sub	sp, #116	@ 0x74
 8005cc8:	4607      	mov	r7, r0
 8005cca:	460d      	mov	r5, r1
 8005ccc:	4614      	mov	r4, r2
 8005cce:	d510      	bpl.n	8005cf2 <_svfiprintf_r+0x36>
 8005cd0:	690b      	ldr	r3, [r1, #16]
 8005cd2:	b973      	cbnz	r3, 8005cf2 <_svfiprintf_r+0x36>
 8005cd4:	2140      	movs	r1, #64	@ 0x40
 8005cd6:	f7ff ff09 	bl	8005aec <_malloc_r>
 8005cda:	6028      	str	r0, [r5, #0]
 8005cdc:	6128      	str	r0, [r5, #16]
 8005cde:	b930      	cbnz	r0, 8005cee <_svfiprintf_r+0x32>
 8005ce0:	230c      	movs	r3, #12
 8005ce2:	603b      	str	r3, [r7, #0]
 8005ce4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005ce8:	b01d      	add	sp, #116	@ 0x74
 8005cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cee:	2340      	movs	r3, #64	@ 0x40
 8005cf0:	616b      	str	r3, [r5, #20]
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cf6:	2320      	movs	r3, #32
 8005cf8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005cfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d00:	2330      	movs	r3, #48	@ 0x30
 8005d02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005ea0 <_svfiprintf_r+0x1e4>
 8005d06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d0a:	f04f 0901 	mov.w	r9, #1
 8005d0e:	4623      	mov	r3, r4
 8005d10:	469a      	mov	sl, r3
 8005d12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d16:	b10a      	cbz	r2, 8005d1c <_svfiprintf_r+0x60>
 8005d18:	2a25      	cmp	r2, #37	@ 0x25
 8005d1a:	d1f9      	bne.n	8005d10 <_svfiprintf_r+0x54>
 8005d1c:	ebba 0b04 	subs.w	fp, sl, r4
 8005d20:	d00b      	beq.n	8005d3a <_svfiprintf_r+0x7e>
 8005d22:	465b      	mov	r3, fp
 8005d24:	4622      	mov	r2, r4
 8005d26:	4629      	mov	r1, r5
 8005d28:	4638      	mov	r0, r7
 8005d2a:	f7ff ff6b 	bl	8005c04 <__ssputs_r>
 8005d2e:	3001      	adds	r0, #1
 8005d30:	f000 80a7 	beq.w	8005e82 <_svfiprintf_r+0x1c6>
 8005d34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d36:	445a      	add	r2, fp
 8005d38:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d3a:	f89a 3000 	ldrb.w	r3, [sl]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f000 809f 	beq.w	8005e82 <_svfiprintf_r+0x1c6>
 8005d44:	2300      	movs	r3, #0
 8005d46:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005d4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d4e:	f10a 0a01 	add.w	sl, sl, #1
 8005d52:	9304      	str	r3, [sp, #16]
 8005d54:	9307      	str	r3, [sp, #28]
 8005d56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d5a:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d5c:	4654      	mov	r4, sl
 8005d5e:	2205      	movs	r2, #5
 8005d60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d64:	484e      	ldr	r0, [pc, #312]	@ (8005ea0 <_svfiprintf_r+0x1e4>)
 8005d66:	f7fa fa3b 	bl	80001e0 <memchr>
 8005d6a:	9a04      	ldr	r2, [sp, #16]
 8005d6c:	b9d8      	cbnz	r0, 8005da6 <_svfiprintf_r+0xea>
 8005d6e:	06d0      	lsls	r0, r2, #27
 8005d70:	bf44      	itt	mi
 8005d72:	2320      	movmi	r3, #32
 8005d74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d78:	0711      	lsls	r1, r2, #28
 8005d7a:	bf44      	itt	mi
 8005d7c:	232b      	movmi	r3, #43	@ 0x2b
 8005d7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d82:	f89a 3000 	ldrb.w	r3, [sl]
 8005d86:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d88:	d015      	beq.n	8005db6 <_svfiprintf_r+0xfa>
 8005d8a:	9a07      	ldr	r2, [sp, #28]
 8005d8c:	4654      	mov	r4, sl
 8005d8e:	2000      	movs	r0, #0
 8005d90:	f04f 0c0a 	mov.w	ip, #10
 8005d94:	4621      	mov	r1, r4
 8005d96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d9a:	3b30      	subs	r3, #48	@ 0x30
 8005d9c:	2b09      	cmp	r3, #9
 8005d9e:	d94b      	bls.n	8005e38 <_svfiprintf_r+0x17c>
 8005da0:	b1b0      	cbz	r0, 8005dd0 <_svfiprintf_r+0x114>
 8005da2:	9207      	str	r2, [sp, #28]
 8005da4:	e014      	b.n	8005dd0 <_svfiprintf_r+0x114>
 8005da6:	eba0 0308 	sub.w	r3, r0, r8
 8005daa:	fa09 f303 	lsl.w	r3, r9, r3
 8005dae:	4313      	orrs	r3, r2
 8005db0:	9304      	str	r3, [sp, #16]
 8005db2:	46a2      	mov	sl, r4
 8005db4:	e7d2      	b.n	8005d5c <_svfiprintf_r+0xa0>
 8005db6:	9b03      	ldr	r3, [sp, #12]
 8005db8:	1d19      	adds	r1, r3, #4
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	9103      	str	r1, [sp, #12]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	bfbb      	ittet	lt
 8005dc2:	425b      	neglt	r3, r3
 8005dc4:	f042 0202 	orrlt.w	r2, r2, #2
 8005dc8:	9307      	strge	r3, [sp, #28]
 8005dca:	9307      	strlt	r3, [sp, #28]
 8005dcc:	bfb8      	it	lt
 8005dce:	9204      	strlt	r2, [sp, #16]
 8005dd0:	7823      	ldrb	r3, [r4, #0]
 8005dd2:	2b2e      	cmp	r3, #46	@ 0x2e
 8005dd4:	d10a      	bne.n	8005dec <_svfiprintf_r+0x130>
 8005dd6:	7863      	ldrb	r3, [r4, #1]
 8005dd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dda:	d132      	bne.n	8005e42 <_svfiprintf_r+0x186>
 8005ddc:	9b03      	ldr	r3, [sp, #12]
 8005dde:	1d1a      	adds	r2, r3, #4
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	9203      	str	r2, [sp, #12]
 8005de4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005de8:	3402      	adds	r4, #2
 8005dea:	9305      	str	r3, [sp, #20]
 8005dec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005eb0 <_svfiprintf_r+0x1f4>
 8005df0:	7821      	ldrb	r1, [r4, #0]
 8005df2:	2203      	movs	r2, #3
 8005df4:	4650      	mov	r0, sl
 8005df6:	f7fa f9f3 	bl	80001e0 <memchr>
 8005dfa:	b138      	cbz	r0, 8005e0c <_svfiprintf_r+0x150>
 8005dfc:	9b04      	ldr	r3, [sp, #16]
 8005dfe:	eba0 000a 	sub.w	r0, r0, sl
 8005e02:	2240      	movs	r2, #64	@ 0x40
 8005e04:	4082      	lsls	r2, r0
 8005e06:	4313      	orrs	r3, r2
 8005e08:	3401      	adds	r4, #1
 8005e0a:	9304      	str	r3, [sp, #16]
 8005e0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e10:	4824      	ldr	r0, [pc, #144]	@ (8005ea4 <_svfiprintf_r+0x1e8>)
 8005e12:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e16:	2206      	movs	r2, #6
 8005e18:	f7fa f9e2 	bl	80001e0 <memchr>
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	d036      	beq.n	8005e8e <_svfiprintf_r+0x1d2>
 8005e20:	4b21      	ldr	r3, [pc, #132]	@ (8005ea8 <_svfiprintf_r+0x1ec>)
 8005e22:	bb1b      	cbnz	r3, 8005e6c <_svfiprintf_r+0x1b0>
 8005e24:	9b03      	ldr	r3, [sp, #12]
 8005e26:	3307      	adds	r3, #7
 8005e28:	f023 0307 	bic.w	r3, r3, #7
 8005e2c:	3308      	adds	r3, #8
 8005e2e:	9303      	str	r3, [sp, #12]
 8005e30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e32:	4433      	add	r3, r6
 8005e34:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e36:	e76a      	b.n	8005d0e <_svfiprintf_r+0x52>
 8005e38:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e3c:	460c      	mov	r4, r1
 8005e3e:	2001      	movs	r0, #1
 8005e40:	e7a8      	b.n	8005d94 <_svfiprintf_r+0xd8>
 8005e42:	2300      	movs	r3, #0
 8005e44:	3401      	adds	r4, #1
 8005e46:	9305      	str	r3, [sp, #20]
 8005e48:	4619      	mov	r1, r3
 8005e4a:	f04f 0c0a 	mov.w	ip, #10
 8005e4e:	4620      	mov	r0, r4
 8005e50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e54:	3a30      	subs	r2, #48	@ 0x30
 8005e56:	2a09      	cmp	r2, #9
 8005e58:	d903      	bls.n	8005e62 <_svfiprintf_r+0x1a6>
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d0c6      	beq.n	8005dec <_svfiprintf_r+0x130>
 8005e5e:	9105      	str	r1, [sp, #20]
 8005e60:	e7c4      	b.n	8005dec <_svfiprintf_r+0x130>
 8005e62:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e66:	4604      	mov	r4, r0
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e7f0      	b.n	8005e4e <_svfiprintf_r+0x192>
 8005e6c:	ab03      	add	r3, sp, #12
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	462a      	mov	r2, r5
 8005e72:	4b0e      	ldr	r3, [pc, #56]	@ (8005eac <_svfiprintf_r+0x1f0>)
 8005e74:	a904      	add	r1, sp, #16
 8005e76:	4638      	mov	r0, r7
 8005e78:	f3af 8000 	nop.w
 8005e7c:	1c42      	adds	r2, r0, #1
 8005e7e:	4606      	mov	r6, r0
 8005e80:	d1d6      	bne.n	8005e30 <_svfiprintf_r+0x174>
 8005e82:	89ab      	ldrh	r3, [r5, #12]
 8005e84:	065b      	lsls	r3, r3, #25
 8005e86:	f53f af2d 	bmi.w	8005ce4 <_svfiprintf_r+0x28>
 8005e8a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e8c:	e72c      	b.n	8005ce8 <_svfiprintf_r+0x2c>
 8005e8e:	ab03      	add	r3, sp, #12
 8005e90:	9300      	str	r3, [sp, #0]
 8005e92:	462a      	mov	r2, r5
 8005e94:	4b05      	ldr	r3, [pc, #20]	@ (8005eac <_svfiprintf_r+0x1f0>)
 8005e96:	a904      	add	r1, sp, #16
 8005e98:	4638      	mov	r0, r7
 8005e9a:	f000 f879 	bl	8005f90 <_printf_i>
 8005e9e:	e7ed      	b.n	8005e7c <_svfiprintf_r+0x1c0>
 8005ea0:	0800632c 	.word	0x0800632c
 8005ea4:	08006336 	.word	0x08006336
 8005ea8:	00000000 	.word	0x00000000
 8005eac:	08005c05 	.word	0x08005c05
 8005eb0:	08006332 	.word	0x08006332

08005eb4 <_printf_common>:
 8005eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005eb8:	4616      	mov	r6, r2
 8005eba:	4698      	mov	r8, r3
 8005ebc:	688a      	ldr	r2, [r1, #8]
 8005ebe:	690b      	ldr	r3, [r1, #16]
 8005ec0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	bfb8      	it	lt
 8005ec8:	4613      	movlt	r3, r2
 8005eca:	6033      	str	r3, [r6, #0]
 8005ecc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ed0:	4607      	mov	r7, r0
 8005ed2:	460c      	mov	r4, r1
 8005ed4:	b10a      	cbz	r2, 8005eda <_printf_common+0x26>
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	6033      	str	r3, [r6, #0]
 8005eda:	6823      	ldr	r3, [r4, #0]
 8005edc:	0699      	lsls	r1, r3, #26
 8005ede:	bf42      	ittt	mi
 8005ee0:	6833      	ldrmi	r3, [r6, #0]
 8005ee2:	3302      	addmi	r3, #2
 8005ee4:	6033      	strmi	r3, [r6, #0]
 8005ee6:	6825      	ldr	r5, [r4, #0]
 8005ee8:	f015 0506 	ands.w	r5, r5, #6
 8005eec:	d106      	bne.n	8005efc <_printf_common+0x48>
 8005eee:	f104 0a19 	add.w	sl, r4, #25
 8005ef2:	68e3      	ldr	r3, [r4, #12]
 8005ef4:	6832      	ldr	r2, [r6, #0]
 8005ef6:	1a9b      	subs	r3, r3, r2
 8005ef8:	42ab      	cmp	r3, r5
 8005efa:	dc26      	bgt.n	8005f4a <_printf_common+0x96>
 8005efc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f00:	6822      	ldr	r2, [r4, #0]
 8005f02:	3b00      	subs	r3, #0
 8005f04:	bf18      	it	ne
 8005f06:	2301      	movne	r3, #1
 8005f08:	0692      	lsls	r2, r2, #26
 8005f0a:	d42b      	bmi.n	8005f64 <_printf_common+0xb0>
 8005f0c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f10:	4641      	mov	r1, r8
 8005f12:	4638      	mov	r0, r7
 8005f14:	47c8      	blx	r9
 8005f16:	3001      	adds	r0, #1
 8005f18:	d01e      	beq.n	8005f58 <_printf_common+0xa4>
 8005f1a:	6823      	ldr	r3, [r4, #0]
 8005f1c:	6922      	ldr	r2, [r4, #16]
 8005f1e:	f003 0306 	and.w	r3, r3, #6
 8005f22:	2b04      	cmp	r3, #4
 8005f24:	bf02      	ittt	eq
 8005f26:	68e5      	ldreq	r5, [r4, #12]
 8005f28:	6833      	ldreq	r3, [r6, #0]
 8005f2a:	1aed      	subeq	r5, r5, r3
 8005f2c:	68a3      	ldr	r3, [r4, #8]
 8005f2e:	bf0c      	ite	eq
 8005f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f34:	2500      	movne	r5, #0
 8005f36:	4293      	cmp	r3, r2
 8005f38:	bfc4      	itt	gt
 8005f3a:	1a9b      	subgt	r3, r3, r2
 8005f3c:	18ed      	addgt	r5, r5, r3
 8005f3e:	2600      	movs	r6, #0
 8005f40:	341a      	adds	r4, #26
 8005f42:	42b5      	cmp	r5, r6
 8005f44:	d11a      	bne.n	8005f7c <_printf_common+0xc8>
 8005f46:	2000      	movs	r0, #0
 8005f48:	e008      	b.n	8005f5c <_printf_common+0xa8>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	4652      	mov	r2, sl
 8005f4e:	4641      	mov	r1, r8
 8005f50:	4638      	mov	r0, r7
 8005f52:	47c8      	blx	r9
 8005f54:	3001      	adds	r0, #1
 8005f56:	d103      	bne.n	8005f60 <_printf_common+0xac>
 8005f58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f60:	3501      	adds	r5, #1
 8005f62:	e7c6      	b.n	8005ef2 <_printf_common+0x3e>
 8005f64:	18e1      	adds	r1, r4, r3
 8005f66:	1c5a      	adds	r2, r3, #1
 8005f68:	2030      	movs	r0, #48	@ 0x30
 8005f6a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f6e:	4422      	add	r2, r4
 8005f70:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f74:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f78:	3302      	adds	r3, #2
 8005f7a:	e7c7      	b.n	8005f0c <_printf_common+0x58>
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	4622      	mov	r2, r4
 8005f80:	4641      	mov	r1, r8
 8005f82:	4638      	mov	r0, r7
 8005f84:	47c8      	blx	r9
 8005f86:	3001      	adds	r0, #1
 8005f88:	d0e6      	beq.n	8005f58 <_printf_common+0xa4>
 8005f8a:	3601      	adds	r6, #1
 8005f8c:	e7d9      	b.n	8005f42 <_printf_common+0x8e>
	...

08005f90 <_printf_i>:
 8005f90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f94:	7e0f      	ldrb	r7, [r1, #24]
 8005f96:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f98:	2f78      	cmp	r7, #120	@ 0x78
 8005f9a:	4691      	mov	r9, r2
 8005f9c:	4680      	mov	r8, r0
 8005f9e:	460c      	mov	r4, r1
 8005fa0:	469a      	mov	sl, r3
 8005fa2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005fa6:	d807      	bhi.n	8005fb8 <_printf_i+0x28>
 8005fa8:	2f62      	cmp	r7, #98	@ 0x62
 8005faa:	d80a      	bhi.n	8005fc2 <_printf_i+0x32>
 8005fac:	2f00      	cmp	r7, #0
 8005fae:	f000 80d2 	beq.w	8006156 <_printf_i+0x1c6>
 8005fb2:	2f58      	cmp	r7, #88	@ 0x58
 8005fb4:	f000 80b9 	beq.w	800612a <_printf_i+0x19a>
 8005fb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fbc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005fc0:	e03a      	b.n	8006038 <_printf_i+0xa8>
 8005fc2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005fc6:	2b15      	cmp	r3, #21
 8005fc8:	d8f6      	bhi.n	8005fb8 <_printf_i+0x28>
 8005fca:	a101      	add	r1, pc, #4	@ (adr r1, 8005fd0 <_printf_i+0x40>)
 8005fcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fd0:	08006029 	.word	0x08006029
 8005fd4:	0800603d 	.word	0x0800603d
 8005fd8:	08005fb9 	.word	0x08005fb9
 8005fdc:	08005fb9 	.word	0x08005fb9
 8005fe0:	08005fb9 	.word	0x08005fb9
 8005fe4:	08005fb9 	.word	0x08005fb9
 8005fe8:	0800603d 	.word	0x0800603d
 8005fec:	08005fb9 	.word	0x08005fb9
 8005ff0:	08005fb9 	.word	0x08005fb9
 8005ff4:	08005fb9 	.word	0x08005fb9
 8005ff8:	08005fb9 	.word	0x08005fb9
 8005ffc:	0800613d 	.word	0x0800613d
 8006000:	08006067 	.word	0x08006067
 8006004:	080060f7 	.word	0x080060f7
 8006008:	08005fb9 	.word	0x08005fb9
 800600c:	08005fb9 	.word	0x08005fb9
 8006010:	0800615f 	.word	0x0800615f
 8006014:	08005fb9 	.word	0x08005fb9
 8006018:	08006067 	.word	0x08006067
 800601c:	08005fb9 	.word	0x08005fb9
 8006020:	08005fb9 	.word	0x08005fb9
 8006024:	080060ff 	.word	0x080060ff
 8006028:	6833      	ldr	r3, [r6, #0]
 800602a:	1d1a      	adds	r2, r3, #4
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	6032      	str	r2, [r6, #0]
 8006030:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006034:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006038:	2301      	movs	r3, #1
 800603a:	e09d      	b.n	8006178 <_printf_i+0x1e8>
 800603c:	6833      	ldr	r3, [r6, #0]
 800603e:	6820      	ldr	r0, [r4, #0]
 8006040:	1d19      	adds	r1, r3, #4
 8006042:	6031      	str	r1, [r6, #0]
 8006044:	0606      	lsls	r6, r0, #24
 8006046:	d501      	bpl.n	800604c <_printf_i+0xbc>
 8006048:	681d      	ldr	r5, [r3, #0]
 800604a:	e003      	b.n	8006054 <_printf_i+0xc4>
 800604c:	0645      	lsls	r5, r0, #25
 800604e:	d5fb      	bpl.n	8006048 <_printf_i+0xb8>
 8006050:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006054:	2d00      	cmp	r5, #0
 8006056:	da03      	bge.n	8006060 <_printf_i+0xd0>
 8006058:	232d      	movs	r3, #45	@ 0x2d
 800605a:	426d      	negs	r5, r5
 800605c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006060:	4859      	ldr	r0, [pc, #356]	@ (80061c8 <_printf_i+0x238>)
 8006062:	230a      	movs	r3, #10
 8006064:	e011      	b.n	800608a <_printf_i+0xfa>
 8006066:	6821      	ldr	r1, [r4, #0]
 8006068:	6833      	ldr	r3, [r6, #0]
 800606a:	0608      	lsls	r0, r1, #24
 800606c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006070:	d402      	bmi.n	8006078 <_printf_i+0xe8>
 8006072:	0649      	lsls	r1, r1, #25
 8006074:	bf48      	it	mi
 8006076:	b2ad      	uxthmi	r5, r5
 8006078:	2f6f      	cmp	r7, #111	@ 0x6f
 800607a:	4853      	ldr	r0, [pc, #332]	@ (80061c8 <_printf_i+0x238>)
 800607c:	6033      	str	r3, [r6, #0]
 800607e:	bf14      	ite	ne
 8006080:	230a      	movne	r3, #10
 8006082:	2308      	moveq	r3, #8
 8006084:	2100      	movs	r1, #0
 8006086:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800608a:	6866      	ldr	r6, [r4, #4]
 800608c:	60a6      	str	r6, [r4, #8]
 800608e:	2e00      	cmp	r6, #0
 8006090:	bfa2      	ittt	ge
 8006092:	6821      	ldrge	r1, [r4, #0]
 8006094:	f021 0104 	bicge.w	r1, r1, #4
 8006098:	6021      	strge	r1, [r4, #0]
 800609a:	b90d      	cbnz	r5, 80060a0 <_printf_i+0x110>
 800609c:	2e00      	cmp	r6, #0
 800609e:	d04b      	beq.n	8006138 <_printf_i+0x1a8>
 80060a0:	4616      	mov	r6, r2
 80060a2:	fbb5 f1f3 	udiv	r1, r5, r3
 80060a6:	fb03 5711 	mls	r7, r3, r1, r5
 80060aa:	5dc7      	ldrb	r7, [r0, r7]
 80060ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060b0:	462f      	mov	r7, r5
 80060b2:	42bb      	cmp	r3, r7
 80060b4:	460d      	mov	r5, r1
 80060b6:	d9f4      	bls.n	80060a2 <_printf_i+0x112>
 80060b8:	2b08      	cmp	r3, #8
 80060ba:	d10b      	bne.n	80060d4 <_printf_i+0x144>
 80060bc:	6823      	ldr	r3, [r4, #0]
 80060be:	07df      	lsls	r7, r3, #31
 80060c0:	d508      	bpl.n	80060d4 <_printf_i+0x144>
 80060c2:	6923      	ldr	r3, [r4, #16]
 80060c4:	6861      	ldr	r1, [r4, #4]
 80060c6:	4299      	cmp	r1, r3
 80060c8:	bfde      	ittt	le
 80060ca:	2330      	movle	r3, #48	@ 0x30
 80060cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80060d0:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80060d4:	1b92      	subs	r2, r2, r6
 80060d6:	6122      	str	r2, [r4, #16]
 80060d8:	f8cd a000 	str.w	sl, [sp]
 80060dc:	464b      	mov	r3, r9
 80060de:	aa03      	add	r2, sp, #12
 80060e0:	4621      	mov	r1, r4
 80060e2:	4640      	mov	r0, r8
 80060e4:	f7ff fee6 	bl	8005eb4 <_printf_common>
 80060e8:	3001      	adds	r0, #1
 80060ea:	d14a      	bne.n	8006182 <_printf_i+0x1f2>
 80060ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80060f0:	b004      	add	sp, #16
 80060f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060f6:	6823      	ldr	r3, [r4, #0]
 80060f8:	f043 0320 	orr.w	r3, r3, #32
 80060fc:	6023      	str	r3, [r4, #0]
 80060fe:	4833      	ldr	r0, [pc, #204]	@ (80061cc <_printf_i+0x23c>)
 8006100:	2778      	movs	r7, #120	@ 0x78
 8006102:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006106:	6823      	ldr	r3, [r4, #0]
 8006108:	6831      	ldr	r1, [r6, #0]
 800610a:	061f      	lsls	r7, r3, #24
 800610c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006110:	d402      	bmi.n	8006118 <_printf_i+0x188>
 8006112:	065f      	lsls	r7, r3, #25
 8006114:	bf48      	it	mi
 8006116:	b2ad      	uxthmi	r5, r5
 8006118:	6031      	str	r1, [r6, #0]
 800611a:	07d9      	lsls	r1, r3, #31
 800611c:	bf44      	itt	mi
 800611e:	f043 0320 	orrmi.w	r3, r3, #32
 8006122:	6023      	strmi	r3, [r4, #0]
 8006124:	b11d      	cbz	r5, 800612e <_printf_i+0x19e>
 8006126:	2310      	movs	r3, #16
 8006128:	e7ac      	b.n	8006084 <_printf_i+0xf4>
 800612a:	4827      	ldr	r0, [pc, #156]	@ (80061c8 <_printf_i+0x238>)
 800612c:	e7e9      	b.n	8006102 <_printf_i+0x172>
 800612e:	6823      	ldr	r3, [r4, #0]
 8006130:	f023 0320 	bic.w	r3, r3, #32
 8006134:	6023      	str	r3, [r4, #0]
 8006136:	e7f6      	b.n	8006126 <_printf_i+0x196>
 8006138:	4616      	mov	r6, r2
 800613a:	e7bd      	b.n	80060b8 <_printf_i+0x128>
 800613c:	6833      	ldr	r3, [r6, #0]
 800613e:	6825      	ldr	r5, [r4, #0]
 8006140:	6961      	ldr	r1, [r4, #20]
 8006142:	1d18      	adds	r0, r3, #4
 8006144:	6030      	str	r0, [r6, #0]
 8006146:	062e      	lsls	r6, r5, #24
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	d501      	bpl.n	8006150 <_printf_i+0x1c0>
 800614c:	6019      	str	r1, [r3, #0]
 800614e:	e002      	b.n	8006156 <_printf_i+0x1c6>
 8006150:	0668      	lsls	r0, r5, #25
 8006152:	d5fb      	bpl.n	800614c <_printf_i+0x1bc>
 8006154:	8019      	strh	r1, [r3, #0]
 8006156:	2300      	movs	r3, #0
 8006158:	6123      	str	r3, [r4, #16]
 800615a:	4616      	mov	r6, r2
 800615c:	e7bc      	b.n	80060d8 <_printf_i+0x148>
 800615e:	6833      	ldr	r3, [r6, #0]
 8006160:	1d1a      	adds	r2, r3, #4
 8006162:	6032      	str	r2, [r6, #0]
 8006164:	681e      	ldr	r6, [r3, #0]
 8006166:	6862      	ldr	r2, [r4, #4]
 8006168:	2100      	movs	r1, #0
 800616a:	4630      	mov	r0, r6
 800616c:	f7fa f838 	bl	80001e0 <memchr>
 8006170:	b108      	cbz	r0, 8006176 <_printf_i+0x1e6>
 8006172:	1b80      	subs	r0, r0, r6
 8006174:	6060      	str	r0, [r4, #4]
 8006176:	6863      	ldr	r3, [r4, #4]
 8006178:	6123      	str	r3, [r4, #16]
 800617a:	2300      	movs	r3, #0
 800617c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006180:	e7aa      	b.n	80060d8 <_printf_i+0x148>
 8006182:	6923      	ldr	r3, [r4, #16]
 8006184:	4632      	mov	r2, r6
 8006186:	4649      	mov	r1, r9
 8006188:	4640      	mov	r0, r8
 800618a:	47d0      	blx	sl
 800618c:	3001      	adds	r0, #1
 800618e:	d0ad      	beq.n	80060ec <_printf_i+0x15c>
 8006190:	6823      	ldr	r3, [r4, #0]
 8006192:	079b      	lsls	r3, r3, #30
 8006194:	d413      	bmi.n	80061be <_printf_i+0x22e>
 8006196:	68e0      	ldr	r0, [r4, #12]
 8006198:	9b03      	ldr	r3, [sp, #12]
 800619a:	4298      	cmp	r0, r3
 800619c:	bfb8      	it	lt
 800619e:	4618      	movlt	r0, r3
 80061a0:	e7a6      	b.n	80060f0 <_printf_i+0x160>
 80061a2:	2301      	movs	r3, #1
 80061a4:	4632      	mov	r2, r6
 80061a6:	4649      	mov	r1, r9
 80061a8:	4640      	mov	r0, r8
 80061aa:	47d0      	blx	sl
 80061ac:	3001      	adds	r0, #1
 80061ae:	d09d      	beq.n	80060ec <_printf_i+0x15c>
 80061b0:	3501      	adds	r5, #1
 80061b2:	68e3      	ldr	r3, [r4, #12]
 80061b4:	9903      	ldr	r1, [sp, #12]
 80061b6:	1a5b      	subs	r3, r3, r1
 80061b8:	42ab      	cmp	r3, r5
 80061ba:	dcf2      	bgt.n	80061a2 <_printf_i+0x212>
 80061bc:	e7eb      	b.n	8006196 <_printf_i+0x206>
 80061be:	2500      	movs	r5, #0
 80061c0:	f104 0619 	add.w	r6, r4, #25
 80061c4:	e7f5      	b.n	80061b2 <_printf_i+0x222>
 80061c6:	bf00      	nop
 80061c8:	0800633d 	.word	0x0800633d
 80061cc:	0800634e 	.word	0x0800634e

080061d0 <memmove>:
 80061d0:	4288      	cmp	r0, r1
 80061d2:	b510      	push	{r4, lr}
 80061d4:	eb01 0402 	add.w	r4, r1, r2
 80061d8:	d902      	bls.n	80061e0 <memmove+0x10>
 80061da:	4284      	cmp	r4, r0
 80061dc:	4623      	mov	r3, r4
 80061de:	d807      	bhi.n	80061f0 <memmove+0x20>
 80061e0:	1e43      	subs	r3, r0, #1
 80061e2:	42a1      	cmp	r1, r4
 80061e4:	d008      	beq.n	80061f8 <memmove+0x28>
 80061e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061ee:	e7f8      	b.n	80061e2 <memmove+0x12>
 80061f0:	4402      	add	r2, r0
 80061f2:	4601      	mov	r1, r0
 80061f4:	428a      	cmp	r2, r1
 80061f6:	d100      	bne.n	80061fa <memmove+0x2a>
 80061f8:	bd10      	pop	{r4, pc}
 80061fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80061fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006202:	e7f7      	b.n	80061f4 <memmove+0x24>

08006204 <_sbrk_r>:
 8006204:	b538      	push	{r3, r4, r5, lr}
 8006206:	4d06      	ldr	r5, [pc, #24]	@ (8006220 <_sbrk_r+0x1c>)
 8006208:	2300      	movs	r3, #0
 800620a:	4604      	mov	r4, r0
 800620c:	4608      	mov	r0, r1
 800620e:	602b      	str	r3, [r5, #0]
 8006210:	f7fb fc3c 	bl	8001a8c <_sbrk>
 8006214:	1c43      	adds	r3, r0, #1
 8006216:	d102      	bne.n	800621e <_sbrk_r+0x1a>
 8006218:	682b      	ldr	r3, [r5, #0]
 800621a:	b103      	cbz	r3, 800621e <_sbrk_r+0x1a>
 800621c:	6023      	str	r3, [r4, #0]
 800621e:	bd38      	pop	{r3, r4, r5, pc}
 8006220:	200003f4 	.word	0x200003f4

08006224 <memcpy>:
 8006224:	440a      	add	r2, r1
 8006226:	4291      	cmp	r1, r2
 8006228:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800622c:	d100      	bne.n	8006230 <memcpy+0xc>
 800622e:	4770      	bx	lr
 8006230:	b510      	push	{r4, lr}
 8006232:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006236:	f803 4f01 	strb.w	r4, [r3, #1]!
 800623a:	4291      	cmp	r1, r2
 800623c:	d1f9      	bne.n	8006232 <memcpy+0xe>
 800623e:	bd10      	pop	{r4, pc}

08006240 <_realloc_r>:
 8006240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006244:	4680      	mov	r8, r0
 8006246:	4615      	mov	r5, r2
 8006248:	460c      	mov	r4, r1
 800624a:	b921      	cbnz	r1, 8006256 <_realloc_r+0x16>
 800624c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006250:	4611      	mov	r1, r2
 8006252:	f7ff bc4b 	b.w	8005aec <_malloc_r>
 8006256:	b92a      	cbnz	r2, 8006264 <_realloc_r+0x24>
 8006258:	f7ff fbdc 	bl	8005a14 <_free_r>
 800625c:	2400      	movs	r4, #0
 800625e:	4620      	mov	r0, r4
 8006260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006264:	f000 f81a 	bl	800629c <_malloc_usable_size_r>
 8006268:	4285      	cmp	r5, r0
 800626a:	4606      	mov	r6, r0
 800626c:	d802      	bhi.n	8006274 <_realloc_r+0x34>
 800626e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006272:	d8f4      	bhi.n	800625e <_realloc_r+0x1e>
 8006274:	4629      	mov	r1, r5
 8006276:	4640      	mov	r0, r8
 8006278:	f7ff fc38 	bl	8005aec <_malloc_r>
 800627c:	4607      	mov	r7, r0
 800627e:	2800      	cmp	r0, #0
 8006280:	d0ec      	beq.n	800625c <_realloc_r+0x1c>
 8006282:	42b5      	cmp	r5, r6
 8006284:	462a      	mov	r2, r5
 8006286:	4621      	mov	r1, r4
 8006288:	bf28      	it	cs
 800628a:	4632      	movcs	r2, r6
 800628c:	f7ff ffca 	bl	8006224 <memcpy>
 8006290:	4621      	mov	r1, r4
 8006292:	4640      	mov	r0, r8
 8006294:	f7ff fbbe 	bl	8005a14 <_free_r>
 8006298:	463c      	mov	r4, r7
 800629a:	e7e0      	b.n	800625e <_realloc_r+0x1e>

0800629c <_malloc_usable_size_r>:
 800629c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062a0:	1f18      	subs	r0, r3, #4
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	bfbc      	itt	lt
 80062a6:	580b      	ldrlt	r3, [r1, r0]
 80062a8:	18c0      	addlt	r0, r0, r3
 80062aa:	4770      	bx	lr

080062ac <_init>:
 80062ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ae:	bf00      	nop
 80062b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062b2:	bc08      	pop	{r3}
 80062b4:	469e      	mov	lr, r3
 80062b6:	4770      	bx	lr

080062b8 <_fini>:
 80062b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ba:	bf00      	nop
 80062bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062be:	bc08      	pop	{r3}
 80062c0:	469e      	mov	lr, r3
 80062c2:	4770      	bx	lr
